
c:/Users/Janel/Documents/IoT/JS-Capstone/HR_with_O2/target/1.5.2/argon/HR_with_O2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002424  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6440  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003dcd0  000d6444  0001dcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ab4  2003dd3c  2003dd3c  0002dd3c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d64b0  000d64b0  000264b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d64d8  000d64d8  000264d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d3da0  00000000  00000000  000264dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010f38  00000000  00000000  000fa27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b917  00000000  00000000  0010b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002378  00000000  00000000  00126acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000041d0  00000000  00000000  00128e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000377cc  00000000  00000000  0012d013  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002acc4  00000000  00000000  001647df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001041d5  00000000  00000000  0018f4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c724  00000000  00000000  00293678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 ff99 	bl	d5f64 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 ff9e 	bl	d5f7a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dcd0 	.word	0x2003dcd0
   d4048:	000d6444 	.word	0x000d6444
   d404c:	2003dd3c 	.word	0x2003dd3c
   d4050:	2003dd3c 	.word	0x2003dd3c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f985 	bl	d5368 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6440 	.word	0x000d6440
   d4080:	000d63fc 	.word	0x000d63fc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b814 	b.w	d40b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f84b 	bl	d4124 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b92b 	b.w	d52ec <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bfdb 	b.w	d5050 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bfd9 	b.w	d5050 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:

byte pulseLED = 11; //Must be on PWM pin
byte readLED = 13; //Blinks with each data read

void setup()
{
   d40b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600); // initialize serial communication at 115200 bits per second:
   d40b2:	f001 fa59 	bl	d5568 <_Z16_fetch_usbserialv>
   d40b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ba:	f001 fa49 	bl	d5550 <_ZN9USBSerial5beginEl>

  pinMode(pulseLED, OUTPUT);
   d40be:	4b14      	ldr	r3, [pc, #80]	; (d4110 <setup+0x60>)
   d40c0:	2101      	movs	r1, #1
   d40c2:	7818      	ldrb	r0, [r3, #0]
   d40c4:	f001 fd58 	bl	d5b78 <pinMode>
  pinMode(readLED, OUTPUT);
   d40c8:	4b12      	ldr	r3, [pc, #72]	; (d4114 <setup+0x64>)
   d40ca:	2101      	movs	r1, #1
   d40cc:	7818      	ldrb	r0, [r3, #0]
   d40ce:	f001 fd53 	bl	d5b78 <pinMode>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
   d40d2:	f001 fda9 	bl	d5c28 <_Z19__fetch_global_Wirev>
   d40d6:	2357      	movs	r3, #87	; 0x57
   d40d8:	4601      	mov	r1, r0
   d40da:	4a0f      	ldr	r2, [pc, #60]	; (d4118 <setup+0x68>)
   d40dc:	480f      	ldr	r0, [pc, #60]	; (d411c <setup+0x6c>)
   d40de:	f000 fa73 	bl	d45c8 <_ZN8MAX301055beginER7TwoWiremh>
   d40e2:	b928      	cbnz	r0, d40f0 <setup+0x40>
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
   d40e4:	f001 fa40 	bl	d5568 <_Z16_fetch_usbserialv>
   d40e8:	490d      	ldr	r1, [pc, #52]	; (d4120 <setup+0x70>)
   d40ea:	f001 f88c 	bl	d5206 <_ZN5Print7printlnEPK19__FlashStringHelper>
   d40ee:	e7fe      	b.n	d40ee <setup+0x3e>
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
   d40f0:	2164      	movs	r1, #100	; 0x64
   d40f2:	f240 129b 	movw	r2, #411	; 0x19b
   d40f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d40fa:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d40fe:	4807      	ldr	r0, [pc, #28]	; (d411c <setup+0x6c>)
   d4100:	2302      	movs	r3, #2
   d4102:	2204      	movs	r2, #4
   d4104:	213c      	movs	r1, #60	; 0x3c
   d4106:	f000 fb1e 	bl	d4746 <_ZN8MAX301055setupEhhhiii>
}
   d410a:	b005      	add	sp, #20
   d410c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4110:	2003dcd1 	.word	0x2003dcd1
   d4114:	2003dcd0 	.word	0x2003dcd0
   d4118:	00061a80 	.word	0x00061a80
   d411c:	2003e06c 	.word	0x2003e06c
   d4120:	000d6000 	.word	0x000d6000

000d4124 <loop>:

void loop()
{
   d4124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d4128:	4b83      	ldr	r3, [pc, #524]	; (d4338 <loop+0x214>)
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();
   d412a:	4f84      	ldr	r7, [pc, #528]	; (d433c <loop+0x218>)
    irBuffer[i] = particleSensor.getIR();
   d412c:	4e84      	ldr	r6, [pc, #528]	; (d4340 <loop+0x21c>)
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
}

void loop()
{
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d412e:	2264      	movs	r2, #100	; 0x64

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
}

void loop()
{
   d4130:	b087      	sub	sp, #28
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d4132:	601a      	str	r2, [r3, #0]
   d4134:	2500      	movs	r5, #0
   d4136:	469a      	mov	sl, r3

  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++)
   d4138:	f8da 1000 	ldr.w	r1, [sl]
   d413c:	b2ec      	uxtb	r4, r5
   d413e:	428c      	cmp	r4, r1
   d4140:	da32      	bge.n	d41a8 <loop+0x84>
  {
    while (particleSensor.available() == false) //do we have new data?
   d4142:	4880      	ldr	r0, [pc, #512]	; (d4344 <loop+0x220>)
   d4144:	f000 f925 	bl	d4392 <_ZN8MAX301059availableEv>
   d4148:	b918      	cbnz	r0, d4152 <loop+0x2e>
      particleSensor.check(); //Check the sensor for new data
   d414a:	487e      	ldr	r0, [pc, #504]	; (d4344 <loop+0x220>)
   d414c:	f000 f963 	bl	d4416 <_ZN8MAX301055checkEv>
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps

  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
   d4150:	e7f7      	b.n	d4142 <loop+0x1e>
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();
   d4152:	487c      	ldr	r0, [pc, #496]	; (d4344 <loop+0x220>)
   d4154:	f000 fa14 	bl	d4580 <_ZN8MAX301056getRedEv>
   d4158:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    irBuffer[i] = particleSensor.getIR();
   d415c:	4879      	ldr	r0, [pc, #484]	; (d4344 <loop+0x220>)
   d415e:	f000 fa1b 	bl	d4598 <_ZN8MAX301055getIREv>
   d4162:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
   d4166:	4877      	ldr	r0, [pc, #476]	; (d4344 <loop+0x220>)
   d4168:	f000 f920 	bl	d43ac <_ZN8MAX3010510nextSampleEv>

    Serial.print(F("red="));
   d416c:	f001 f9fc 	bl	d5568 <_Z16_fetch_usbserialv>
   d4170:	4975      	ldr	r1, [pc, #468]	; (d4348 <loop+0x224>)
   d4172:	f001 f82e 	bl	d51d2 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(redBuffer[i], DEC);
   d4176:	f001 f9f7 	bl	d5568 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d417a:	220a      	movs	r2, #10
   d417c:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   d4180:	f001 f843 	bl	d520a <_ZN5Print11printNumberEmh>
    Serial.print(F(", ir="));
   d4184:	f001 f9f0 	bl	d5568 <_Z16_fetch_usbserialv>
   d4188:	4970      	ldr	r1, [pc, #448]	; (d434c <loop+0x228>)
   d418a:	f001 f822 	bl	d51d2 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(irBuffer[i], DEC);
   d418e:	f001 f9eb 	bl	d5568 <_Z16_fetch_usbserialv>
   d4192:	220a      	movs	r2, #10
   d4194:	4680      	mov	r8, r0
   d4196:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   d419a:	f001 f836 	bl	d520a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d419e:	4640      	mov	r0, r8
   d41a0:	f001 f81b 	bl	d51da <_ZN5Print7printlnEv>
   d41a4:	3501      	adds	r5, #1
void loop()
{
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps

  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++)
   d41a6:	e7c7      	b.n	d4138 <loop+0x14>
    Serial.print(F(", ir="));
    Serial.println(irBuffer[i], DEC);
  }

  //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d41a8:	4e69      	ldr	r6, [pc, #420]	; (d4350 <loop+0x22c>)
   d41aa:	4d6a      	ldr	r5, [pc, #424]	; (d4354 <loop+0x230>)
   d41ac:	4c6a      	ldr	r4, [pc, #424]	; (d4358 <loop+0x234>)
   d41ae:	4b6b      	ldr	r3, [pc, #428]	; (d435c <loop+0x238>)
   d41b0:	4a62      	ldr	r2, [pc, #392]	; (d433c <loop+0x218>)
   d41b2:	9602      	str	r6, [sp, #8]
   d41b4:	9501      	str	r5, [sp, #4]
   d41b6:	9400      	str	r4, [sp, #0]
   d41b8:	4861      	ldr	r0, [pc, #388]	; (d4340 <loop+0x21c>)
   d41ba:	f000 fc35 	bl	d4a28 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
  {
    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
    for (byte i = 25; i < 100; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
   d41be:	4a60      	ldr	r2, [pc, #384]	; (d4340 <loop+0x21c>)
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
}

void loop()
{
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d41c0:	2300      	movs	r3, #0
  while (1)
  {
    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
    for (byte i = 25; i < 100; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
   d41c2:	495e      	ldr	r1, [pc, #376]	; (d433c <loop+0x218>)
   d41c4:	485d      	ldr	r0, [pc, #372]	; (d433c <loop+0x218>)
   d41c6:	4419      	add	r1, r3
   d41c8:	6e49      	ldr	r1, [r1, #100]	; 0x64
   d41ca:	5019      	str	r1, [r3, r0]
      irBuffer[i - 25] = irBuffer[i];
   d41cc:	18d1      	adds	r1, r2, r3
   d41ce:	6e49      	ldr	r1, [r1, #100]	; 0x64
   d41d0:	5099      	str	r1, [r3, r2]
   d41d2:	3304      	adds	r3, #4

  //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
  while (1)
  {
    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
    for (byte i = 25; i < 100; i++)
   d41d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   d41d8:	d1f3      	bne.n	d41c2 <loop+0x9e>
   d41da:	4f61      	ldr	r7, [pc, #388]	; (d4360 <loop+0x23c>)
   d41dc:	f500 7896 	add.w	r8, r0, #300	; 0x12c
   d41e0:	f04f 0900 	mov.w	r9, #0
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
   d41e4:	4857      	ldr	r0, [pc, #348]	; (d4344 <loop+0x220>)
   d41e6:	f000 f8d4 	bl	d4392 <_ZN8MAX301059availableEv>
   d41ea:	b918      	cbnz	r0, d41f4 <loop+0xd0>
        particleSensor.check(); //Check the sensor for new data
   d41ec:	4855      	ldr	r0, [pc, #340]	; (d4344 <loop+0x220>)
   d41ee:	f000 f912 	bl	d4416 <_ZN8MAX301055checkEv>
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
   d41f2:	e7f7      	b.n	d41e4 <loop+0xc0>
        particleSensor.check(); //Check the sensor for new data

      digitalWrite(readLED, !digitalRead(readLED)); //Blink onboard LED with every data read
   d41f4:	4b5b      	ldr	r3, [pc, #364]	; (d4364 <loop+0x240>)
   d41f6:	f893 b000 	ldrb.w	fp, [r3]
   d41fa:	4658      	mov	r0, fp
   d41fc:	f001 fce6 	bl	d5bcc <digitalRead>
   d4200:	fab0 f180 	clz	r1, r0
   d4204:	0949      	lsrs	r1, r1, #5
   d4206:	4658      	mov	r0, fp
   d4208:	f001 fcc7 	bl	d5b9a <digitalWrite>

      redBuffer[i] = particleSensor.getRed();
   d420c:	484d      	ldr	r0, [pc, #308]	; (d4344 <loop+0x220>)
   d420e:	f000 f9b7 	bl	d4580 <_ZN8MAX301056getRedEv>
   d4212:	f8c8 0000 	str.w	r0, [r8]
      irBuffer[i] = particleSensor.getIR();
   d4216:	484b      	ldr	r0, [pc, #300]	; (d4344 <loop+0x220>)
   d4218:	f000 f9be 	bl	d4598 <_ZN8MAX301055getIREv>
   d421c:	6038      	str	r0, [r7, #0]
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
   d421e:	4849      	ldr	r0, [pc, #292]	; (d4344 <loop+0x220>)
   d4220:	f000 f8c4 	bl	d43ac <_ZN8MAX3010510nextSampleEv>

      //send samples and calculation result to terminal program through UART
      Serial.print(F("red="));
   d4224:	f001 f9a0 	bl	d5568 <_Z16_fetch_usbserialv>
   d4228:	4947      	ldr	r1, [pc, #284]	; (d4348 <loop+0x224>)
   d422a:	f000 ffd2 	bl	d51d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(redBuffer[i], DEC);
   d422e:	f001 f99b 	bl	d5568 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4232:	220a      	movs	r2, #10
   d4234:	f8d8 1000 	ldr.w	r1, [r8]
   d4238:	f000 ffe7 	bl	d520a <_ZN5Print11printNumberEmh>
      Serial.print(F(", ir="));
   d423c:	f001 f994 	bl	d5568 <_Z16_fetch_usbserialv>
   d4240:	4942      	ldr	r1, [pc, #264]	; (d434c <loop+0x228>)
   d4242:	f000 ffc6 	bl	d51d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(irBuffer[i], DEC);
   d4246:	f001 f98f 	bl	d5568 <_Z16_fetch_usbserialv>
   d424a:	220a      	movs	r2, #10
   d424c:	6839      	ldr	r1, [r7, #0]
   d424e:	f000 ffdc 	bl	d520a <_ZN5Print11printNumberEmh>

      Serial.print(F(", HR="));
   d4252:	f001 f989 	bl	d5568 <_Z16_fetch_usbserialv>
   d4256:	4944      	ldr	r1, [pc, #272]	; (d4368 <loop+0x244>)
   d4258:	f000 ffbb 	bl	d51d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(heartRate, DEC);
   d425c:	f001 f984 	bl	d5568 <_Z16_fetch_usbserialv>
   d4260:	682b      	ldr	r3, [r5, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4262:	2b00      	cmp	r3, #0
   d4264:	4683      	mov	fp, r0
   d4266:	da06      	bge.n	d4276 <loop+0x152>
            t = print('-');
   d4268:	212d      	movs	r1, #45	; 0x2d
   d426a:	9305      	str	r3, [sp, #20]
   d426c:	f000 ffae 	bl	d51cc <_ZN5Print5printEc>
            val = -n;
   d4270:	9b05      	ldr	r3, [sp, #20]
   d4272:	4259      	negs	r1, r3
   d4274:	e000      	b.n	d4278 <loop+0x154>
        } else {
            val = n;
   d4276:	4619      	mov	r1, r3
        }
        return printNumber(val, base) + t;
   d4278:	220a      	movs	r2, #10
   d427a:	4658      	mov	r0, fp
   d427c:	f000 ffc5 	bl	d520a <_ZN5Print11printNumberEmh>

      Serial.print(F(", HRvalid="));
   d4280:	f001 f972 	bl	d5568 <_Z16_fetch_usbserialv>
   d4284:	4939      	ldr	r1, [pc, #228]	; (d436c <loop+0x248>)
   d4286:	f000 ffa4 	bl	d51d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(validHeartRate, DEC);
   d428a:	f001 f96d 	bl	d5568 <_Z16_fetch_usbserialv>
   d428e:	f996 3000 	ldrsb.w	r3, [r6]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4292:	2b00      	cmp	r3, #0
   d4294:	4683      	mov	fp, r0
   d4296:	da06      	bge.n	d42a6 <loop+0x182>
            t = print('-');
   d4298:	212d      	movs	r1, #45	; 0x2d
   d429a:	9305      	str	r3, [sp, #20]
   d429c:	f000 ff96 	bl	d51cc <_ZN5Print5printEc>
            val = -n;
   d42a0:	9b05      	ldr	r3, [sp, #20]
   d42a2:	4259      	negs	r1, r3
   d42a4:	e000      	b.n	d42a8 <loop+0x184>
        } else {
            val = n;
   d42a6:	4619      	mov	r1, r3
        }
        return printNumber(val, base) + t;
   d42a8:	220a      	movs	r2, #10
   d42aa:	4658      	mov	r0, fp
   d42ac:	f000 ffad 	bl	d520a <_ZN5Print11printNumberEmh>

      Serial.print(F(", SPO2="));
   d42b0:	f001 f95a 	bl	d5568 <_Z16_fetch_usbserialv>
   d42b4:	492e      	ldr	r1, [pc, #184]	; (d4370 <loop+0x24c>)
   d42b6:	f000 ff8c 	bl	d51d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(spo2, DEC);
   d42ba:	f001 f955 	bl	d5568 <_Z16_fetch_usbserialv>
   d42be:	4b27      	ldr	r3, [pc, #156]	; (d435c <loop+0x238>)
   d42c0:	681b      	ldr	r3, [r3, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d42c2:	2b00      	cmp	r3, #0
   d42c4:	4683      	mov	fp, r0
   d42c6:	da06      	bge.n	d42d6 <loop+0x1b2>
            t = print('-');
   d42c8:	212d      	movs	r1, #45	; 0x2d
   d42ca:	9305      	str	r3, [sp, #20]
   d42cc:	f000 ff7e 	bl	d51cc <_ZN5Print5printEc>
            val = -n;
   d42d0:	9b05      	ldr	r3, [sp, #20]
   d42d2:	4259      	negs	r1, r3
   d42d4:	e000      	b.n	d42d8 <loop+0x1b4>
        } else {
            val = n;
   d42d6:	4619      	mov	r1, r3
        }
        return printNumber(val, base) + t;
   d42d8:	220a      	movs	r2, #10
   d42da:	4658      	mov	r0, fp
   d42dc:	f000 ff95 	bl	d520a <_ZN5Print11printNumberEmh>

      Serial.print(F(", SPO2Valid="));
   d42e0:	f001 f942 	bl	d5568 <_Z16_fetch_usbserialv>
   d42e4:	4923      	ldr	r1, [pc, #140]	; (d4374 <loop+0x250>)
   d42e6:	f000 ff74 	bl	d51d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(validSPO2, DEC);
   d42ea:	f001 f93d 	bl	d5568 <_Z16_fetch_usbserialv>
   d42ee:	f994 3000 	ldrsb.w	r3, [r4]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d42f2:	2b00      	cmp	r3, #0
   d42f4:	4683      	mov	fp, r0
   d42f6:	da06      	bge.n	d4306 <loop+0x1e2>
            t = print('-');
   d42f8:	212d      	movs	r1, #45	; 0x2d
   d42fa:	9305      	str	r3, [sp, #20]
   d42fc:	f000 ff66 	bl	d51cc <_ZN5Print5printEc>
            val = -n;
   d4300:	9b05      	ldr	r3, [sp, #20]
   d4302:	4259      	negs	r1, r3
   d4304:	e000      	b.n	d4308 <loop+0x1e4>
        } else {
            val = n;
   d4306:	4619      	mov	r1, r3
        }
        return printNumber(val, base) + t;
   d4308:	220a      	movs	r2, #10
   d430a:	4658      	mov	r0, fp
   d430c:	f000 ff7d 	bl	d520a <_ZN5Print11printNumberEmh>
   d4310:	f109 0904 	add.w	r9, r9, #4
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4314:	4658      	mov	r0, fp
   d4316:	f000 ff60 	bl	d51da <_ZN5Print7printlnEv>
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
   d431a:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
   d431e:	f108 0804 	add.w	r8, r8, #4
   d4322:	f107 0704 	add.w	r7, r7, #4
   d4326:	f47f af5d 	bne.w	d41e4 <loop+0xc0>
      Serial.print(F(", SPO2Valid="));
      Serial.println(validSPO2, DEC);
    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d432a:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
   d432e:	4b0b      	ldr	r3, [pc, #44]	; (d435c <loop+0x238>)
   d4330:	4a02      	ldr	r2, [pc, #8]	; (d433c <loop+0x218>)
   d4332:	f8da 1000 	ldr.w	r1, [sl]
   d4336:	e73f      	b.n	d41b8 <loop+0x94>
   d4338:	2003e068 	.word	0x2003e068
   d433c:	2003dd40 	.word	0x2003dd40
   d4340:	2003ded8 	.word	0x2003ded8
   d4344:	2003e06c 	.word	0x2003e06c
   d4348:	000d6033 	.word	0x000d6033
   d434c:	000d6038 	.word	0x000d6038
   d4350:	2003e0a8 	.word	0x2003e0a8
   d4354:	2003ded0 	.word	0x2003ded0
   d4358:	2003ded4 	.word	0x2003ded4
   d435c:	2003e0ac 	.word	0x2003e0ac
   d4360:	2003e004 	.word	0x2003e004
   d4364:	2003dcd0 	.word	0x2003dcd0
   d4368:	000d603e 	.word	0x000d603e
   d436c:	000d6044 	.word	0x000d6044
   d4370:	000d604f 	.word	0x000d604f
   d4374:	000d6057 	.word	0x000d6057

000d4378 <_GLOBAL__sub_I_particleSensor>:
  }
   d4378:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d437a:	f000 fc95 	bl	d4ca8 <HAL_Pin_Map>

#include <Wire.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"

MAX30105 particleSensor;
   d437e:	4802      	ldr	r0, [pc, #8]	; (d4388 <_GLOBAL__sub_I_particleSensor+0x10>)
    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  }
   d4380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#include <Wire.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"

MAX30105 particleSensor;
   d4384:	f000 b804 	b.w	d4390 <_ZN8MAX30105C1Ev>
   d4388:	2003e06c 	.word	0x2003e06c

000d438c <_GLOBAL__sub_I_IR_AC_Max>:
   d438c:	f000 bc8c 	b.w	d4ca8 <HAL_Pin_Map>

000d4390 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
   d4390:	4770      	bx	lr

000d4392 <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  int8_t numberOfSamples = sense.head - sense.tail;
   d4392:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4396:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
   d439a:	1a1b      	subs	r3, r3, r0
   d439c:	b2db      	uxtb	r3, r3
   d439e:	b258      	sxtb	r0, r3
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
   d43a0:	2800      	cmp	r0, #0
   d43a2:	bfbc      	itt	lt
   d43a4:	3304      	addlt	r3, #4
   d43a6:	b258      	sxtblt	r0, r3

  return (numberOfSamples);
}
   d43a8:	b2c0      	uxtb	r0, r0
   d43aa:	4770      	bx	lr

000d43ac <_ZN8MAX3010510nextSampleEv>:
  return (sense.green[sense.tail]);
}

//Advance the tail
void MAX30105::nextSample(void)
{
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4602      	mov	r2, r0
  if(available()) //Only advance the tail if new data is available
   d43b0:	f7ff ffef 	bl	d4392 <_ZN8MAX301059availableEv>
   d43b4:	b130      	cbz	r0, d43c4 <_ZN8MAX3010510nextSampleEv+0x18>
  {
    sense.tail++;
    sense.tail %= STORAGE_SIZE; //Wrap condition
   d43b6:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   d43ba:	3301      	adds	r3, #1
   d43bc:	f003 0303 	and.w	r3, r3, #3
   d43c0:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
   d43c4:	bd08      	pop	{r3, pc}

000d43c6 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d43c6:	b570      	push	{r4, r5, r6, lr}
   d43c8:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d43ca:	6800      	ldr	r0, [r0, #0]
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d43cc:	4616      	mov	r6, r2
   d43ce:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   d43d0:	f001 f9eb 	bl	d57aa <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d43d4:	6820      	ldr	r0, [r4, #0]
   d43d6:	6803      	ldr	r3, [r0, #0]
   d43d8:	4631      	mov	r1, r6
   d43da:	689b      	ldr	r3, [r3, #8]
   d43dc:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   d43de:	2100      	movs	r1, #0
   d43e0:	6820      	ldr	r0, [r4, #0]
   d43e2:	f001 f9e9 	bl	d57b8 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
   d43e6:	2201      	movs	r2, #1
   d43e8:	4629      	mov	r1, r5
   d43ea:	6820      	ldr	r0, [r4, #0]
   d43ec:	f001 f9da 	bl	d57a4 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d43f0:	6820      	ldr	r0, [r4, #0]
   d43f2:	6803      	ldr	r3, [r0, #0]
   d43f4:	691b      	ldr	r3, [r3, #16]
   d43f6:	4798      	blx	r3
   d43f8:	b120      	cbz	r0, d4404 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
   d43fa:	6820      	ldr	r0, [r4, #0]
   d43fc:	6803      	ldr	r3, [r0, #0]
   d43fe:	695b      	ldr	r3, [r3, #20]
   d4400:	4798      	blx	r3
   d4402:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
   d4404:	bd70      	pop	{r4, r5, r6, pc}

000d4406 <_ZN8MAX3010515getWritePointerEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t MAX30105::getWritePointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   d4406:	2204      	movs	r2, #4
   d4408:	7901      	ldrb	r1, [r0, #4]
   d440a:	f7ff bfdc 	b.w	d43c6 <_ZN8MAX3010513readRegister8Ehh>

000d440e <_ZN8MAX3010514getReadPointerEv>:
}

//Read the FIFO Read Pointer
uint8_t MAX30105::getReadPointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   d440e:	2206      	movs	r2, #6
   d4410:	7901      	ldrb	r1, [r0, #4]
   d4412:	f7ff bfd8 	b.w	d43c6 <_ZN8MAX3010513readRegister8Ehh>

000d4416 <_ZN8MAX301055checkEv>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105::check(void)
{
   d4416:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d441a:	4604      	mov	r4, r0
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
   d441c:	f7ff fff7 	bl	d440e <_ZN8MAX3010514getReadPointerEv>
   d4420:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
   d4422:	4620      	mov	r0, r4
   d4424:	f7ff ffef 	bl	d4406 <_ZN8MAX3010515getWritePointerEv>

  int numberOfSamples = 0;

  //Do we have new data?
  if (readPointer != writePointer)
   d4428:	4285      	cmp	r5, r0
   d442a:	f000 808e 	beq.w	d454a <_ZN8MAX301055checkEv+0x134>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d442e:	1b47      	subs	r7, r0, r5
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d4430:	f04f 0157 	mov.w	r1, #87	; 0x57
   d4434:	6820      	ldr	r0, [r4, #0]
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d4436:	7966      	ldrb	r6, [r4, #5]
  //Do we have new data?
  if (readPointer != writePointer)
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d4438:	bf48      	it	mi
   d443a:	3720      	addmi	r7, #32
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d443c:	f001 f9b9 	bl	d57b2 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   d4440:	6820      	ldr	r0, [r4, #0]
   d4442:	6803      	ldr	r3, [r0, #0]
   d4444:	2107      	movs	r1, #7
   d4446:	689b      	ldr	r3, [r3, #8]
   d4448:	4798      	blx	r3
    _i2cPort->endTransmission();
   d444a:	6820      	ldr	r0, [r4, #0]
   d444c:	f001 f9b8 	bl	d57c0 <_ZN7TwoWire15endTransmissionEv>
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d4450:	437e      	muls	r6, r7
   d4452:	eb06 0646 	add.w	r6, r6, r6, lsl #1
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d4456:	f04f 0820 	mov.w	r8, #32

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
   d445a:	f04f 0900 	mov.w	r9, #0
    _i2cPort->endTransmission();

    //We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
    //I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
    //Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
    while (bytesLeftToRead > 0)
   d445e:	2e00      	cmp	r6, #0
   d4460:	dd74      	ble.n	d454c <_ZN8MAX301055checkEv+0x136>
    {
      int toGet = bytesLeftToRead;
      if (toGet > I2C_BUFFER_LENGTH)
   d4462:	2e20      	cmp	r6, #32
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d4464:	bfc8      	it	gt
   d4466:	7965      	ldrbgt	r5, [r4, #5]
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d4468:	6820      	ldr	r0, [r4, #0]
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d446a:	bfc9      	itett	gt
   d446c:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
   d4470:	4635      	movle	r5, r6
   d4472:	fb98 f3f5 	sdivgt	r3, r8, r5
   d4476:	435d      	mulgt	r5, r3
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d4478:	462a      	mov	r2, r5
   d447a:	2157      	movs	r1, #87	; 0x57
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
      }

      bytesLeftToRead -= toGet;
   d447c:	1b76      	subs	r6, r6, r5

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d447e:	f001 f991 	bl	d57a4 <_ZN7TwoWire11requestFromEhj>
      
      while (toGet > 0)
   d4482:	2d00      	cmp	r5, #0
   d4484:	ddeb      	ble.n	d445e <_ZN8MAX301055checkEv+0x48>
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
   d4486:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
   d448a:	6820      	ldr	r0, [r4, #0]

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
   d448c:	f88d 9007 	strb.w	r9, [sp, #7]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
   d4490:	3301      	adds	r3, #1
   d4492:	f003 0303 	and.w	r3, r3, #3
   d4496:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
   d449a:	6803      	ldr	r3, [r0, #0]
   d449c:	695b      	ldr	r3, [r3, #20]
   d449e:	4798      	blx	r3
   d44a0:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   d44a4:	6820      	ldr	r0, [r4, #0]
   d44a6:	6803      	ldr	r3, [r0, #0]
   d44a8:	695b      	ldr	r3, [r3, #20]
   d44aa:	4798      	blx	r3
   d44ac:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   d44b0:	6820      	ldr	r0, [r4, #0]
   d44b2:	6803      	ldr	r3, [r0, #0]
   d44b4:	695b      	ldr	r3, [r3, #20]
   d44b6:	4798      	blx	r3
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d44b8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
        temp[1] = _i2cPort->read();
        temp[0] = _i2cPort->read();
   d44bc:	f88d 0004 	strb.w	r0, [sp, #4]
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d44c0:	9a01      	ldr	r2, [sp, #4]
   d44c2:	3302      	adds	r3, #2
   d44c4:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d44c8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

        if (activeLEDs > 1)
   d44cc:	7963      	ldrb	r3, [r4, #5]
   d44ce:	2b01      	cmp	r3, #1
   d44d0:	d919      	bls.n	d4506 <_ZN8MAX301055checkEv+0xf0>
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
   d44d2:	6820      	ldr	r0, [r4, #0]
   d44d4:	6803      	ldr	r3, [r0, #0]
   d44d6:	695b      	ldr	r3, [r3, #20]
   d44d8:	4798      	blx	r3
   d44da:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d44de:	6820      	ldr	r0, [r4, #0]
   d44e0:	6803      	ldr	r3, [r0, #0]
   d44e2:	695b      	ldr	r3, [r3, #20]
   d44e4:	4798      	blx	r3
   d44e6:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d44ea:	6820      	ldr	r0, [r4, #0]
   d44ec:	6803      	ldr	r3, [r0, #0]
   d44ee:	695b      	ldr	r3, [r3, #20]
   d44f0:	4798      	blx	r3
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
   d44f2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
          temp[1] = _i2cPort->read();
          temp[0] = _i2cPort->read();
   d44f6:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
   d44fa:	9a01      	ldr	r2, [sp, #4]
   d44fc:	3306      	adds	r3, #6
   d44fe:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d4502:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        if (activeLEDs > 2)
   d4506:	7963      	ldrb	r3, [r4, #5]
   d4508:	2b02      	cmp	r3, #2
   d450a:	d919      	bls.n	d4540 <_ZN8MAX301055checkEv+0x12a>
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
   d450c:	6820      	ldr	r0, [r4, #0]
   d450e:	6803      	ldr	r3, [r0, #0]
   d4510:	695b      	ldr	r3, [r3, #20]
   d4512:	4798      	blx	r3
   d4514:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d4518:	6820      	ldr	r0, [r4, #0]
   d451a:	6803      	ldr	r3, [r0, #0]
   d451c:	695b      	ldr	r3, [r3, #20]
   d451e:	4798      	blx	r3
   d4520:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d4524:	6820      	ldr	r0, [r4, #0]
   d4526:	6803      	ldr	r3, [r0, #0]
   d4528:	695b      	ldr	r3, [r3, #20]
   d452a:	4798      	blx	r3
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
   d452c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
          temp[1] = _i2cPort->read();
          temp[0] = _i2cPort->read();
   d4530:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
   d4534:	9a01      	ldr	r2, [sp, #4]
   d4536:	330a      	adds	r3, #10
   d4538:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d453c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        toGet -= activeLEDs * 3;
   d4540:	7963      	ldrb	r3, [r4, #5]
   d4542:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d4546:	441d      	add	r5, r3
      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
   d4548:	e79b      	b.n	d4482 <_ZN8MAX301055checkEv+0x6c>
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
  byte writePointer = getWritePointer();

  int numberOfSamples = 0;
   d454a:	2700      	movs	r7, #0
    } //End while (bytesLeftToRead > 0)

  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
}
   d454c:	b2b8      	uxth	r0, r7
   d454e:	b003      	add	sp, #12
   d4550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4554 <_ZN8MAX301059safeCheckEh>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
   d4554:	b570      	push	{r4, r5, r6, lr}
   d4556:	4605      	mov	r5, r0
   d4558:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d455a:	f000 fbe5 	bl	d4d28 <HAL_Timer_Get_Milli_Seconds>
   d455e:	4604      	mov	r4, r0
   d4560:	f000 fbe2 	bl	d4d28 <HAL_Timer_Get_Milli_Seconds>
  uint32_t markTime = millis();
  
  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
   d4564:	1b00      	subs	r0, r0, r4
   d4566:	42b0      	cmp	r0, r6
   d4568:	d808      	bhi.n	d457c <_ZN8MAX301059safeCheckEh+0x28>

	if(check() == true) //We found new data!
   d456a:	4628      	mov	r0, r5
   d456c:	f7ff ff53 	bl	d4416 <_ZN8MAX301055checkEv>
   d4570:	2801      	cmp	r0, #1
   d4572:	d004      	beq.n	d457e <_ZN8MAX301059safeCheckEh+0x2a>
	  return(true);

	delay(1);
   d4574:	2001      	movs	r0, #1
   d4576:	f000 fe7b 	bl	d5270 <delay>
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
  uint32_t markTime = millis();
  
  while(1)
   d457a:	e7f1      	b.n	d4560 <_ZN8MAX301059safeCheckEh+0xc>
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
   d457c:	2000      	movs	r0, #0
	if(check() == true) //We found new data!
	  return(true);

	delay(1);
  }
}
   d457e:	bd70      	pop	{r4, r5, r6, pc}

000d4580 <_ZN8MAX301056getRedEv>:
  return (numberOfSamples);
}

//Report the most recent red value
uint32_t MAX30105::getRed(void)
{
   d4580:	b510      	push	{r4, lr}
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d4582:	21fa      	movs	r1, #250	; 0xfa
  return (numberOfSamples);
}

//Report the most recent red value
uint32_t MAX30105::getRed(void)
{
   d4584:	4604      	mov	r4, r0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d4586:	f7ff ffe5 	bl	d4554 <_ZN8MAX301059safeCheckEh>
   d458a:	b120      	cbz	r0, d4596 <_ZN8MAX301056getRedEv+0x16>
    return (sense.red[sense.head]);
   d458c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d4590:	3302      	adds	r3, #2
   d4592:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  else
    return(0); //Sensor failed to find new data
}
   d4596:	bd10      	pop	{r4, pc}

000d4598 <_ZN8MAX301055getIREv>:

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
   d4598:	b510      	push	{r4, lr}
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d459a:	21fa      	movs	r1, #250	; 0xfa
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
   d459c:	4604      	mov	r4, r0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d459e:	f7ff ffd9 	bl	d4554 <_ZN8MAX301059safeCheckEh>
   d45a2:	b120      	cbz	r0, d45ae <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   d45a4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d45a8:	3306      	adds	r3, #6
   d45aa:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  else
    return(0); //Sensor failed to find new data
}
   d45ae:	bd10      	pop	{r4, pc}

000d45b0 <_ZN8MAX3010510readPartIDEv>:

//
// Device ID and Revision
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
   d45b0:	22ff      	movs	r2, #255	; 0xff
   d45b2:	7901      	ldrb	r1, [r0, #4]
   d45b4:	f7ff bf07 	b.w	d43c6 <_ZN8MAX3010513readRegister8Ehh>

000d45b8 <_ZN8MAX3010514readRevisionIDEv>:
}

void MAX30105::readRevisionID() {
   d45b8:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d45ba:	22fe      	movs	r2, #254	; 0xfe
   d45bc:	7901      	ldrb	r1, [r0, #4]
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
}

void MAX30105::readRevisionID() {
   d45be:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d45c0:	f7ff ff01 	bl	d43c6 <_ZN8MAX3010513readRegister8Ehh>
   d45c4:	71a0      	strb	r0, [r4, #6]
   d45c6:	bd10      	pop	{r4, pc}

000d45c8 <_ZN8MAX301055beginER7TwoWiremh>:

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d45c8:	b570      	push	{r4, r5, r6, lr}
   d45ca:	4604      	mov	r4, r0
   d45cc:	4616      	mov	r6, r2
   d45ce:	4608      	mov	r0, r1

  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d45d0:	6021      	str	r1, [r4, #0]

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d45d2:	461d      	mov	r5, r3

  _i2cPort = &wirePort; //Grab which port the user wants us to use

  _i2cPort->begin();
   d45d4:	f001 f8b2 	bl	d573c <_ZN7TwoWire5beginEv>

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d45d8:	4631      	mov	r1, r6
   d45da:	6820      	ldr	r0, [r4, #0]
   d45dc:	f001 f8aa 	bl	d5734 <_ZN7TwoWire8setSpeedEm>
  _i2cPort->setClock(i2cSpeed);

  _i2caddr = i2caddr;
   d45e0:	7125      	strb	r5, [r4, #4]

  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
   d45e2:	4620      	mov	r0, r4
   d45e4:	f7ff ffe4 	bl	d45b0 <_ZN8MAX3010510readPartIDEv>
   d45e8:	2815      	cmp	r0, #21
   d45ea:	d104      	bne.n	d45f6 <_ZN8MAX301055beginER7TwoWiremh+0x2e>
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
  }

  // Populate revision ID
  readRevisionID();
   d45ec:	4620      	mov	r0, r4
   d45ee:	f7ff ffe3 	bl	d45b8 <_ZN8MAX3010514readRevisionIDEv>
  
  return true;
   d45f2:	2001      	movs	r0, #1
   d45f4:	bd70      	pop	{r4, r5, r6, pc}
  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
   d45f6:	2000      	movs	r0, #0

  // Populate revision ID
  readRevisionID();
  
  return true;
}
   d45f8:	bd70      	pop	{r4, r5, r6, pc}

000d45fa <_ZN8MAX3010514writeRegister8Ehhh>:

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d45fa:	b570      	push	{r4, r5, r6, lr}
   d45fc:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d45fe:	6800      	ldr	r0, [r0, #0]

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d4600:	4616      	mov	r6, r2
   d4602:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   d4604:	f001 f8d1 	bl	d57aa <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d4608:	6820      	ldr	r0, [r4, #0]
   d460a:	6803      	ldr	r3, [r0, #0]
   d460c:	4631      	mov	r1, r6
   d460e:	689b      	ldr	r3, [r3, #8]
   d4610:	4798      	blx	r3
  _i2cPort->write(value);
   d4612:	6820      	ldr	r0, [r4, #0]
   d4614:	6803      	ldr	r3, [r0, #0]
   d4616:	4629      	mov	r1, r5
   d4618:	689a      	ldr	r2, [r3, #8]
   d461a:	4790      	blx	r2
  _i2cPort->endTransmission();
   d461c:	6820      	ldr	r0, [r4, #0]
}
   d461e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
  _i2cPort->beginTransmission(address);
  _i2cPort->write(reg);
  _i2cPort->write(value);
  _i2cPort->endTransmission();
   d4622:	f001 b8cd 	b.w	d57c0 <_ZN7TwoWire15endTransmissionEv>

000d4626 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
}

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   d4626:	460b      	mov	r3, r1
   d4628:	220c      	movs	r2, #12
   d462a:	7901      	ldrb	r1, [r0, #4]
   d462c:	f7ff bfe5 	b.w	d45fa <_ZN8MAX3010514writeRegister8Ehhh>

000d4630 <_ZN8MAX3010519setPulseAmplitudeIREh>:
}

void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   d4630:	460b      	mov	r3, r1
   d4632:	220d      	movs	r2, #13
   d4634:	7901      	ldrb	r1, [r0, #4]
   d4636:	f7ff bfe0 	b.w	d45fa <_ZN8MAX3010514writeRegister8Ehhh>

000d463a <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
}

void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   d463a:	460b      	mov	r3, r1
   d463c:	220e      	movs	r2, #14
   d463e:	7901      	ldrb	r1, [r0, #4]
   d4640:	f7ff bfdb 	b.w	d45fa <_ZN8MAX3010514writeRegister8Ehhh>

000d4644 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
}

void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   d4644:	460b      	mov	r3, r1
   d4646:	2210      	movs	r2, #16
   d4648:	7901      	ldrb	r1, [r0, #4]
   d464a:	f7ff bfd6 	b.w	d45fa <_ZN8MAX3010514writeRegister8Ehhh>

000d464e <_ZN8MAX301059clearFIFOEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
}

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
   d464e:	b510      	push	{r4, lr}
   d4650:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   d4652:	7901      	ldrb	r1, [r0, #4]
   d4654:	2300      	movs	r3, #0
   d4656:	2204      	movs	r2, #4
   d4658:	f7ff ffcf 	bl	d45fa <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   d465c:	7921      	ldrb	r1, [r4, #4]
   d465e:	4620      	mov	r0, r4
   d4660:	2300      	movs	r3, #0
   d4662:	2205      	movs	r2, #5
   d4664:	f7ff ffc9 	bl	d45fa <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d4668:	7921      	ldrb	r1, [r4, #4]
   d466a:	4620      	mov	r0, r4
   d466c:	2300      	movs	r3, #0
   d466e:	2206      	movs	r2, #6
}
   d4670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d4674:	f7ff bfc1 	b.w	d45fa <_ZN8MAX3010514writeRegister8Ehhh>

000d4678 <_ZN8MAX301057bitMaskEhhh>:
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
   d4678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d467c:	460e      	mov	r6, r1
   d467e:	4615      	mov	r5, r2
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d4680:	460a      	mov	r2, r1
   d4682:	7901      	ldrb	r1, [r0, #4]
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
   d4684:	4604      	mov	r4, r0
   d4686:	461f      	mov	r7, r3
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d4688:	f7ff fe9d 	bl	d43c6 <_ZN8MAX3010513readRegister8Ehh>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d468c:	4028      	ands	r0, r5
   d468e:	ea47 0300 	orr.w	r3, r7, r0
   d4692:	4632      	mov	r2, r6
   d4694:	7921      	ldrb	r1, [r4, #4]
   d4696:	4620      	mov	r0, r4
}
   d4698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d469c:	f7ff bfad 	b.w	d45fa <_ZN8MAX3010514writeRegister8Ehhh>

000d46a0 <_ZN8MAX301059softResetEv>:
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
   d46a0:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d46a2:	22bf      	movs	r2, #191	; 0xbf
   d46a4:	2340      	movs	r3, #64	; 0x40
   d46a6:	2109      	movs	r1, #9
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
   d46a8:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d46aa:	f7ff ffe5 	bl	d4678 <_ZN8MAX301057bitMaskEhhh>
   d46ae:	f000 fb3b 	bl	d4d28 <HAL_Timer_Get_Milli_Seconds>
   d46b2:	4605      	mov	r5, r0
   d46b4:	f000 fb38 	bl	d4d28 <HAL_Timer_Get_Milli_Seconds>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
   d46b8:	1b40      	subs	r0, r0, r5
   d46ba:	2863      	cmp	r0, #99	; 0x63
   d46bc:	d80a      	bhi.n	d46d4 <_ZN8MAX301059softResetEv+0x34>
  {
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   d46be:	2209      	movs	r2, #9
   d46c0:	7921      	ldrb	r1, [r4, #4]
   d46c2:	4620      	mov	r0, r4
   d46c4:	f7ff fe7f 	bl	d43c6 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   d46c8:	0643      	lsls	r3, r0, #25
   d46ca:	d503      	bpl.n	d46d4 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   d46cc:	2001      	movs	r0, #1
   d46ce:	f000 fdcf 	bl	d5270 <delay>
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
   d46d2:	e7ef      	b.n	d46b4 <_ZN8MAX301059softResetEv+0x14>
   d46d4:	bd38      	pop	{r3, r4, r5, pc}

000d46d6 <_ZN8MAX3010510setLEDModeEh>:
}

void MAX30105::setLEDMode(uint8_t mode) {
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   d46d6:	460b      	mov	r3, r1
   d46d8:	22f8      	movs	r2, #248	; 0xf8
   d46da:	2109      	movs	r1, #9
   d46dc:	f7ff bfcc 	b.w	d4678 <_ZN8MAX301057bitMaskEhhh>

000d46e0 <_ZN8MAX3010511setADCRangeEh>:
}

void MAX30105::setADCRange(uint8_t adcRange) {
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   d46e0:	460b      	mov	r3, r1
   d46e2:	229f      	movs	r2, #159	; 0x9f
   d46e4:	210a      	movs	r1, #10
   d46e6:	f7ff bfc7 	b.w	d4678 <_ZN8MAX301057bitMaskEhhh>

000d46ea <_ZN8MAX3010513setSampleRateEh>:
}

void MAX30105::setSampleRate(uint8_t sampleRate) {
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   d46ea:	460b      	mov	r3, r1
   d46ec:	22e3      	movs	r2, #227	; 0xe3
   d46ee:	210a      	movs	r1, #10
   d46f0:	f7ff bfc2 	b.w	d4678 <_ZN8MAX301057bitMaskEhhh>

000d46f4 <_ZN8MAX3010513setPulseWidthEh>:
}

void MAX30105::setPulseWidth(uint8_t pulseWidth) {
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   d46f4:	460b      	mov	r3, r1
   d46f6:	22fc      	movs	r2, #252	; 0xfc
   d46f8:	210a      	movs	r1, #10
   d46fa:	f7ff bfbd 	b.w	d4678 <_ZN8MAX301057bitMaskEhhh>

000d46fe <_ZN8MAX3010514setFIFOAverageEh>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   d46fe:	460b      	mov	r3, r1
   d4700:	221f      	movs	r2, #31
   d4702:	2108      	movs	r1, #8
   d4704:	f7ff bfb8 	b.w	d4678 <_ZN8MAX301057bitMaskEhhh>

000d4708 <_ZN8MAX3010518enableFIFORolloverEv>:
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
}

//Enable roll over if FIFO over flows
void MAX30105::enableFIFORollover(void) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   d4708:	2310      	movs	r3, #16
   d470a:	22ef      	movs	r2, #239	; 0xef
   d470c:	2108      	movs	r1, #8
   d470e:	f7ff bfb3 	b.w	d4678 <_ZN8MAX301057bitMaskEhhh>

000d4712 <_ZN8MAX3010510enableSlotEhh>:
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {

  uint8_t originalContents;

  switch (slotNumber) {
   d4712:	3901      	subs	r1, #1

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   d4714:	4613      	mov	r3, r2

  uint8_t originalContents;

  switch (slotNumber) {
   d4716:	2903      	cmp	r1, #3
   d4718:	d814      	bhi.n	d4744 <_ZN8MAX3010510enableSlotEhh+0x32>
   d471a:	e8df f001 	tbb	[pc, r1]
   d471e:	0402      	.short	0x0402
   d4720:	0c0a      	.short	0x0c0a
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   d4722:	22f8      	movs	r2, #248	; 0xf8
   d4724:	e003      	b.n	d472e <_ZN8MAX3010510enableSlotEhh+0x1c>
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d4726:	011b      	lsls	r3, r3, #4
   d4728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d472c:	228f      	movs	r2, #143	; 0x8f
   d472e:	2111      	movs	r1, #17
   d4730:	e006      	b.n	d4740 <_ZN8MAX3010510enableSlotEhh+0x2e>
      break;
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   d4732:	22f8      	movs	r2, #248	; 0xf8
   d4734:	e003      	b.n	d473e <_ZN8MAX3010510enableSlotEhh+0x2c>
      break;
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   d4736:	011b      	lsls	r3, r3, #4
   d4738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d473c:	228f      	movs	r2, #143	; 0x8f
   d473e:	2112      	movs	r1, #18
   d4740:	f7ff bf9a 	b.w	d4678 <_ZN8MAX301057bitMaskEhhh>
   d4744:	4770      	bx	lr

000d4746 <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   d4746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d474a:	4616      	mov	r6, r2
   d474c:	ad08      	add	r5, sp, #32
   d474e:	4604      	mov	r4, r0
   d4750:	4688      	mov	r8, r1
   d4752:	461f      	mov	r7, r3
   d4754:	e895 0620 	ldmia.w	r5, {r5, r9, sl}
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   d4758:	f7ff ffa2 	bl	d46a0 <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   d475c:	2e01      	cmp	r6, #1
   d475e:	d101      	bne.n	d4764 <_ZN8MAX301055setupEhhhiii+0x1e>
   d4760:	2100      	movs	r1, #0
   d4762:	e012      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   d4764:	2e02      	cmp	r6, #2
   d4766:	d101      	bne.n	d476c <_ZN8MAX301055setupEhhhiii+0x26>
   d4768:	2120      	movs	r1, #32
   d476a:	e00e      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   d476c:	2e04      	cmp	r6, #4
   d476e:	d101      	bne.n	d4774 <_ZN8MAX301055setupEhhhiii+0x2e>
   d4770:	2140      	movs	r1, #64	; 0x40
   d4772:	e00a      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   d4774:	2e08      	cmp	r6, #8
   d4776:	d101      	bne.n	d477c <_ZN8MAX301055setupEhhhiii+0x36>
   d4778:	2160      	movs	r1, #96	; 0x60
   d477a:	e006      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   d477c:	2e10      	cmp	r6, #16
   d477e:	d101      	bne.n	d4784 <_ZN8MAX301055setupEhhhiii+0x3e>
   d4780:	2180      	movs	r1, #128	; 0x80
   d4782:	e002      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   d4784:	2e20      	cmp	r6, #32
   d4786:	d1f3      	bne.n	d4770 <_ZN8MAX301055setupEhhhiii+0x2a>
   d4788:	21a0      	movs	r1, #160	; 0xa0
   d478a:	4620      	mov	r0, r4
   d478c:	f7ff ffb7 	bl	d46fe <_ZN8MAX3010514setFIFOAverageEh>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   d4790:	4620      	mov	r0, r4
   d4792:	f7ff ffb9 	bl	d4708 <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   d4796:	2f03      	cmp	r7, #3
   d4798:	d101      	bne.n	d479e <_ZN8MAX301055setupEhhhiii+0x58>
   d479a:	2107      	movs	r1, #7
   d479c:	e003      	b.n	d47a6 <_ZN8MAX301055setupEhhhiii+0x60>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   d479e:	2f02      	cmp	r7, #2
   d47a0:	bf0c      	ite	eq
   d47a2:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   d47a4:	2102      	movne	r1, #2
   d47a6:	4620      	mov	r0, r4
   d47a8:	f7ff ff95 	bl	d46d6 <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d47ac:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   d47b0:	7167      	strb	r7, [r4, #5]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d47b2:	da01      	bge.n	d47b8 <_ZN8MAX301055setupEhhhiii+0x72>
   d47b4:	2100      	movs	r1, #0
   d47b6:	e00b      	b.n	d47d0 <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   d47b8:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   d47bc:	da01      	bge.n	d47c2 <_ZN8MAX301055setupEhhhiii+0x7c>
   d47be:	2120      	movs	r1, #32
   d47c0:	e006      	b.n	d47d0 <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   d47c2:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   d47c6:	da01      	bge.n	d47cc <_ZN8MAX301055setupEhhhiii+0x86>
   d47c8:	2140      	movs	r1, #64	; 0x40
   d47ca:	e001      	b.n	d47d0 <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   d47cc:	d1f2      	bne.n	d47b4 <_ZN8MAX301055setupEhhhiii+0x6e>
   d47ce:	2160      	movs	r1, #96	; 0x60
   d47d0:	4620      	mov	r0, r4
   d47d2:	f7ff ff85 	bl	d46e0 <_ZN8MAX3010511setADCRangeEh>
  else setADCRange(MAX30105_ADCRANGE_2048);

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   d47d6:	2d63      	cmp	r5, #99	; 0x63
   d47d8:	dc01      	bgt.n	d47de <_ZN8MAX301055setupEhhhiii+0x98>
   d47da:	2100      	movs	r1, #0
   d47dc:	e01e      	b.n	d481c <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   d47de:	2dc7      	cmp	r5, #199	; 0xc7
   d47e0:	dc01      	bgt.n	d47e6 <_ZN8MAX301055setupEhhhiii+0xa0>
   d47e2:	2104      	movs	r1, #4
   d47e4:	e01a      	b.n	d481c <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   d47e6:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   d47ea:	da01      	bge.n	d47f0 <_ZN8MAX301055setupEhhhiii+0xaa>
   d47ec:	2108      	movs	r1, #8
   d47ee:	e015      	b.n	d481c <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   d47f0:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
   d47f4:	da01      	bge.n	d47fa <_ZN8MAX301055setupEhhhiii+0xb4>
   d47f6:	210c      	movs	r1, #12
   d47f8:	e010      	b.n	d481c <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   d47fa:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   d47fe:	da01      	bge.n	d4804 <_ZN8MAX301055setupEhhhiii+0xbe>
   d4800:	2110      	movs	r1, #16
   d4802:	e00b      	b.n	d481c <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   d4804:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
   d4808:	da01      	bge.n	d480e <_ZN8MAX301055setupEhhhiii+0xc8>
   d480a:	2114      	movs	r1, #20
   d480c:	e006      	b.n	d481c <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   d480e:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
   d4812:	da01      	bge.n	d4818 <_ZN8MAX301055setupEhhhiii+0xd2>
   d4814:	2118      	movs	r1, #24
   d4816:	e001      	b.n	d481c <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   d4818:	d1df      	bne.n	d47da <_ZN8MAX301055setupEhhhiii+0x94>
   d481a:	211c      	movs	r1, #28
   d481c:	4620      	mov	r0, r4
   d481e:	f7ff ff64 	bl	d46ea <_ZN8MAX3010513setSampleRateEh>
  else setSampleRate(MAX30105_SAMPLERATE_50);

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   d4822:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   d4826:	dc01      	bgt.n	d482c <_ZN8MAX301055setupEhhhiii+0xe6>
   d4828:	2100      	movs	r1, #0
   d482a:	e00e      	b.n	d484a <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   d482c:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   d4830:	dc01      	bgt.n	d4836 <_ZN8MAX301055setupEhhhiii+0xf0>
   d4832:	2101      	movs	r1, #1
   d4834:	e009      	b.n	d484a <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   d4836:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   d483a:	dc01      	bgt.n	d4840 <_ZN8MAX301055setupEhhhiii+0xfa>
   d483c:	2102      	movs	r1, #2
   d483e:	e004      	b.n	d484a <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   d4840:	f240 139b 	movw	r3, #411	; 0x19b
   d4844:	4599      	cmp	r9, r3
   d4846:	d1ef      	bne.n	d4828 <_ZN8MAX301055setupEhhhiii+0xe2>
   d4848:	2103      	movs	r1, #3
   d484a:	4620      	mov	r0, r4
   d484c:	f7ff ff52 	bl	d46f4 <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
   d4850:	4641      	mov	r1, r8
   d4852:	4620      	mov	r0, r4
   d4854:	f7ff fee7 	bl	d4626 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   d4858:	4641      	mov	r1, r8
   d485a:	4620      	mov	r0, r4
   d485c:	f7ff fee8 	bl	d4630 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   d4860:	4641      	mov	r1, r8
   d4862:	4620      	mov	r0, r4
   d4864:	f7ff fee9 	bl	d463a <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   d4868:	4641      	mov	r1, r8
   d486a:	4620      	mov	r0, r4
   d486c:	f7ff feea 	bl	d4644 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
   d4870:	2201      	movs	r2, #1
   d4872:	4611      	mov	r1, r2
   d4874:	4620      	mov	r0, r4
   d4876:	f7ff ff4c 	bl	d4712 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   d487a:	2f01      	cmp	r7, #1
   d487c:	d90c      	bls.n	d4898 <_ZN8MAX301055setupEhhhiii+0x152>
  switch (slotNumber) {
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d487e:	2320      	movs	r3, #32
   d4880:	228f      	movs	r2, #143	; 0x8f
   d4882:	2111      	movs	r1, #17
   d4884:	4620      	mov	r0, r4
   d4886:	f7ff fef7 	bl	d4678 <_ZN8MAX301057bitMaskEhhh>

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   d488a:	2f02      	cmp	r7, #2
   d488c:	d004      	beq.n	d4898 <_ZN8MAX301055setupEhhhiii+0x152>
   d488e:	2203      	movs	r2, #3
   d4890:	4611      	mov	r1, r2
   d4892:	4620      	mov	r0, r4
   d4894:	f7ff ff3d 	bl	d4712 <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d4898:	4620      	mov	r0, r4
}
   d489a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d489e:	f7ff bed6 	b.w	d464e <_ZN8MAX301059clearFIFOEv>

000d48a2 <_GLOBAL__sub_I__ZN8MAX30105C2Ev>:
   d48a2:	f000 ba01 	b.w	d4ca8 <HAL_Pin_Map>

000d48a6 <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   d48a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   d48aa:	2400      	movs	r4, #0
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   d48ac:	4681      	mov	r9, r0
  int32_t i = 1, n_width;
  *n_npks = 0;
   d48ae:	600c      	str	r4, [r1, #0]
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
  int32_t i = 1, n_width;
   d48b0:	2501      	movs	r5, #1
  *n_npks = 0;
  
  while (i < n_size-1){
   d48b2:	f103 3cff 	add.w	ip, r3, #4294967295
   d48b6:	4565      	cmp	r5, ip
   d48b8:	da2d      	bge.n	d4916 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x70>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   d48ba:	9c07      	ldr	r4, [sp, #28]
   d48bc:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
   d48c0:	42a6      	cmp	r6, r4
   d48c2:	ea4f 0785 	mov.w	r7, r5, lsl #2
   d48c6:	f105 0401 	add.w	r4, r5, #1
   d48ca:	dd22      	ble.n	d4912 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x6c>
   d48cc:	4417      	add	r7, r2
   d48ce:	f857 7c04 	ldr.w	r7, [r7, #-4]
   d48d2:	42be      	cmp	r6, r7
   d48d4:	dd1d      	ble.n	d4912 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x6c>
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   d48d6:	429c      	cmp	r4, r3
   d48d8:	ebc5 0e04 	rsb	lr, r5, r4
   d48dc:	4627      	mov	r7, r4
   d48de:	d007      	beq.n	d48f0 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x4a>
   d48e0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   d48e4:	4286      	cmp	r6, r0
   d48e6:	f104 0801 	add.w	r8, r4, #1
   d48ea:	d101      	bne.n	d48f0 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x4a>
   d48ec:	4644      	mov	r4, r8
   d48ee:	e7f2      	b.n	d48d6 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   d48f0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   d48f4:	42a6      	cmp	r6, r4
   d48f6:	dc01      	bgt.n	d48fc <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x56>
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   d48f8:	463d      	mov	r5, r7
   d48fa:	e7dc      	b.n	d48b6 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x10>
  while (i < n_size-1){
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   d48fc:	680c      	ldr	r4, [r1, #0]
   d48fe:	2c0e      	cmp	r4, #14
   d4900:	dcfa      	bgt.n	d48f8 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x52>
        pn_locs[(*n_npks)++] = i;    
   d4902:	1c66      	adds	r6, r4, #1
   d4904:	600e      	str	r6, [r1, #0]
   d4906:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   d490a:	f10e 0401 	add.w	r4, lr, #1
   d490e:	1967      	adds	r7, r4, r5
   d4910:	e7f2      	b.n	d48f8 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x52>
      }
      else
        i += n_width;
    }
    else
      i++;
   d4912:	4627      	mov	r7, r4
   d4914:	e7f0      	b.n	d48f8 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x52>
   d4916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d491a <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   d491a:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d491c:	2301      	movs	r3, #1
   d491e:	4604      	mov	r4, r0
   d4920:	428b      	cmp	r3, r1
   d4922:	da11      	bge.n	d4948 <_Z17maxim_sort_ascendPll+0x2e>
    n_temp = pn_x[i];
   d4924:	f854 6f04 	ldr.w	r6, [r4, #4]!
   d4928:	461a      	mov	r2, r3
   d492a:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   d492c:	2a00      	cmp	r2, #0
   d492e:	dd07      	ble.n	d4940 <_Z17maxim_sort_ascendPll+0x26>
   d4930:	f855 7c04 	ldr.w	r7, [r5, #-4]
   d4934:	42be      	cmp	r6, r7
   d4936:	da03      	bge.n	d4940 <_Z17maxim_sort_ascendPll+0x26>
        pn_x[j] = pn_x[j-1];
   d4938:	f845 7904 	str.w	r7, [r5], #-4
*/
{
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
    n_temp = pn_x[i];
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   d493c:	3a01      	subs	r2, #1
   d493e:	e7f5      	b.n	d492c <_Z17maxim_sort_ascendPll+0x12>
        pn_x[j] = pn_x[j-1];
    pn_x[j] = n_temp;
   d4940:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
*
* \retval       None
*/
{
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4944:	3301      	adds	r3, #1
   d4946:	e7eb      	b.n	d4920 <_Z17maxim_sort_ascendPll+0x6>
   d4948:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d494a <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   d494a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d494e:	2301      	movs	r3, #1
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   d4950:	4696      	mov	lr, r2
   d4952:	460d      	mov	r5, r1
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4954:	4573      	cmp	r3, lr
   d4956:	da18      	bge.n	d498a <_Z26maxim_sort_indices_descendPlS_l+0x40>
    n_temp = pn_indx[i];
   d4958:	f855 7f04 	ldr.w	r7, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   d495c:	461c      	mov	r4, r3
   d495e:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
   d4962:	462e      	mov	r6, r5
   d4964:	2c00      	cmp	r4, #0
   d4966:	dd0c      	ble.n	d4982 <_Z26maxim_sort_indices_descendPlS_l+0x38>
   d4968:	f8dc 2000 	ldr.w	r2, [ip]
   d496c:	f856 9c04 	ldr.w	r9, [r6, #-4]
   d4970:	4690      	mov	r8, r2
   d4972:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
   d4976:	4590      	cmp	r8, r2
   d4978:	dd03      	ble.n	d4982 <_Z26maxim_sort_indices_descendPlS_l+0x38>
      pn_indx[j] = pn_indx[j-1];
   d497a:	f846 9904 	str.w	r9, [r6], #-4
*/ 
{
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
    n_temp = pn_indx[i];
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   d497e:	3c01      	subs	r4, #1
   d4980:	e7f0      	b.n	d4964 <_Z26maxim_sort_indices_descendPlS_l+0x1a>
      pn_indx[j] = pn_indx[j-1];
    pn_indx[j] = n_temp;
   d4982:	f841 7024 	str.w	r7, [r1, r4, lsl #2]
*
* \retval       None
*/ 
{
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4986:	3301      	adds	r3, #1
   d4988:	e7e4      	b.n	d4954 <_Z26maxim_sort_indices_descendPlS_l+0xa>
   d498a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d498e <_Z24maxim_remove_close_peaksPlS_S_l>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
   d498e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4990:	4604      	mov	r4, r0
   d4992:	461f      	mov	r7, r3
   d4994:	4610      	mov	r0, r2
   d4996:	460d      	mov	r5, r1
    
  int32_t i, j, n_old_npks, n_dist;
    
  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   d4998:	680a      	ldr	r2, [r1, #0]
   d499a:	4621      	mov	r1, r4
   d499c:	f7ff ffd5 	bl	d494a <_Z26maxim_sort_indices_descendPlS_l>
   d49a0:	1f26      	subs	r6, r4, #4

  for ( i = -1; i < *pn_npks; i++ ){
   d49a2:	f04f 32ff 	mov.w	r2, #4294967295
    n_old_npks = *pn_npks;
    *pn_npks = i+1;
    for ( j = i+1; j < n_old_npks; j++ ){
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   d49a6:	f1c7 0c00 	rsb	ip, r7, #0
  int32_t i, j, n_old_npks, n_dist;
    
  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );

  for ( i = -1; i < *pn_npks; i++ ){
   d49aa:	6829      	ldr	r1, [r5, #0]
   d49ac:	428a      	cmp	r2, r1
   d49ae:	da22      	bge.n	d49f6 <_Z24maxim_remove_close_peaksPlS_S_l+0x68>
   d49b0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    n_old_npks = *pn_npks;
    *pn_npks = i+1;
   d49b4:	3201      	adds	r2, #1
   d49b6:	3901      	subs	r1, #1
   d49b8:	602a      	str	r2, [r5, #0]
   d49ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   d49be:	4630      	mov	r0, r6
    for ( j = i+1; j < n_old_npks; j++ ){
   d49c0:	4288      	cmp	r0, r1
   d49c2:	d101      	bne.n	d49c8 <_Z24maxim_remove_close_peaksPlS_S_l+0x3a>
   d49c4:	3604      	adds	r6, #4
   d49c6:	e7f0      	b.n	d49aa <_Z24maxim_remove_close_peaksPlS_S_l+0x1c>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   d49c8:	f850 3f04 	ldr.w	r3, [r0, #4]!
   d49cc:	b112      	cbz	r2, d49d4 <_Z24maxim_remove_close_peaksPlS_S_l+0x46>
   d49ce:	f8d6 e000 	ldr.w	lr, [r6]
   d49d2:	e001      	b.n	d49d8 <_Z24maxim_remove_close_peaksPlS_S_l+0x4a>
   d49d4:	f04f 3eff 	mov.w	lr, #4294967295
   d49d8:	ebce 0303 	rsb	r3, lr, r3
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   d49dc:	42bb      	cmp	r3, r7
   d49de:	dc01      	bgt.n	d49e4 <_Z24maxim_remove_close_peaksPlS_S_l+0x56>
   d49e0:	4563      	cmp	r3, ip
   d49e2:	daed      	bge.n	d49c0 <_Z24maxim_remove_close_peaksPlS_S_l+0x32>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   d49e4:	f8d5 e000 	ldr.w	lr, [r5]
   d49e8:	f10e 0301 	add.w	r3, lr, #1
   d49ec:	602b      	str	r3, [r5, #0]
   d49ee:	6803      	ldr	r3, [r0, #0]
   d49f0:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );

  for ( i = -1; i < *pn_npks; i++ ){
    n_old_npks = *pn_npks;
    *pn_npks = i+1;
    for ( j = i+1; j < n_old_npks; j++ ){
   d49f4:	e7e4      	b.n	d49c0 <_Z24maxim_remove_close_peaksPlS_S_l+0x32>
        pn_locs[(*pn_npks)++] = pn_locs[j];
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
   d49f6:	4620      	mov	r0, r4
}
   d49f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        pn_locs[(*pn_npks)++] = pn_locs[j];
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
   d49fc:	f7ff bf8d 	b.w	d491a <_Z17maxim_sort_ascendPll>

000d4a00 <_Z16maxim_find_peaksPlS_S_llll>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
   d4a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   d4a02:	9f08      	ldr	r7, [sp, #32]
   d4a04:	9700      	str	r7, [sp, #0]
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
   d4a06:	4605      	mov	r5, r0
   d4a08:	460c      	mov	r4, r1
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   d4a0a:	f7ff ff4c 	bl	d48a6 <_Z28maxim_peaks_above_min_heightPlS_S_ll>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   d4a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4a10:	4628      	mov	r0, r5
   d4a12:	f7ff ffbc 	bl	d498e <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   d4a16:	6822      	ldr	r2, [r4, #0]
   d4a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4a1a:	429a      	cmp	r2, r3
   d4a1c:	bfd4      	ite	le
   d4a1e:	6022      	strle	r2, [r4, #0]
   d4a20:	6023      	strgt	r3, [r4, #0]
}
   d4a22:	b003      	add	sp, #12
   d4a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4a28 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
   d4a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a2c:	b09f      	sub	sp, #124	; 0x7c
   d4a2e:	4693      	mov	fp, r2
   d4a30:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
   d4a34:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
   d4a38:	9305      	str	r3, [sp, #20]
  int32_t an_ratio[5], n_ratio_average; 
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0; 
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   d4a3a:	2200      	movs	r2, #0
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
   d4a3c:	4680      	mov	r8, r0
   d4a3e:	460e      	mov	r6, r1
  int32_t n_x_dc_max_idx = 0; 
  int32_t an_ratio[5], n_ratio_average; 
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0; 
   d4a40:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   d4a42:	42b2      	cmp	r2, r6
   d4a44:	da04      	bge.n	d4a50 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x28>
   d4a46:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   d4a4a:	3201      	adds	r2, #1
   d4a4c:	440b      	add	r3, r1
   d4a4e:	e7f8      	b.n	d4a42 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1a>
   d4a50:	4888      	ldr	r0, [pc, #544]	; (d4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>)
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   d4a52:	fbb3 f2f6 	udiv	r2, r3, r6
    
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   d4a56:	2300      	movs	r3, #0
   d4a58:	42b3      	cmp	r3, r6
   d4a5a:	4f86      	ldr	r7, [pc, #536]	; (d4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>)
   d4a5c:	da06      	bge.n	d4a6c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x44>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   d4a5e:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
   d4a62:	1a51      	subs	r1, r2, r1
   d4a64:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  un_ir_mean =0; 
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
    
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   d4a68:	3301      	adds	r3, #1
   d4a6a:	e7f5      	b.n	d4a58 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x30>
   d4a6c:	463b      	mov	r3, r7
   d4a6e:	2100      	movs	r1, #0
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   d4a70:	2404      	movs	r4, #4
   d4a72:	e893 0005 	ldmia.w	r3, {r0, r2}
   d4a76:	689d      	ldr	r5, [r3, #8]
   d4a78:	4402      	add	r2, r0
   d4a7a:	4415      	add	r5, r2
   d4a7c:	3101      	adds	r1, #1
   d4a7e:	68da      	ldr	r2, [r3, #12]
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4a80:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   d4a82:	442a      	add	r2, r5
   d4a84:	fb92 f2f4 	sdiv	r2, r2, r4
   d4a88:	f843 2b04 	str.w	r2, [r3], #4
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4a8c:	d1f1      	bne.n	d4a72 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x4a>
   d4a8e:	2300      	movs	r3, #0
   d4a90:	461a      	mov	r2, r3
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
  }
  // calculate threshold  
  n_th1=0; 
  for ( k=0 ; k<BUFFER_SIZE ;k++){
    n_th1 +=  an_x[k];
   d4a92:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
  }
  // calculate threshold  
  n_th1=0; 
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4a96:	3201      	adds	r2, #1
   d4a98:	2a64      	cmp	r2, #100	; 0x64
    n_th1 +=  an_x[k];
   d4a9a:	440b      	add	r3, r1
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
  }
  // calculate threshold  
  n_th1=0; 
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4a9c:	d1f9      	bne.n	d4a92 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x6a>
    n_th1 +=  an_x[k];
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
   d4a9e:	fb93 f3f2 	sdiv	r3, r3, r2
  if( n_th1<30) n_th1=30; // min allowed
   d4aa2:	2b1d      	cmp	r3, #29
   d4aa4:	dd03      	ble.n	d4aae <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x86>
  if( n_th1>60) n_th1=60; // max allowed
   d4aa6:	2b3c      	cmp	r3, #60	; 0x3c
   d4aa8:	bfa8      	it	ge
   d4aaa:	233c      	movge	r3, #60	; 0x3c
   d4aac:	e000      	b.n	d4ab0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x88>
  n_th1=0; 
  for ( k=0 ; k<BUFFER_SIZE ;k++){
    n_th1 +=  an_x[k];
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
  if( n_th1<30) n_th1=30; // min allowed
   d4aae:	231e      	movs	r3, #30
  if( n_th1>60) n_th1=60; // max allowed

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   d4ab0:	2200      	movs	r2, #0
   d4ab2:	4611      	mov	r1, r2
   d4ab4:	ad0f      	add	r5, sp, #60	; 0x3c
   d4ab6:	2400      	movs	r4, #0
   d4ab8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
   d4abc:	3201      	adds	r2, #1
   d4abe:	2a0f      	cmp	r2, #15
   d4ac0:	d1f8      	bne.n	d4ab4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x8c>
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   d4ac2:	9202      	str	r2, [sp, #8]
   d4ac4:	2204      	movs	r2, #4
   d4ac6:	9201      	str	r2, [sp, #4]
   d4ac8:	9300      	str	r3, [sp, #0]
   d4aca:	4a6a      	ldr	r2, [pc, #424]	; (d4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>)
   d4acc:	2364      	movs	r3, #100	; 0x64
   d4ace:	a909      	add	r1, sp, #36	; 0x24
   d4ad0:	4628      	mov	r0, r5
   d4ad2:	f7ff ff95 	bl	d4a00 <_Z16maxim_find_peaksPlS_S_llll>
  n_peak_interval_sum =0;
  if (n_npks>=2){
   d4ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4ad8:	2b01      	cmp	r3, #1
   d4ada:	dd16      	ble.n	d4b0a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xe2>
   d4adc:	2201      	movs	r2, #1
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   d4ade:	f855 0f04 	ldr.w	r0, [r5, #4]!
   d4ae2:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d4ae6:	3201      	adds	r2, #1
   d4ae8:	1a41      	subs	r1, r0, r1
   d4aea:	4293      	cmp	r3, r2
   d4aec:	440c      	add	r4, r1
   d4aee:	d1f6      	bne.n	d4ade <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xb6>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   d4af0:	1e5a      	subs	r2, r3, #1
   d4af2:	fb94 f4f2 	sdiv	r4, r4, r2
   d4af6:	f240 52dc 	movw	r2, #1500	; 0x5dc
   d4afa:	fb92 f4f4 	sdiv	r4, r2, r4
    *pch_hr_valid  = 1;
   d4afe:	2201      	movs	r2, #1
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
  n_peak_interval_sum =0;
  if (n_npks>=2){
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   d4b00:	f8ca 4000 	str.w	r4, [sl]
    *pch_hr_valid  = 1;
   d4b04:	f889 2000 	strb.w	r2, [r9]
   d4b08:	e004      	b.n	d4b14 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xec>
  }
  else  { 
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   d4b0a:	4a5b      	ldr	r2, [pc, #364]	; (d4c78 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x250>)
   d4b0c:	f8ca 2000 	str.w	r2, [sl]
    *pch_hr_valid  = 0;
   d4b10:	f889 4000 	strb.w	r4, [r9]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
      an_x[k] =  pun_ir_buffer[k] ; 
      an_y[k] =  pun_red_buffer[k] ; 
   d4b14:	4959      	ldr	r1, [pc, #356]	; (d4c7c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
  n_peak_interval_sum =0;
  if (n_npks>=2){
   d4b16:	2200      	movs	r2, #0
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
    *pch_hr_valid  = 0;
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   d4b18:	42b2      	cmp	r2, r6
   d4b1a:	da09      	bge.n	d4b30 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x108>
      an_x[k] =  pun_ir_buffer[k] ; 
   d4b1c:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
   d4b20:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
      an_y[k] =  pun_red_buffer[k] ; 
   d4b24:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
   d4b28:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
    *pch_hr_valid  = 0;
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   d4b2c:	3201      	adds	r2, #1
   d4b2e:	e7f3      	b.n	d4b18 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf0>
  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
  n_i_ratio_count = 0; 
  for(k=0; k< 5; k++) an_ratio[k]=0;
   d4b30:	2200      	movs	r2, #0
   d4b32:	920a      	str	r2, [sp, #40]	; 0x28
   d4b34:	920b      	str	r2, [sp, #44]	; 0x2c
   d4b36:	920c      	str	r2, [sp, #48]	; 0x30
   d4b38:	920d      	str	r2, [sp, #52]	; 0x34
   d4b3a:	920e      	str	r2, [sp, #56]	; 0x38
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4b3c:	429a      	cmp	r2, r3
   d4b3e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   d4b42:	db0a      	blt.n	d4b5a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x132>
   d4b44:	2500      	movs	r5, #0
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4b46:	3b01      	subs	r3, #1
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
  n_i_ratio_count = 0; 
  for(k=0; k< 5; k++) an_ratio[k]=0;
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4b48:	462e      	mov	r6, r5
   d4b4a:	462c      	mov	r4, r5
   d4b4c:	9504      	str	r5, [sp, #16]
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4b4e:	9306      	str	r3, [sp, #24]
    n_y_dc_max= -16777216 ; 
    n_x_dc_max= -16777216; 
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4b50:	f8df e128 	ldr.w	lr, [pc, #296]	; d4c7c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>
   d4b54:	f8df 811c 	ldr.w	r8, [pc, #284]	; d4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>
   d4b58:	e018      	b.n	d4b8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>

  n_ratio_average =0; 
  n_i_ratio_count = 0; 
  for(k=0; k< 5; k++) an_ratio[k]=0;
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   d4b5a:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
   d4b5e:	2964      	cmp	r1, #100	; 0x64
   d4b60:	dc7e      	bgt.n	d4c60 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x238>
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
  n_i_ratio_count = 0; 
  for(k=0; k< 5; k++) an_ratio[k]=0;
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4b62:	3201      	adds	r2, #1
   d4b64:	e7ea      	b.n	d4b3c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x114>
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   d4b66:	f858 7022 	ldr.w	r7, [r8, r2, lsl #2]
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   d4b6a:	f858 002c 	ldr.w	r0, [r8, ip, lsl #2]
   d4b6e:	ebc7 0a00 	rsb	sl, r7, r0
   d4b72:	1aa8      	subs	r0, r5, r2
   d4b74:	fb00 f00a 	mul.w	r0, r0, sl
   d4b78:	fb90 f0f9 	sdiv	r0, r0, r9
   d4b7c:	4438      	add	r0, r7
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   d4b7e:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
   d4b82:	1a3f      	subs	r7, r7, r0
   d4b84:	4379      	muls	r1, r7
   d4b86:	11c9      	asrs	r1, r1, #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4b88:	2900      	cmp	r1, #0
   d4b8a:	dc2a      	bgt.n	d4be2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1ba>
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4b8c:	9b04      	ldr	r3, [sp, #16]
   d4b8e:	9a06      	ldr	r2, [sp, #24]
   d4b90:	4293      	cmp	r3, r2
   d4b92:	da43      	bge.n	d4c1c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1f4>
    n_y_dc_max= -16777216 ; 
    n_x_dc_max= -16777216; 
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   d4b94:	f85b cf04 	ldr.w	ip, [fp, #4]!
   d4b98:	f85b 2c04 	ldr.w	r2, [fp, #-4]
   d4b9c:	ebc2 090c 	rsb	r9, r2, ip
   d4ba0:	3301      	adds	r3, #1
   d4ba2:	f1b9 0f03 	cmp.w	r9, #3
   d4ba6:	9304      	str	r3, [sp, #16]
   d4ba8:	ddf0      	ble.n	d4b8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>
   d4baa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   d4bae:	4610      	mov	r0, r2
   d4bb0:	4619      	mov	r1, r3
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4bb2:	4560      	cmp	r0, ip
   d4bb4:	dad7      	bge.n	d4b66 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13e>
   d4bb6:	0087      	lsls	r7, r0, #2
   d4bb8:	9707      	str	r7, [sp, #28]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   d4bba:	4f2e      	ldr	r7, [pc, #184]	; (d4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>)
   d4bbc:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
   d4bc0:	4553      	cmp	r3, sl
   d4bc2:	bfa8      	it	ge
   d4bc4:	469a      	movge	sl, r3
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4bc6:	ea4f 0380 	mov.w	r3, r0, lsl #2
   d4bca:	bfb8      	it	lt
   d4bcc:	4605      	movlt	r5, r0
   d4bce:	f853 700e 	ldr.w	r7, [r3, lr]
   d4bd2:	42b9      	cmp	r1, r7
   d4bd4:	bfac      	ite	ge
   d4bd6:	460f      	movge	r7, r1
   d4bd8:	4606      	movlt	r6, r0
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
    n_y_dc_max= -16777216 ; 
    n_x_dc_max= -16777216; 
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4bda:	4653      	mov	r3, sl
   d4bdc:	3001      	adds	r0, #1
   d4bde:	4639      	mov	r1, r7
   d4be0:	e7e7      	b.n	d4bb2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x18a>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4be2:	2c04      	cmp	r4, #4
   d4be4:	dcd2      	bgt.n	d4b8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   d4be6:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   d4bea:	f85e 002c 	ldr.w	r0, [lr, ip, lsl #2]
   d4bee:	1ab2      	subs	r2, r6, r2
   d4bf0:	1bc0      	subs	r0, r0, r7
   d4bf2:	4342      	muls	r2, r0
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   d4bf4:	f85e 0026 	ldr.w	r0, [lr, r6, lsl #2]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   d4bf8:	fb92 f2f9 	sdiv	r2, r2, r9
   d4bfc:	4417      	add	r7, r2
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   d4bfe:	1bc7      	subs	r7, r0, r7
   d4c00:	437b      	muls	r3, r7
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4c02:	11db      	asrs	r3, r3, #7
   d4c04:	d0c2      	beq.n	d4b8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>
      {   
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   d4c06:	aa1e      	add	r2, sp, #120	; 0x78
   d4c08:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
   d4c0c:	2264      	movs	r2, #100	; 0x64
   d4c0e:	4353      	muls	r3, r2
        n_i_ratio_count++;
   d4c10:	3401      	adds	r4, #1
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
      {   
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   d4c12:	fb93 f1f1 	sdiv	r1, r3, r1
   d4c16:	f84c 1c50 	str.w	r1, [ip, #-80]
   d4c1a:	e7b7      	b.n	d4b8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>
        n_i_ratio_count++;
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   d4c1c:	4621      	mov	r1, r4
   d4c1e:	a80a      	add	r0, sp, #40	; 0x28
  n_middle_idx= n_i_ratio_count/2;
   d4c20:	1064      	asrs	r4, r4, #1
        n_i_ratio_count++;
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   d4c22:	f7ff fe7a 	bl	d491a <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;

  if (n_middle_idx >1)
   d4c26:	2c01      	cmp	r4, #1
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   d4c28:	aa1e      	add	r2, sp, #120	; 0x78
   d4c2a:	ea4f 0384 	mov.w	r3, r4, lsl #2
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
  n_middle_idx= n_i_ratio_count/2;

  if (n_middle_idx >1)
   d4c2e:	dd0b      	ble.n	d4c48 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x220>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   d4c30:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   d4c34:	441a      	add	r2, r3
   d4c36:	f854 1c54 	ldr.w	r1, [r4, #-84]
   d4c3a:	f852 3c50 	ldr.w	r3, [r2, #-80]
   d4c3e:	2202      	movs	r2, #2
   d4c40:	440b      	add	r3, r1
   d4c42:	fb93 f3f2 	sdiv	r3, r3, r2
   d4c46:	e002      	b.n	d4c4e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x226>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
   d4c48:	4413      	add	r3, r2
   d4c4a:	f853 3c50 	ldr.w	r3, [r3, #-80]

  if( n_ratio_average>2 && n_ratio_average <184){
   d4c4e:	1eda      	subs	r2, r3, #3
   d4c50:	2ab4      	cmp	r2, #180	; 0xb4
   d4c52:	d805      	bhi.n	d4c60 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x238>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   d4c54:	4a0a      	ldr	r2, [pc, #40]	; (d4c80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x258>)
    *pn_spo2 = n_spo2_calc ;
   d4c56:	5cd3      	ldrb	r3, [r2, r3]
   d4c58:	9a05      	ldr	r2, [sp, #20]
   d4c5a:	6013      	str	r3, [r2, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   d4c5c:	2301      	movs	r3, #1
   d4c5e:	e003      	b.n	d4c68 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x240>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   d4c60:	9a05      	ldr	r2, [sp, #20]
   d4c62:	4b05      	ldr	r3, [pc, #20]	; (d4c78 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x250>)
   d4c64:	6013      	str	r3, [r2, #0]
    *pch_spo2_valid  = 0; 
   d4c66:	2300      	movs	r3, #0
   d4c68:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   d4c6a:	7013      	strb	r3, [r2, #0]
  }
}
   d4c6c:	b01f      	add	sp, #124	; 0x7c
   d4c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c72:	bf00      	nop
   d4c74:	2003e0b0 	.word	0x2003e0b0
   d4c78:	fffffc19 	.word	0xfffffc19
   d4c7c:	2003e240 	.word	0x2003e240
   d4c80:	000d6064 	.word	0x000d6064

000d4c84 <_GLOBAL__sub_I__Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
   d4c84:	f000 b810 	b.w	d4ca8 <HAL_Pin_Map>

000d4c88 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <netdb_freeaddrinfo+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	689b      	ldr	r3, [r3, #8]
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030268 	.word	0x00030268

000d4c98 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <netdb_getaddrinfo+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	68db      	ldr	r3, [r3, #12]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030268 	.word	0x00030268

000d4ca8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <HAL_Pin_Map+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	681b      	ldr	r3, [r3, #0]
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	0003022c 	.word	0x0003022c

000d4cb8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <HAL_Pin_Mode+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	689b      	ldr	r3, [r3, #8]
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	0003022c 	.word	0x0003022c

000d4cc8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <HAL_Get_Pin_Mode+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	68db      	ldr	r3, [r3, #12]
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	0003022c 	.word	0x0003022c

000d4cd8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <HAL_GPIO_Write+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	691b      	ldr	r3, [r3, #16]
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	0003022c 	.word	0x0003022c

000d4ce8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <HAL_GPIO_Read+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	695b      	ldr	r3, [r3, #20]
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	0003022c 	.word	0x0003022c

000d4cf8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <HAL_SPI_Init+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	69db      	ldr	r3, [r3, #28]
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	00030230 	.word	0x00030230

000d4d08 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <HAL_SPI_Is_Enabled+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	6a1b      	ldr	r3, [r3, #32]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	00030230 	.word	0x00030230

000d4d18 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <HAL_RNG_GetRandomNumber+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	685b      	ldr	r3, [r3, #4]
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	00030218 	.word	0x00030218

000d4d28 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	695b      	ldr	r3, [r3, #20]
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030218 	.word	0x00030218

000d4d38 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <os_thread_is_current+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	689b      	ldr	r3, [r3, #8]
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030248 	.word	0x00030248

000d4d48 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <os_thread_join+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	691b      	ldr	r3, [r3, #16]
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030248 	.word	0x00030248

000d4d58 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <os_thread_cleanup+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	695b      	ldr	r3, [r3, #20]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	00030248 	.word	0x00030248

000d4d68 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <os_mutex_recursive_create+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	00030248 	.word	0x00030248

000d4d78 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <os_mutex_recursive_destroy+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	00030248 	.word	0x00030248

000d4d88 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <inet_inet_ntop+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	695b      	ldr	r3, [r3, #20]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	00030264 	.word	0x00030264

000d4d98 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <HAL_USART_Init+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	681b      	ldr	r3, [r3, #0]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	0003023c 	.word	0x0003023c

000d4da8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <HAL_USART_Write_Data+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	68db      	ldr	r3, [r3, #12]
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	0003023c 	.word	0x0003023c

000d4db8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <HAL_USART_Available_Data+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	691b      	ldr	r3, [r3, #16]
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	0003023c 	.word	0x0003023c

000d4dc8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <HAL_USART_Read_Data+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	695b      	ldr	r3, [r3, #20]
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	0003023c 	.word	0x0003023c

000d4dd8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <HAL_USART_Peek_Data+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	699b      	ldr	r3, [r3, #24]
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	0003023c 	.word	0x0003023c

000d4de8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <HAL_USART_Flush_Data+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	69db      	ldr	r3, [r3, #28]
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	0003023c 	.word	0x0003023c

000d4df8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <HAL_USART_Is_Enabled+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	6a1b      	ldr	r3, [r3, #32]
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	0003023c 	.word	0x0003023c

000d4e08 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <HAL_USART_Available_Data_For_Write+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	0003023c 	.word	0x0003023c

000d4e18 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <HAL_I2C_Set_Speed+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	681b      	ldr	r3, [r3, #0]
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	00030228 	.word	0x00030228

000d4e28 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <HAL_I2C_Begin+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	68db      	ldr	r3, [r3, #12]
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	00030228 	.word	0x00030228

000d4e38 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <HAL_I2C_Begin_Transmission+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	699b      	ldr	r3, [r3, #24]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	00030228 	.word	0x00030228

000d4e48 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <HAL_I2C_End_Transmission+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	69db      	ldr	r3, [r3, #28]
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	00030228 	.word	0x00030228

000d4e58 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <HAL_I2C_Write_Data+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	6a1b      	ldr	r3, [r3, #32]
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	00030228 	.word	0x00030228

000d4e68 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <HAL_I2C_Available_Data+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	00030228 	.word	0x00030228

000d4e78 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <HAL_I2C_Read_Data+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	00030228 	.word	0x00030228

000d4e88 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <HAL_I2C_Peek_Data+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	00030228 	.word	0x00030228

000d4e98 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <HAL_I2C_Flush_Data+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	00030228 	.word	0x00030228

000d4ea8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <HAL_I2C_Is_Enabled+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	00030228 	.word	0x00030228

000d4eb8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <HAL_I2C_Init+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	00030228 	.word	0x00030228

000d4ec8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <HAL_I2C_Request_Data_Ex+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	00030228 	.word	0x00030228

000d4ed8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <HAL_USB_USART_Init+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	681b      	ldr	r3, [r3, #0]
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	0003024c 	.word	0x0003024c

000d4ee8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <HAL_USB_USART_Begin+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	685b      	ldr	r3, [r3, #4]
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	0003024c 	.word	0x0003024c

000d4ef8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <HAL_USB_USART_Available_Data+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	691b      	ldr	r3, [r3, #16]
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	0003024c 	.word	0x0003024c

000d4f08 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	695b      	ldr	r3, [r3, #20]
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	0003024c 	.word	0x0003024c

000d4f18 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <HAL_USB_USART_Receive_Data+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	699b      	ldr	r3, [r3, #24]
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	0003024c 	.word	0x0003024c

000d4f28 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <HAL_USB_USART_Send_Data+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	69db      	ldr	r3, [r3, #28]
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	0003024c 	.word	0x0003024c

000d4f38 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <HAL_USB_USART_Flush_Data+0xc>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	6a1b      	ldr	r3, [r3, #32]
   d4f40:	9301      	str	r3, [sp, #4]
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	0003024c 	.word	0x0003024c

000d4f48 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <set_system_mode+0xc>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	685b      	ldr	r3, [r3, #4]
   d4f50:	9301      	str	r3, [sp, #4]
   d4f52:	bd08      	pop	{r3, pc}
   d4f54:	00030220 	.word	0x00030220

000d4f58 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f58:	b508      	push	{r3, lr}
   d4f5a:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <system_delay_ms+0xc>)
   d4f5c:	681b      	ldr	r3, [r3, #0]
   d4f5e:	695b      	ldr	r3, [r3, #20]
   d4f60:	9301      	str	r3, [sp, #4]
   d4f62:	bd08      	pop	{r3, pc}
   d4f64:	00030220 	.word	0x00030220

000d4f68 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b03      	ldr	r3, [pc, #12]	; (d4f78 <system_ctrl_set_app_request_handler+0x10>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f72:	9301      	str	r3, [sp, #4]
   d4f74:	bd08      	pop	{r3, pc}
   d4f76:	0000      	.short	0x0000
   d4f78:	00030220 	.word	0x00030220

000d4f7c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b03      	ldr	r3, [pc, #12]	; (d4f8c <system_ctrl_set_result+0x10>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f86:	9301      	str	r3, [sp, #4]
   d4f88:	bd08      	pop	{r3, pc}
   d4f8a:	0000      	.short	0x0000
   d4f8c:	00030220 	.word	0x00030220

000d4f90 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <network_connect+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	685b      	ldr	r3, [r3, #4]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	00030240 	.word	0x00030240

000d4fa0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <network_connecting+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	689b      	ldr	r3, [r3, #8]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	00030240 	.word	0x00030240

000d4fb0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <network_disconnect+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	68db      	ldr	r3, [r3, #12]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	00030240 	.word	0x00030240

000d4fc0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <network_ready+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	691b      	ldr	r3, [r3, #16]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	00030240 	.word	0x00030240

000d4fd0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <network_on+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	695b      	ldr	r3, [r3, #20]
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	00030240 	.word	0x00030240

000d4fe0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <network_off+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	699b      	ldr	r3, [r3, #24]
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030240 	.word	0x00030240

000d4ff0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <network_listen+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	69db      	ldr	r3, [r3, #28]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030240 	.word	0x00030240

000d5000 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <network_listening+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	6a1b      	ldr	r3, [r3, #32]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030240 	.word	0x00030240

000d5010 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <network_set_listen_timeout+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030240 	.word	0x00030240

000d5020 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <network_get_listen_timeout+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	00030240 	.word	0x00030240

000d5030 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	00030244 	.word	0x00030244

000d5040 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <malloc+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	681b      	ldr	r3, [r3, #0]
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	0003021c 	.word	0x0003021c

000d5050 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <free+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	685b      	ldr	r3, [r3, #4]
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	0003021c 	.word	0x0003021c

000d5060 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5060:	2200      	movs	r2, #0
   d5062:	4611      	mov	r1, r2
   d5064:	6840      	ldr	r0, [r0, #4]
   d5066:	f7ff bfcb 	b.w	d5000 <network_listening>

000d506a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d506a:	2200      	movs	r2, #0
   d506c:	4611      	mov	r1, r2
   d506e:	6840      	ldr	r0, [r0, #4]
   d5070:	f7ff bfd6 	b.w	d5020 <network_get_listen_timeout>

000d5074 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5074:	2200      	movs	r2, #0
   d5076:	6840      	ldr	r0, [r0, #4]
   d5078:	f7ff bfca 	b.w	d5010 <network_set_listen_timeout>

000d507c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d507c:	2200      	movs	r2, #0
   d507e:	f081 0101 	eor.w	r1, r1, #1
   d5082:	6840      	ldr	r0, [r0, #4]
   d5084:	f7ff bfb4 	b.w	d4ff0 <network_listen>

000d5088 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5088:	2300      	movs	r3, #0
   d508a:	461a      	mov	r2, r3
   d508c:	4619      	mov	r1, r3
   d508e:	6840      	ldr	r0, [r0, #4]
   d5090:	f7ff bfa6 	b.w	d4fe0 <network_off>

000d5094 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5094:	2300      	movs	r3, #0
   d5096:	461a      	mov	r2, r3
   d5098:	4619      	mov	r1, r3
   d509a:	6840      	ldr	r0, [r0, #4]
   d509c:	f7ff bf98 	b.w	d4fd0 <network_on>

000d50a0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d50a0:	2200      	movs	r2, #0
   d50a2:	4611      	mov	r1, r2
   d50a4:	6840      	ldr	r0, [r0, #4]
   d50a6:	f7ff bf8b 	b.w	d4fc0 <network_ready>

000d50aa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50aa:	2200      	movs	r2, #0
   d50ac:	4611      	mov	r1, r2
   d50ae:	6840      	ldr	r0, [r0, #4]
   d50b0:	f7ff bf76 	b.w	d4fa0 <network_connecting>

000d50b4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50b4:	2200      	movs	r2, #0
   d50b6:	2102      	movs	r1, #2
   d50b8:	6840      	ldr	r0, [r0, #4]
   d50ba:	f7ff bf79 	b.w	d4fb0 <network_disconnect>

000d50be <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50be:	2300      	movs	r3, #0
   d50c0:	461a      	mov	r2, r3
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	f7ff bf64 	b.w	d4f90 <network_connect>

000d50c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d50c8:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d50ca:	2203      	movs	r2, #3
   d50cc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d50ce:	4a02      	ldr	r2, [pc, #8]	; (d50d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d50d0:	601a      	str	r2, [r3, #0]
   d50d2:	4770      	bx	lr
   d50d4:	2003e3d0 	.word	0x2003e3d0
   d50d8:	000d6124 	.word	0x000d6124

000d50dc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d50dc:	b510      	push	{r4, lr}
   d50de:	4604      	mov	r4, r0
{
    _spi = spi;
   d50e0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d50e2:	4608      	mov	r0, r1
   d50e4:	f7ff fe08 	bl	d4cf8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d50e8:	2300      	movs	r3, #0
   d50ea:	6063      	str	r3, [r4, #4]
}
   d50ec:	4620      	mov	r0, r4
   d50ee:	bd10      	pop	{r4, pc}

000d50f0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d50f0:	7800      	ldrb	r0, [r0, #0]
   d50f2:	f7ff be09 	b.w	d4d08 <HAL_SPI_Is_Enabled>

000d50f6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d50f6:	b510      	push	{r4, lr}
   d50f8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d50fa:	6800      	ldr	r0, [r0, #0]
   d50fc:	b118      	cbz	r0, d5106 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d50fe:	f7ff ffa7 	bl	d5050 <free>
            wakeupSource_ = nullptr;
   d5102:	2300      	movs	r3, #0
   d5104:	6023      	str	r3, [r4, #0]
   d5106:	bd10      	pop	{r4, pc}

000d5108 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5108:	b510      	push	{r4, lr}
   d510a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d510c:	f7ff fff3 	bl	d50f6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5110:	4620      	mov	r0, r4
   d5112:	bd10      	pop	{r4, pc}

000d5114 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5114:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5116:	4c09      	ldr	r4, [pc, #36]	; (d513c <_GLOBAL__sub_I_System+0x28>)
   d5118:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d511a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d511e:	6020      	str	r0, [r4, #0]
   d5120:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5122:	71a0      	strb	r0, [r4, #6]
   d5124:	8120      	strh	r0, [r4, #8]
   d5126:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5128:	f7ff ff0e 	bl	d4f48 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d512c:	4620      	mov	r0, r4
   d512e:	4a04      	ldr	r2, [pc, #16]	; (d5140 <_GLOBAL__sub_I_System+0x2c>)
   d5130:	4904      	ldr	r1, [pc, #16]	; (d5144 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5136:	f000 bd9d 	b.w	d5c74 <__aeabi_atexit>
   d513a:	bf00      	nop
   d513c:	2003e3d8 	.word	0x2003e3d8
   d5140:	2003dd3c 	.word	0x2003dd3c
   d5144:	000d5109 	.word	0x000d5109

000d5148 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5148:	b510      	push	{r4, lr}
   d514a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d514c:	6800      	ldr	r0, [r0, #0]
   d514e:	b108      	cbz	r0, d5154 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5150:	f7ff fe12 	bl	d4d78 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5154:	4620      	mov	r0, r4
   d5156:	bd10      	pop	{r4, pc}

000d5158 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5158:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d515a:	4c06      	ldr	r4, [pc, #24]	; (d5174 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d515c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d515e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5160:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5162:	f7ff fe01 	bl	d4d68 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5166:	4620      	mov	r0, r4
   d5168:	4a03      	ldr	r2, [pc, #12]	; (d5178 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d516a:	4904      	ldr	r1, [pc, #16]	; (d517c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5170:	f000 bd80 	b.w	d5c74 <__aeabi_atexit>
   d5174:	2003e3e4 	.word	0x2003e3e4
   d5178:	2003dd3c 	.word	0x2003dd3c
   d517c:	000d5149 	.word	0x000d5149

000d5180 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5182:	4606      	mov	r6, r0
   d5184:	460d      	mov	r5, r1
   d5186:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5188:	2400      	movs	r4, #0
  while (size--) {
   d518a:	42bd      	cmp	r5, r7
   d518c:	d00c      	beq.n	d51a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d518e:	6833      	ldr	r3, [r6, #0]
   d5190:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5194:	689b      	ldr	r3, [r3, #8]
   d5196:	4630      	mov	r0, r6
   d5198:	4798      	blx	r3
     if (chunk>=0)
   d519a:	2800      	cmp	r0, #0
   d519c:	db01      	blt.n	d51a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d519e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d51a0:	e7f3      	b.n	d518a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d51a2:	2c00      	cmp	r4, #0
   d51a4:	bf08      	it	eq
   d51a6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d51a8:	4620      	mov	r0, r4
   d51aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51ac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d51ac:	b570      	push	{r4, r5, r6, lr}
   d51ae:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d51b0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d51b2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d51b4:	b149      	cbz	r1, d51ca <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d51b6:	f000 ff11 	bl	d5fdc <strlen>
   d51ba:	682b      	ldr	r3, [r5, #0]
   d51bc:	4602      	mov	r2, r0
   d51be:	4621      	mov	r1, r4
   d51c0:	4628      	mov	r0, r5
   d51c2:	68db      	ldr	r3, [r3, #12]
    }
   d51c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d51c8:	4718      	bx	r3
    }
   d51ca:	bd70      	pop	{r4, r5, r6, pc}

000d51cc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d51cc:	6803      	ldr	r3, [r0, #0]
   d51ce:	689b      	ldr	r3, [r3, #8]
   d51d0:	4718      	bx	r3

000d51d2 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d51d2:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d51d4:	f7ff ffea 	bl	d51ac <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d51d8:	bd08      	pop	{r3, pc}

000d51da <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d51da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d51dc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d51de:	4605      	mov	r5, r0
  size_t n = print('\r');
   d51e0:	f7ff fff4 	bl	d51cc <_ZN5Print5printEc>
  n += print('\n');
   d51e4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d51e6:	4604      	mov	r4, r0
  n += print('\n');
   d51e8:	4628      	mov	r0, r5
   d51ea:	f7ff ffef 	bl	d51cc <_ZN5Print5printEc>
  return n;
}
   d51ee:	4420      	add	r0, r4
   d51f0:	bd38      	pop	{r3, r4, r5, pc}

000d51f2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d51f2:	b538      	push	{r3, r4, r5, lr}
   d51f4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d51f6:	f7ff ffd9 	bl	d51ac <_ZN5Print5writeEPKc>
   d51fa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d51fc:	4628      	mov	r0, r5
   d51fe:	f7ff ffec 	bl	d51da <_ZN5Print7printlnEv>
  return n;
}
   d5202:	4420      	add	r0, r4
   d5204:	bd38      	pop	{r3, r4, r5, pc}

000d5206 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d5206:	f7ff bff4 	b.w	d51f2 <_ZN5Print7printlnEPKc>

000d520a <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d520a:	b530      	push	{r4, r5, lr}
   d520c:	b08b      	sub	sp, #44	; 0x2c
   d520e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5210:	2100      	movs	r1, #0
   d5212:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5216:	2a01      	cmp	r2, #1
   d5218:	bf98      	it	ls
   d521a:	220a      	movls	r2, #10
   d521c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5220:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5224:	fb05 3312 	mls	r3, r5, r2, r3
   d5228:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d522c:	2b09      	cmp	r3, #9
   d522e:	bf94      	ite	ls
   d5230:	3330      	addls	r3, #48	; 0x30
   d5232:	3337      	addhi	r3, #55	; 0x37
   d5234:	b2db      	uxtb	r3, r3
   d5236:	4621      	mov	r1, r4
   d5238:	f804 3901 	strb.w	r3, [r4], #-1
   d523c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d523e:	2d00      	cmp	r5, #0
   d5240:	d1ee      	bne.n	d5220 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5242:	f7ff ffb3 	bl	d51ac <_ZN5Print5writeEPKc>
}
   d5246:	b00b      	add	sp, #44	; 0x2c
   d5248:	bd30      	pop	{r4, r5, pc}
	...

000d524c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d524c:	4b01      	ldr	r3, [pc, #4]	; (d5254 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d524e:	4a02      	ldr	r2, [pc, #8]	; (d5258 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5250:	601a      	str	r2, [r3, #0]
   d5252:	4770      	bx	lr
   d5254:	2003e3e8 	.word	0x2003e3e8
   d5258:	000d61c3 	.word	0x000d61c3

000d525c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d525c:	4b02      	ldr	r3, [pc, #8]	; (d5268 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d525e:	681a      	ldr	r2, [r3, #0]
   d5260:	4b02      	ldr	r3, [pc, #8]	; (d526c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5262:	601a      	str	r2, [r3, #0]
   d5264:	4770      	bx	lr
   d5266:	bf00      	nop
   d5268:	2003dcd4 	.word	0x2003dcd4
   d526c:	2003e3ec 	.word	0x2003e3ec

000d5270 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5270:	2100      	movs	r1, #0
   d5272:	f7ff be71 	b.w	d4f58 <system_delay_ms>

000d5276 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5276:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5278:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d527a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d527c:	b113      	cbz	r3, d5284 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d527e:	2203      	movs	r2, #3
   d5280:	4601      	mov	r1, r0
   d5282:	4798      	blx	r3
    }
   d5284:	4620      	mov	r0, r4
   d5286:	bd10      	pop	{r4, pc}

000d5288 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5288:	b510      	push	{r4, lr}
   d528a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d528c:	f7ff fff3 	bl	d5276 <_ZNSt14_Function_baseD1Ev>
   d5290:	4620      	mov	r0, r4
   d5292:	bd10      	pop	{r4, pc}

000d5294 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5294:	4803      	ldr	r0, [pc, #12]	; (d52a4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5296:	4a04      	ldr	r2, [pc, #16]	; (d52a8 <_GLOBAL__sub_I_RGB+0x14>)
   d5298:	4904      	ldr	r1, [pc, #16]	; (d52ac <_GLOBAL__sub_I_RGB+0x18>)
   d529a:	2300      	movs	r3, #0
   d529c:	6083      	str	r3, [r0, #8]
   d529e:	f000 bce9 	b.w	d5c74 <__aeabi_atexit>
   d52a2:	bf00      	nop
   d52a4:	2003e3f0 	.word	0x2003e3f0
   d52a8:	2003dd3c 	.word	0x2003dd3c
   d52ac:	000d5289 	.word	0x000d5289

000d52b0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d52b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d52b2:	4b0c      	ldr	r3, [pc, #48]	; (d52e4 <serialEventRun+0x34>)
   d52b4:	b133      	cbz	r3, d52c4 <serialEventRun+0x14>
   d52b6:	f000 f957 	bl	d5568 <_Z16_fetch_usbserialv>
   d52ba:	6803      	ldr	r3, [r0, #0]
   d52bc:	691b      	ldr	r3, [r3, #16]
   d52be:	4798      	blx	r3
   d52c0:	2800      	cmp	r0, #0
   d52c2:	dc09      	bgt.n	d52d8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d52c4:	4b08      	ldr	r3, [pc, #32]	; (d52e8 <serialEventRun+0x38>)
   d52c6:	b163      	cbz	r3, d52e2 <serialEventRun+0x32>
   d52c8:	f000 f9d0 	bl	d566c <_Z22__fetch_global_Serial1v>
   d52cc:	6803      	ldr	r3, [r0, #0]
   d52ce:	691b      	ldr	r3, [r3, #16]
   d52d0:	4798      	blx	r3
   d52d2:	2800      	cmp	r0, #0
   d52d4:	dc03      	bgt.n	d52de <serialEventRun+0x2e>
   d52d6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d52d8:	f3af 8000 	nop.w
   d52dc:	e7f2      	b.n	d52c4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d52de:	f3af 8000 	nop.w
   d52e2:	bd08      	pop	{r3, pc}
	...

000d52ec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d52ec:	b508      	push	{r3, lr}
	serialEventRun();
   d52ee:	f7ff ffdf 	bl	d52b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d52f2:	f7ff fd19 	bl	d4d28 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d52f6:	4b01      	ldr	r3, [pc, #4]	; (d52fc <_post_loop+0x10>)
   d52f8:	6018      	str	r0, [r3, #0]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	2003e730 	.word	0x2003e730

000d5300 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5300:	4802      	ldr	r0, [pc, #8]	; (d530c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5302:	4a03      	ldr	r2, [pc, #12]	; (d5310 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5304:	4903      	ldr	r1, [pc, #12]	; (d5314 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5306:	1a12      	subs	r2, r2, r0
   d5308:	f000 be2c 	b.w	d5f64 <memcpy>
   d530c:	2003f400 	.word	0x2003f400
   d5310:	2003f404 	.word	0x2003f404
   d5314:	000d6440 	.word	0x000d6440

000d5318 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5318:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d531a:	2300      	movs	r3, #0
   d531c:	9300      	str	r3, [sp, #0]
   d531e:	461a      	mov	r2, r3
   d5320:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5324:	f7ff fe2a 	bl	d4f7c <system_ctrl_set_result>
}
   d5328:	b003      	add	sp, #12
   d532a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5330 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5330:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5332:	8843      	ldrh	r3, [r0, #2]
   d5334:	2b0a      	cmp	r3, #10
   d5336:	d008      	beq.n	d534a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5338:	2b50      	cmp	r3, #80	; 0x50
   d533a:	d109      	bne.n	d5350 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d533c:	4b09      	ldr	r3, [pc, #36]	; (d5364 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d533e:	681b      	ldr	r3, [r3, #0]
   d5340:	b13b      	cbz	r3, d5352 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5342:	b003      	add	sp, #12
   d5344:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5348:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d534a:	f7ff ffe5 	bl	d5318 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d534e:	e006      	b.n	d535e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5350:	2300      	movs	r3, #0
   d5352:	9300      	str	r3, [sp, #0]
   d5354:	461a      	mov	r2, r3
   d5356:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d535a:	f7ff fe0f 	bl	d4f7c <system_ctrl_set_result>
        break;
    }
}
   d535e:	b003      	add	sp, #12
   d5360:	f85d fb04 	ldr.w	pc, [sp], #4
   d5364:	2003e400 	.word	0x2003e400

000d5368 <module_user_init_hook>:

void module_user_init_hook()
{
   d5368:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d536a:	4c10      	ldr	r4, [pc, #64]	; (d53ac <module_user_init_hook+0x44>)
   d536c:	4d10      	ldr	r5, [pc, #64]	; (d53b0 <module_user_init_hook+0x48>)
   d536e:	6823      	ldr	r3, [r4, #0]
   d5370:	42ab      	cmp	r3, r5
   d5372:	4b10      	ldr	r3, [pc, #64]	; (d53b4 <module_user_init_hook+0x4c>)
   d5374:	bf0c      	ite	eq
   d5376:	2201      	moveq	r2, #1
   d5378:	2200      	movne	r2, #0
   d537a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d537c:	d002      	beq.n	d5384 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d537e:	f7ff ffbf 	bl	d5300 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5382:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5384:	f7ff fcc8 	bl	d4d18 <HAL_RNG_GetRandomNumber>
   d5388:	4604      	mov	r4, r0
    srand(seed);
   d538a:	f000 fdff 	bl	d5f8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d538e:	4b0a      	ldr	r3, [pc, #40]	; (d53b8 <module_user_init_hook+0x50>)
   d5390:	b113      	cbz	r3, d5398 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5392:	4620      	mov	r0, r4
   d5394:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5398:	2100      	movs	r1, #0
   d539a:	4807      	ldr	r0, [pc, #28]	; (d53b8 <module_user_init_hook+0x50>)
   d539c:	f7ff fe48 	bl	d5030 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d53a0:	2100      	movs	r1, #0
   d53a2:	4806      	ldr	r0, [pc, #24]	; (d53bc <module_user_init_hook+0x54>)
}
   d53a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d53a8:	f7ff bdde 	b.w	d4f68 <system_ctrl_set_app_request_handler>
   d53ac:	2003f400 	.word	0x2003f400
   d53b0:	9a271c1e 	.word	0x9a271c1e
   d53b4:	2003e404 	.word	0x2003e404
   d53b8:	00000000 	.word	0x00000000
   d53bc:	000d5331 	.word	0x000d5331

000d53c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d53c0:	4770      	bx	lr

000d53c2 <_ZN9IPAddressD0Ev>:
   d53c2:	b510      	push	{r4, lr}
   d53c4:	2118      	movs	r1, #24
   d53c6:	4604      	mov	r4, r0
   d53c8:	f000 fc62 	bl	d5c90 <_ZdlPvj>
   d53cc:	4620      	mov	r0, r4
   d53ce:	bd10      	pop	{r4, pc}

000d53d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d53d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d53d2:	7d03      	ldrb	r3, [r0, #20]
   d53d4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d53d6:	b08d      	sub	sp, #52	; 0x34
   d53d8:	460e      	mov	r6, r1
   d53da:	f100 0704 	add.w	r7, r0, #4
   d53de:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d53e2:	d002      	beq.n	d53ea <_ZNK9IPAddress7printToER5Print+0x1a>
   d53e4:	f100 0508 	add.w	r5, r0, #8
   d53e8:	e018      	b.n	d541c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d53ea:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d53ec:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d53ee:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d53f2:	232f      	movs	r3, #47	; 0x2f
   d53f4:	462a      	mov	r2, r5
   d53f6:	200a      	movs	r0, #10
   d53f8:	f7ff fcc6 	bl	d4d88 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d53fc:	4628      	mov	r0, r5
   d53fe:	f000 fded 	bl	d5fdc <strlen>
   d5402:	6833      	ldr	r3, [r6, #0]
   d5404:	4602      	mov	r2, r0
   d5406:	68db      	ldr	r3, [r3, #12]
   d5408:	4629      	mov	r1, r5
   d540a:	4630      	mov	r0, r6
   d540c:	4798      	blx	r3
   d540e:	e00f      	b.n	d5430 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5410:	b124      	cbz	r4, d541c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5412:	212e      	movs	r1, #46	; 0x2e
   d5414:	4630      	mov	r0, r6
   d5416:	f7ff fed9 	bl	d51cc <_ZN5Print5printEc>
   d541a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d541c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5420:	220a      	movs	r2, #10
   d5422:	4630      	mov	r0, r6
   d5424:	f7ff fef1 	bl	d520a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5428:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d542a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d542c:	d1f0      	bne.n	d5410 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d542e:	4620      	mov	r0, r4
    }
    return n;
}
   d5430:	b00d      	add	sp, #52	; 0x34
   d5432:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5434 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5434:	b510      	push	{r4, lr}
   d5436:	4b05      	ldr	r3, [pc, #20]	; (d544c <_ZN9IPAddressC1Ev+0x18>)
   d5438:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d543a:	2211      	movs	r2, #17
   d543c:	f840 3b04 	str.w	r3, [r0], #4
   d5440:	2100      	movs	r1, #0
   d5442:	f000 fd9a 	bl	d5f7a <memset>
{
    clear();
}
   d5446:	4620      	mov	r0, r4
   d5448:	bd10      	pop	{r4, pc}
   d544a:	bf00      	nop
   d544c:	000d6264 	.word	0x000d6264

000d5450 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5450:	4603      	mov	r3, r0
   d5452:	4a07      	ldr	r2, [pc, #28]	; (d5470 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5454:	b510      	push	{r4, lr}
   d5456:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d545a:	f101 0210 	add.w	r2, r1, #16
   d545e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5462:	f843 4b04 	str.w	r4, [r3], #4
   d5466:	4291      	cmp	r1, r2
   d5468:	d1f9      	bne.n	d545e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d546a:	780a      	ldrb	r2, [r1, #0]
   d546c:	701a      	strb	r2, [r3, #0]
}
   d546e:	bd10      	pop	{r4, pc}
   d5470:	000d6264 	.word	0x000d6264

000d5474 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5474:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5476:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d547a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d547e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5482:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5486:	2304      	movs	r3, #4
   d5488:	6041      	str	r1, [r0, #4]
   d548a:	7503      	strb	r3, [r0, #20]
   d548c:	bd10      	pop	{r4, pc}

000d548e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d548e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5490:	780d      	ldrb	r5, [r1, #0]
   d5492:	788b      	ldrb	r3, [r1, #2]
   d5494:	784a      	ldrb	r2, [r1, #1]
   d5496:	78c9      	ldrb	r1, [r1, #3]
   d5498:	9100      	str	r1, [sp, #0]
   d549a:	4629      	mov	r1, r5
   d549c:	f7ff ffea 	bl	d5474 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d54a0:	b003      	add	sp, #12
   d54a2:	bd30      	pop	{r4, r5, pc}

000d54a4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54a4:	7441      	strb	r1, [r0, #17]
   d54a6:	4770      	bx	lr

000d54a8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d54a8:	4770      	bx	lr

000d54aa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d54aa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d54ac:	2100      	movs	r1, #0
   d54ae:	7c00      	ldrb	r0, [r0, #16]
   d54b0:	f7ff fd32 	bl	d4f18 <HAL_USB_USART_Receive_Data>
}
   d54b4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54b8:	bf28      	it	cs
   d54ba:	f04f 30ff 	movcs.w	r0, #4294967295
   d54be:	bd08      	pop	{r3, pc}

000d54c0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d54c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d54c2:	2101      	movs	r1, #1
   d54c4:	7c00      	ldrb	r0, [r0, #16]
   d54c6:	f7ff fd27 	bl	d4f18 <HAL_USB_USART_Receive_Data>
}
   d54ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54ce:	bf28      	it	cs
   d54d0:	f04f 30ff 	movcs.w	r0, #4294967295
   d54d4:	bd08      	pop	{r3, pc}

000d54d6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d54d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d54d8:	7c00      	ldrb	r0, [r0, #16]
   d54da:	f7ff fd15 	bl	d4f08 <HAL_USB_USART_Available_Data_For_Write>
}
   d54de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54e2:	bd08      	pop	{r3, pc}

000d54e4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d54e4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d54e6:	7c00      	ldrb	r0, [r0, #16]
   d54e8:	f7ff fd06 	bl	d4ef8 <HAL_USB_USART_Available_Data>
}
   d54ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54f0:	bd08      	pop	{r3, pc}

000d54f2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d54f2:	7c00      	ldrb	r0, [r0, #16]
   d54f4:	f7ff bd20 	b.w	d4f38 <HAL_USB_USART_Flush_Data>

000d54f8 <_ZN9USBSerialD0Ev>:
   d54f8:	b510      	push	{r4, lr}
   d54fa:	2114      	movs	r1, #20
   d54fc:	4604      	mov	r4, r0
   d54fe:	f000 fbc7 	bl	d5c90 <_ZdlPvj>
   d5502:	4620      	mov	r0, r4
   d5504:	bd10      	pop	{r4, pc}

000d5506 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5506:	b538      	push	{r3, r4, r5, lr}
   d5508:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d550a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d550c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d550e:	f7ff fcfb 	bl	d4f08 <HAL_USB_USART_Available_Data_For_Write>
   d5512:	2800      	cmp	r0, #0
   d5514:	dc01      	bgt.n	d551a <_ZN9USBSerial5writeEh+0x14>
   d5516:	7c60      	ldrb	r0, [r4, #17]
   d5518:	b128      	cbz	r0, d5526 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d551a:	4629      	mov	r1, r5
   d551c:	7c20      	ldrb	r0, [r4, #16]
   d551e:	f7ff fd03 	bl	d4f28 <HAL_USB_USART_Send_Data>
   d5522:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5526:	bd38      	pop	{r3, r4, r5, pc}

000d5528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5528:	b510      	push	{r4, lr}
   d552a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d552c:	2300      	movs	r3, #0
   d552e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5534:	60a3      	str	r3, [r4, #8]
   d5536:	4b05      	ldr	r3, [pc, #20]	; (d554c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5538:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d553a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d553c:	4608      	mov	r0, r1
{
  _serial = serial;
   d553e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5540:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5542:	4611      	mov	r1, r2
   d5544:	f7ff fcc8 	bl	d4ed8 <HAL_USB_USART_Init>
}
   d5548:	4620      	mov	r0, r4
   d554a:	bd10      	pop	{r4, pc}
   d554c:	000d6278 	.word	0x000d6278

000d5550 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5550:	2200      	movs	r2, #0
   d5552:	7c00      	ldrb	r0, [r0, #16]
   d5554:	f7ff bcc8 	b.w	d4ee8 <HAL_USB_USART_Begin>

000d5558 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5558:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d555a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d555c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d555e:	2100      	movs	r1, #0
   d5560:	f000 fd0b 	bl	d5f7a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5564:	4620      	mov	r0, r4
   d5566:	bd10      	pop	{r4, pc}

000d5568 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5568:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d556a:	4d0e      	ldr	r5, [pc, #56]	; (d55a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d556c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d556e:	a801      	add	r0, sp, #4
   d5570:	f7ff fff2 	bl	d5558 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5574:	6829      	ldr	r1, [r5, #0]
   d5576:	f011 0401 	ands.w	r4, r1, #1
   d557a:	d110      	bne.n	d559e <_Z16_fetch_usbserialv+0x36>
   d557c:	4628      	mov	r0, r5
   d557e:	f7fe fd8e 	bl	d409e <__cxa_guard_acquire>
   d5582:	b160      	cbz	r0, d559e <_Z16_fetch_usbserialv+0x36>
   d5584:	aa01      	add	r2, sp, #4
   d5586:	4621      	mov	r1, r4
   d5588:	4807      	ldr	r0, [pc, #28]	; (d55a8 <_Z16_fetch_usbserialv+0x40>)
   d558a:	f7ff ffcd 	bl	d5528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d558e:	4628      	mov	r0, r5
   d5590:	f7fe fd8a 	bl	d40a8 <__cxa_guard_release>
   d5594:	4a05      	ldr	r2, [pc, #20]	; (d55ac <_Z16_fetch_usbserialv+0x44>)
   d5596:	4906      	ldr	r1, [pc, #24]	; (d55b0 <_Z16_fetch_usbserialv+0x48>)
   d5598:	4803      	ldr	r0, [pc, #12]	; (d55a8 <_Z16_fetch_usbserialv+0x40>)
   d559a:	f000 fb6b 	bl	d5c74 <__aeabi_atexit>
	return _usbserial;
}
   d559e:	4802      	ldr	r0, [pc, #8]	; (d55a8 <_Z16_fetch_usbserialv+0x40>)
   d55a0:	b007      	add	sp, #28
   d55a2:	bd30      	pop	{r4, r5, pc}
   d55a4:	2003e408 	.word	0x2003e408
   d55a8:	2003e40c 	.word	0x2003e40c
   d55ac:	2003dd3c 	.word	0x2003dd3c
   d55b0:	000d54a9 	.word	0x000d54a9

000d55b4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d55b4:	4770      	bx	lr

000d55b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55b6:	7441      	strb	r1, [r0, #17]
   d55b8:	4770      	bx	lr

000d55ba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d55ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d55bc:	7c00      	ldrb	r0, [r0, #16]
   d55be:	f7ff fc23 	bl	d4e08 <HAL_USART_Available_Data_For_Write>
}
   d55c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55c6:	bd08      	pop	{r3, pc}

000d55c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d55c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d55ca:	7c00      	ldrb	r0, [r0, #16]
   d55cc:	f7ff fbf4 	bl	d4db8 <HAL_USART_Available_Data>
}
   d55d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55d4:	bd08      	pop	{r3, pc}

000d55d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d55d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d55d8:	7c00      	ldrb	r0, [r0, #16]
   d55da:	f7ff fbfd 	bl	d4dd8 <HAL_USART_Peek_Data>
}
   d55de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55e2:	bf28      	it	cs
   d55e4:	f04f 30ff 	movcs.w	r0, #4294967295
   d55e8:	bd08      	pop	{r3, pc}

000d55ea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d55ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d55ec:	7c00      	ldrb	r0, [r0, #16]
   d55ee:	f7ff fbeb 	bl	d4dc8 <HAL_USART_Read_Data>
}
   d55f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55f6:	bf28      	it	cs
   d55f8:	f04f 30ff 	movcs.w	r0, #4294967295
   d55fc:	bd08      	pop	{r3, pc}

000d55fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d55fe:	7c00      	ldrb	r0, [r0, #16]
   d5600:	f7ff bbf2 	b.w	d4de8 <HAL_USART_Flush_Data>

000d5604 <_ZN11USARTSerialD0Ev>:
   d5604:	b510      	push	{r4, lr}
   d5606:	2114      	movs	r1, #20
   d5608:	4604      	mov	r4, r0
   d560a:	f000 fb41 	bl	d5c90 <_ZdlPvj>
   d560e:	4620      	mov	r0, r4
   d5610:	bd10      	pop	{r4, pc}

000d5612 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5612:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5614:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5616:	4604      	mov	r4, r0
   d5618:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d561a:	b925      	cbnz	r5, d5626 <_ZN11USARTSerial5writeEh+0x14>
   d561c:	7c00      	ldrb	r0, [r0, #16]
   d561e:	f7ff fbf3 	bl	d4e08 <HAL_USART_Available_Data_For_Write>
   d5622:	2800      	cmp	r0, #0
   d5624:	dd05      	ble.n	d5632 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5626:	4631      	mov	r1, r6
   d5628:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d562a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d562e:	f7ff bbbb 	b.w	d4da8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5632:	4628      	mov	r0, r5
   d5634:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5638 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5638:	b510      	push	{r4, lr}
   d563a:	4604      	mov	r4, r0
   d563c:	4608      	mov	r0, r1
   d563e:	4611      	mov	r1, r2
   d5640:	2200      	movs	r2, #0
   d5642:	6062      	str	r2, [r4, #4]
   d5644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5648:	60a2      	str	r2, [r4, #8]
   d564a:	4a05      	ldr	r2, [pc, #20]	; (d5660 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d564c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d564e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5650:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5652:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5654:	461a      	mov	r2, r3
   d5656:	f7ff fb9f 	bl	d4d98 <HAL_USART_Init>
}
   d565a:	4620      	mov	r0, r4
   d565c:	bd10      	pop	{r4, pc}
   d565e:	bf00      	nop
   d5660:	000d62a8 	.word	0x000d62a8

000d5664 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5664:	7c00      	ldrb	r0, [r0, #16]
   d5666:	f7ff bbc7 	b.w	d4df8 <HAL_USART_Is_Enabled>
	...

000d566c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d566c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d566e:	4d0c      	ldr	r5, [pc, #48]	; (d56a0 <_Z22__fetch_global_Serial1v+0x34>)
   d5670:	6829      	ldr	r1, [r5, #0]
   d5672:	f011 0401 	ands.w	r4, r1, #1
   d5676:	d111      	bne.n	d569c <_Z22__fetch_global_Serial1v+0x30>
   d5678:	4628      	mov	r0, r5
   d567a:	f7fe fd10 	bl	d409e <__cxa_guard_acquire>
   d567e:	b168      	cbz	r0, d569c <_Z22__fetch_global_Serial1v+0x30>
   d5680:	4a08      	ldr	r2, [pc, #32]	; (d56a4 <_Z22__fetch_global_Serial1v+0x38>)
   d5682:	4b09      	ldr	r3, [pc, #36]	; (d56a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5684:	4809      	ldr	r0, [pc, #36]	; (d56ac <_Z22__fetch_global_Serial1v+0x40>)
   d5686:	4621      	mov	r1, r4
   d5688:	f7ff ffd6 	bl	d5638 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d568c:	4628      	mov	r0, r5
   d568e:	f7fe fd0b 	bl	d40a8 <__cxa_guard_release>
   d5692:	4a07      	ldr	r2, [pc, #28]	; (d56b0 <_Z22__fetch_global_Serial1v+0x44>)
   d5694:	4907      	ldr	r1, [pc, #28]	; (d56b4 <_Z22__fetch_global_Serial1v+0x48>)
   d5696:	4805      	ldr	r0, [pc, #20]	; (d56ac <_Z22__fetch_global_Serial1v+0x40>)
   d5698:	f000 faec 	bl	d5c74 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d569c:	4803      	ldr	r0, [pc, #12]	; (d56ac <_Z22__fetch_global_Serial1v+0x40>)
   d569e:	bd38      	pop	{r3, r4, r5, pc}
   d56a0:	2003e4b8 	.word	0x2003e4b8
   d56a4:	2003e4bc 	.word	0x2003e4bc
   d56a8:	2003e434 	.word	0x2003e434
   d56ac:	2003e420 	.word	0x2003e420
   d56b0:	2003dd3c 	.word	0x2003dd3c
   d56b4:	000d55b5 	.word	0x000d55b5

000d56b8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d56b8:	4770      	bx	lr

000d56ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d56ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56bc:	4606      	mov	r6, r0
   d56be:	4615      	mov	r5, r2
   d56c0:	460c      	mov	r4, r1
   d56c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56c4:	42bc      	cmp	r4, r7
   d56c6:	d006      	beq.n	d56d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d56c8:	6833      	ldr	r3, [r6, #0]
   d56ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d56ce:	689b      	ldr	r3, [r3, #8]
   d56d0:	4630      	mov	r0, r6
   d56d2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56d4:	e7f6      	b.n	d56c4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d56d6:	4628      	mov	r0, r5
   d56d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56da <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d56da:	2200      	movs	r2, #0
   d56dc:	7c00      	ldrb	r0, [r0, #16]
   d56de:	f7ff bbbb 	b.w	d4e58 <HAL_I2C_Write_Data>

000d56e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d56e2:	2100      	movs	r1, #0
   d56e4:	7c00      	ldrb	r0, [r0, #16]
   d56e6:	f7ff bbbf 	b.w	d4e68 <HAL_I2C_Available_Data>

000d56ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d56ea:	2100      	movs	r1, #0
   d56ec:	7c00      	ldrb	r0, [r0, #16]
   d56ee:	f7ff bbc3 	b.w	d4e78 <HAL_I2C_Read_Data>

000d56f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d56f2:	2100      	movs	r1, #0
   d56f4:	7c00      	ldrb	r0, [r0, #16]
   d56f6:	f7ff bbc7 	b.w	d4e88 <HAL_I2C_Peek_Data>

000d56fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d56fa:	2100      	movs	r1, #0
   d56fc:	7c00      	ldrb	r0, [r0, #16]
   d56fe:	f7ff bbcb 	b.w	d4e98 <HAL_I2C_Flush_Data>

000d5702 <_ZN7TwoWireD0Ev>:
   d5702:	b510      	push	{r4, lr}
   d5704:	2114      	movs	r1, #20
   d5706:	4604      	mov	r4, r0
   d5708:	f000 fac2 	bl	d5c90 <_ZdlPvj>
   d570c:	4620      	mov	r0, r4
   d570e:	bd10      	pop	{r4, pc}

000d5710 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5710:	b510      	push	{r4, lr}
   d5712:	4604      	mov	r4, r0
   d5714:	2300      	movs	r3, #0
   d5716:	6063      	str	r3, [r4, #4]
   d5718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d571c:	60a3      	str	r3, [r4, #8]
   d571e:	4b04      	ldr	r3, [pc, #16]	; (d5730 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5720:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5722:	4608      	mov	r0, r1
   d5724:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5726:	4611      	mov	r1, r2
   d5728:	f7ff fbc6 	bl	d4eb8 <HAL_I2C_Init>
}
   d572c:	4620      	mov	r0, r4
   d572e:	bd10      	pop	{r4, pc}
   d5730:	000d62d8 	.word	0x000d62d8

000d5734 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d5734:	2200      	movs	r2, #0
   d5736:	7c00      	ldrb	r0, [r0, #16]
   d5738:	f7ff bb6e 	b.w	d4e18 <HAL_I2C_Set_Speed>

000d573c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d573c:	2300      	movs	r3, #0
   d573e:	461a      	mov	r2, r3
   d5740:	4619      	mov	r1, r3
   d5742:	7c00      	ldrb	r0, [r0, #16]
   d5744:	f7ff bb70 	b.w	d4e28 <HAL_I2C_Begin>

000d5748 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5748:	b570      	push	{r4, r5, r6, lr}
   d574a:	460c      	mov	r4, r1
   d574c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d574e:	2514      	movs	r5, #20
   d5750:	4606      	mov	r6, r0
   d5752:	462a      	mov	r2, r5
   d5754:	2100      	movs	r1, #0
   d5756:	a801      	add	r0, sp, #4
   d5758:	f000 fc0f 	bl	d5f7a <memset>
   d575c:	7823      	ldrb	r3, [r4, #0]
   d575e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5762:	6863      	ldr	r3, [r4, #4]
   d5764:	9303      	str	r3, [sp, #12]
   d5766:	68e3      	ldr	r3, [r4, #12]
   d5768:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d576a:	2200      	movs	r2, #0
   d576c:	7a23      	ldrb	r3, [r4, #8]
   d576e:	7c30      	ldrb	r0, [r6, #16]
   d5770:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5774:	a901      	add	r1, sp, #4
   d5776:	9305      	str	r3, [sp, #20]
   d5778:	f7ff fba6 	bl	d4ec8 <HAL_I2C_Request_Data_Ex>
}
   d577c:	b006      	add	sp, #24
   d577e:	bd70      	pop	{r4, r5, r6, pc}

000d5780 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5782:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5784:	f88d 1000 	strb.w	r1, [sp]
   d5788:	f04f 0164 	mov.w	r1, #100	; 0x64
   d578c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d578e:	bf18      	it	ne
   d5790:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5792:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5794:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5796:	f88d 3008 	strb.w	r3, [sp, #8]
   d579a:	f7ff ffd5 	bl	d5748 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d579e:	b005      	add	sp, #20
   d57a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d57a4 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d57a4:	2301      	movs	r3, #1
   d57a6:	f7ff bfeb 	b.w	d5780 <_ZN7TwoWire11requestFromEhjh>

000d57aa <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d57aa:	2200      	movs	r2, #0
   d57ac:	7c00      	ldrb	r0, [r0, #16]
   d57ae:	f7ff bb43 	b.w	d4e38 <HAL_I2C_Begin_Transmission>

000d57b2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d57b2:	b2c9      	uxtb	r1, r1
   d57b4:	f7ff bff9 	b.w	d57aa <_ZN7TwoWire17beginTransmissionEh>

000d57b8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d57b8:	2200      	movs	r2, #0
   d57ba:	7c00      	ldrb	r0, [r0, #16]
   d57bc:	f7ff bb44 	b.w	d4e48 <HAL_I2C_End_Transmission>

000d57c0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d57c0:	2101      	movs	r1, #1
   d57c2:	f7ff bff9 	b.w	d57b8 <_ZN7TwoWire15endTransmissionEh>

000d57c6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d57c6:	2100      	movs	r1, #0
   d57c8:	7c00      	ldrb	r0, [r0, #16]
   d57ca:	f7ff bb6d 	b.w	d4ea8 <HAL_I2C_Is_Enabled>

000d57ce <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57ce:	2200      	movs	r2, #0
   d57d0:	4611      	mov	r1, r2
   d57d2:	6840      	ldr	r0, [r0, #4]
   d57d4:	f7ff bc14 	b.w	d5000 <network_listening>

000d57d8 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57d8:	2200      	movs	r2, #0
   d57da:	4611      	mov	r1, r2
   d57dc:	6840      	ldr	r0, [r0, #4]
   d57de:	f7ff bc1f 	b.w	d5020 <network_get_listen_timeout>

000d57e2 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57e2:	2200      	movs	r2, #0
   d57e4:	6840      	ldr	r0, [r0, #4]
   d57e6:	f7ff bc13 	b.w	d5010 <network_set_listen_timeout>

000d57ea <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57ea:	2200      	movs	r2, #0
   d57ec:	f081 0101 	eor.w	r1, r1, #1
   d57f0:	6840      	ldr	r0, [r0, #4]
   d57f2:	f7ff bbfd 	b.w	d4ff0 <network_listen>

000d57f6 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d57f6:	2300      	movs	r3, #0
   d57f8:	461a      	mov	r2, r3
   d57fa:	2101      	movs	r1, #1
   d57fc:	6840      	ldr	r0, [r0, #4]
   d57fe:	f7ff bbef 	b.w	d4fe0 <network_off>

000d5802 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5802:	2300      	movs	r3, #0
   d5804:	461a      	mov	r2, r3
   d5806:	4619      	mov	r1, r3
   d5808:	6840      	ldr	r0, [r0, #4]
   d580a:	f7ff bbe1 	b.w	d4fd0 <network_on>

000d580e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d580e:	2200      	movs	r2, #0
   d5810:	4611      	mov	r1, r2
   d5812:	6840      	ldr	r0, [r0, #4]
   d5814:	f7ff bbd4 	b.w	d4fc0 <network_ready>

000d5818 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5818:	2200      	movs	r2, #0
   d581a:	4611      	mov	r1, r2
   d581c:	6840      	ldr	r0, [r0, #4]
   d581e:	f7ff bbbf 	b.w	d4fa0 <network_connecting>

000d5822 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5822:	2200      	movs	r2, #0
   d5824:	2102      	movs	r1, #2
   d5826:	6840      	ldr	r0, [r0, #4]
   d5828:	f7ff bbc2 	b.w	d4fb0 <network_disconnect>

000d582c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d582c:	2300      	movs	r3, #0
   d582e:	461a      	mov	r2, r3
   d5830:	6840      	ldr	r0, [r0, #4]
   d5832:	f7ff bbad 	b.w	d4f90 <network_connect>

000d5836 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5836:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5838:	4605      	mov	r5, r0
   d583a:	b188      	cbz	r0, d5860 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d583c:	6804      	ldr	r4, [r0, #0]
   d583e:	b14c      	cbz	r4, d5854 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5840:	68a3      	ldr	r3, [r4, #8]
   d5842:	b11b      	cbz	r3, d584c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5844:	2203      	movs	r2, #3
   d5846:	4621      	mov	r1, r4
   d5848:	4620      	mov	r0, r4
   d584a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d584c:	2110      	movs	r1, #16
   d584e:	4620      	mov	r0, r4
   d5850:	f000 fa1e 	bl	d5c90 <_ZdlPvj>
   d5854:	4628      	mov	r0, r5
   d5856:	2114      	movs	r1, #20
      }
   d5858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d585c:	f000 ba18 	b.w	d5c90 <_ZdlPvj>
   d5860:	bd38      	pop	{r3, r4, r5, pc}

000d5862 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5862:	b110      	cbz	r0, d586a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5864:	6803      	ldr	r3, [r0, #0]
   d5866:	685b      	ldr	r3, [r3, #4]
   d5868:	4718      	bx	r3
   d586a:	4770      	bx	lr

000d586c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d586c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d586e:	6803      	ldr	r3, [r0, #0]
   d5870:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5872:	b1bb      	cbz	r3, d58a4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5874:	6858      	ldr	r0, [r3, #4]
   d5876:	f7ff fa5f 	bl	d4d38 <os_thread_is_current>
   d587a:	b978      	cbnz	r0, d589c <_ZN6ThreadD1Ev+0x30>
   d587c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d587e:	7c5a      	ldrb	r2, [r3, #17]
   d5880:	b912      	cbnz	r2, d5888 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5882:	6858      	ldr	r0, [r3, #4]
   d5884:	f7ff fa60 	bl	d4d48 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5888:	6823      	ldr	r3, [r4, #0]
   d588a:	6858      	ldr	r0, [r3, #4]
   d588c:	f7ff fa64 	bl	d4d58 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5890:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5892:	2300      	movs	r3, #0
   d5894:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5896:	b128      	cbz	r0, d58a4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5898:	f7ff ffcd 	bl	d5836 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d589c:	6820      	ldr	r0, [r4, #0]
   d589e:	b108      	cbz	r0, d58a4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d58a0:	f7ff ffc9 	bl	d5836 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d58a4:	4620      	mov	r0, r4
   d58a6:	bd10      	pop	{r4, pc}

000d58a8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d58a8:	b538      	push	{r3, r4, r5, lr}
   d58aa:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58ac:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d58b0:	b108      	cbz	r0, d58b6 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d58b2:	f7fe fbf2 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d58b6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d58ba:	b108      	cbz	r0, d58c0 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d58bc:	f7ff fa5c 	bl	d4d78 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58c0:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d58c4:	b135      	cbz	r5, d58d4 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58c6:	4628      	mov	r0, r5
   d58c8:	f7ff ffd0 	bl	d586c <_ZN6ThreadD1Ev>
   d58cc:	2104      	movs	r1, #4
   d58ce:	4628      	mov	r0, r5
   d58d0:	f000 f9de 	bl	d5c90 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58d4:	6820      	ldr	r0, [r4, #0]
   d58d6:	b108      	cbz	r0, d58dc <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d58d8:	f7ff ffc3 	bl	d5862 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d58dc:	4620      	mov	r0, r4
   d58de:	bd38      	pop	{r3, r4, r5, pc}

000d58e0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d58e0:	b510      	push	{r4, lr}
   d58e2:	4b04      	ldr	r3, [pc, #16]	; (d58f4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d58e4:	4604      	mov	r4, r0
   d58e6:	f840 3b08 	str.w	r3, [r0], #8
   d58ea:	f7ff ffdd 	bl	d58a8 <_ZN5spark11MeshPublishD1Ev>
   d58ee:	4620      	mov	r0, r4
   d58f0:	bd10      	pop	{r4, pc}
   d58f2:	bf00      	nop
   d58f4:	000d6300 	.word	0x000d6300

000d58f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d58f8:	b538      	push	{r3, r4, r5, lr}
   d58fa:	4c0e      	ldr	r4, [pc, #56]	; (d5934 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d58fc:	4b0e      	ldr	r3, [pc, #56]	; (d5938 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d58fe:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5900:	2500      	movs	r5, #0
   d5902:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5904:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5908:	6063      	str	r3, [r4, #4]
   d590a:	60a5      	str	r5, [r4, #8]
   d590c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5910:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5914:	f7ff fa28 	bl	d4d68 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5918:	4b08      	ldr	r3, [pc, #32]	; (d593c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d591a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d591e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5922:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5924:	4620      	mov	r0, r4
   d5926:	4a06      	ldr	r2, [pc, #24]	; (d5940 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5928:	4906      	ldr	r1, [pc, #24]	; (d5944 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d592a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d592e:	f000 b9a1 	b.w	d5c74 <__aeabi_atexit>
   d5932:	bf00      	nop
   d5934:	2003e540 	.word	0x2003e540
   d5938:	000d6368 	.word	0x000d6368
   d593c:	000d6300 	.word	0x000d6300
   d5940:	2003dd3c 	.word	0x2003dd3c
   d5944:	000d58e1 	.word	0x000d58e1

000d5948 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5948:	2200      	movs	r2, #0
   d594a:	4611      	mov	r1, r2
   d594c:	6840      	ldr	r0, [r0, #4]
   d594e:	f7ff bb37 	b.w	d4fc0 <network_ready>

000d5952 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5952:	2200      	movs	r2, #0
   d5954:	4611      	mov	r1, r2
   d5956:	6840      	ldr	r0, [r0, #4]
   d5958:	f7ff bb52 	b.w	d5000 <network_listening>

000d595c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d595c:	2200      	movs	r2, #0
   d595e:	4611      	mov	r1, r2
   d5960:	6840      	ldr	r0, [r0, #4]
   d5962:	f7ff bb5d 	b.w	d5020 <network_get_listen_timeout>

000d5966 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5966:	2200      	movs	r2, #0
   d5968:	6840      	ldr	r0, [r0, #4]
   d596a:	f7ff bb51 	b.w	d5010 <network_set_listen_timeout>

000d596e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d596e:	2200      	movs	r2, #0
   d5970:	f081 0101 	eor.w	r1, r1, #1
   d5974:	6840      	ldr	r0, [r0, #4]
   d5976:	f7ff bb3b 	b.w	d4ff0 <network_listen>

000d597a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d597a:	2300      	movs	r3, #0
   d597c:	461a      	mov	r2, r3
   d597e:	4619      	mov	r1, r3
   d5980:	6840      	ldr	r0, [r0, #4]
   d5982:	f7ff bb2d 	b.w	d4fe0 <network_off>

000d5986 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5986:	2300      	movs	r3, #0
   d5988:	461a      	mov	r2, r3
   d598a:	4619      	mov	r1, r3
   d598c:	6840      	ldr	r0, [r0, #4]
   d598e:	f7ff bb1f 	b.w	d4fd0 <network_on>

000d5992 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5992:	2200      	movs	r2, #0
   d5994:	4611      	mov	r1, r2
   d5996:	6840      	ldr	r0, [r0, #4]
   d5998:	f7ff bb02 	b.w	d4fa0 <network_connecting>

000d599c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d599c:	2200      	movs	r2, #0
   d599e:	2102      	movs	r1, #2
   d59a0:	6840      	ldr	r0, [r0, #4]
   d59a2:	f7ff bb05 	b.w	d4fb0 <network_disconnect>

000d59a6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59a6:	2300      	movs	r3, #0
   d59a8:	461a      	mov	r2, r3
   d59aa:	6840      	ldr	r0, [r0, #4]
   d59ac:	f7ff baf0 	b.w	d4f90 <network_connect>

000d59b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d59b0:	4b02      	ldr	r3, [pc, #8]	; (d59bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d59b2:	2204      	movs	r2, #4
   d59b4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d59b6:	4a02      	ldr	r2, [pc, #8]	; (d59c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d59b8:	601a      	str	r2, [r3, #0]
   d59ba:	4770      	bx	lr
   d59bc:	2003e714 	.word	0x2003e714
   d59c0:	000d6334 	.word	0x000d6334

000d59c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d59c4:	2300      	movs	r3, #0
   d59c6:	461a      	mov	r2, r3
   d59c8:	6840      	ldr	r0, [r0, #4]
   d59ca:	f7ff bae1 	b.w	d4f90 <network_connect>

000d59ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d59ce:	2200      	movs	r2, #0
   d59d0:	2102      	movs	r1, #2
   d59d2:	6840      	ldr	r0, [r0, #4]
   d59d4:	f7ff baec 	b.w	d4fb0 <network_disconnect>

000d59d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d59d8:	2200      	movs	r2, #0
   d59da:	4611      	mov	r1, r2
   d59dc:	6840      	ldr	r0, [r0, #4]
   d59de:	f7ff badf 	b.w	d4fa0 <network_connecting>

000d59e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d59e2:	2200      	movs	r2, #0
   d59e4:	4611      	mov	r1, r2
   d59e6:	6840      	ldr	r0, [r0, #4]
   d59e8:	f7ff baea 	b.w	d4fc0 <network_ready>

000d59ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d59ec:	2300      	movs	r3, #0
   d59ee:	461a      	mov	r2, r3
   d59f0:	4619      	mov	r1, r3
   d59f2:	6840      	ldr	r0, [r0, #4]
   d59f4:	f7ff baec 	b.w	d4fd0 <network_on>

000d59f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d59f8:	2300      	movs	r3, #0
   d59fa:	461a      	mov	r2, r3
   d59fc:	4619      	mov	r1, r3
   d59fe:	6840      	ldr	r0, [r0, #4]
   d5a00:	f7ff baee 	b.w	d4fe0 <network_off>

000d5a04 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5a04:	2200      	movs	r2, #0
   d5a06:	f081 0101 	eor.w	r1, r1, #1
   d5a0a:	6840      	ldr	r0, [r0, #4]
   d5a0c:	f7ff baf0 	b.w	d4ff0 <network_listen>

000d5a10 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5a10:	2200      	movs	r2, #0
   d5a12:	6840      	ldr	r0, [r0, #4]
   d5a14:	f7ff bafc 	b.w	d5010 <network_set_listen_timeout>

000d5a18 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5a18:	2200      	movs	r2, #0
   d5a1a:	4611      	mov	r1, r2
   d5a1c:	6840      	ldr	r0, [r0, #4]
   d5a1e:	f7ff baff 	b.w	d5020 <network_get_listen_timeout>

000d5a22 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5a22:	2200      	movs	r2, #0
   d5a24:	4611      	mov	r1, r2
   d5a26:	6840      	ldr	r0, [r0, #4]
   d5a28:	f7ff baea 	b.w	d5000 <network_listening>

000d5a2c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a30:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a32:	b095      	sub	sp, #84	; 0x54
   d5a34:	4616      	mov	r6, r2
   d5a36:	460d      	mov	r5, r1
   d5a38:	4607      	mov	r7, r0
    IPAddress addr;
   d5a3a:	f7ff fcfb 	bl	d5434 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5a3e:	4621      	mov	r1, r4
   d5a40:	2220      	movs	r2, #32
   d5a42:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a44:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5a46:	f000 fa98 	bl	d5f7a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5a4a:	2340      	movs	r3, #64	; 0x40
   d5a4c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5a4e:	4621      	mov	r1, r4
   d5a50:	466b      	mov	r3, sp
   d5a52:	aa0c      	add	r2, sp, #48	; 0x30
   d5a54:	4630      	mov	r0, r6
   d5a56:	f7ff f91f 	bl	d4c98 <netdb_getaddrinfo>
    if (!r) {
   d5a5a:	4604      	mov	r4, r0
   d5a5c:	2800      	cmp	r0, #0
   d5a5e:	d144      	bne.n	d5aea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a60:	4602      	mov	r2, r0
   d5a62:	2101      	movs	r1, #1
   d5a64:	6868      	ldr	r0, [r5, #4]
   d5a66:	f7ff faab 	bl	d4fc0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a6a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a6c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a6e:	4622      	mov	r2, r4
   d5a70:	6868      	ldr	r0, [r5, #4]
   d5a72:	f7ff faa5 	bl	d4fc0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a76:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a78:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5a7a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a7c:	2e00      	cmp	r6, #0
   d5a7e:	d034      	beq.n	d5aea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5a80:	2900      	cmp	r1, #0
   d5a82:	d132      	bne.n	d5aea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5a84:	6873      	ldr	r3, [r6, #4]
   d5a86:	2b02      	cmp	r3, #2
   d5a88:	d002      	beq.n	d5a90 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5a8a:	2b0a      	cmp	r3, #10
   d5a8c:	d009      	beq.n	d5aa2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5a8e:	e02a      	b.n	d5ae6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5a90:	f1b8 0f00 	cmp.w	r8, #0
   d5a94:	d027      	beq.n	d5ae6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5a96:	6971      	ldr	r1, [r6, #20]
   d5a98:	4638      	mov	r0, r7
   d5a9a:	3104      	adds	r1, #4
   d5a9c:	f7ff fcf7 	bl	d548e <_ZN9IPAddressaSEPKh>
   d5aa0:	e020      	b.n	d5ae4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5aa2:	f1b9 0f00 	cmp.w	r9, #0
   d5aa6:	d01e      	beq.n	d5ae6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5aa8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5aaa:	2211      	movs	r2, #17
   d5aac:	a801      	add	r0, sp, #4
   d5aae:	f000 fa64 	bl	d5f7a <memset>
                    a.v = 6;
   d5ab2:	2306      	movs	r3, #6
   d5ab4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ab8:	ad01      	add	r5, sp, #4
   d5aba:	f104 0308 	add.w	r3, r4, #8
   d5abe:	3418      	adds	r4, #24
   d5ac0:	6818      	ldr	r0, [r3, #0]
   d5ac2:	6859      	ldr	r1, [r3, #4]
   d5ac4:	462a      	mov	r2, r5
   d5ac6:	c203      	stmia	r2!, {r0, r1}
   d5ac8:	3308      	adds	r3, #8
   d5aca:	42a3      	cmp	r3, r4
   d5acc:	4615      	mov	r5, r2
   d5ace:	d1f7      	bne.n	d5ac0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5ad0:	a901      	add	r1, sp, #4
   d5ad2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5ad4:	ad07      	add	r5, sp, #28
   d5ad6:	f7ff fcbb 	bl	d5450 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5adc:	1d3c      	adds	r4, r7, #4
   d5ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ae0:	682b      	ldr	r3, [r5, #0]
   d5ae2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5ae4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ae6:	69f6      	ldr	r6, [r6, #28]
   d5ae8:	e7c8      	b.n	d5a7c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5aea:	9800      	ldr	r0, [sp, #0]
   d5aec:	f7ff f8cc 	bl	d4c88 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5af0:	4638      	mov	r0, r7
   d5af2:	b015      	add	sp, #84	; 0x54
   d5af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5af8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5af8:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5afa:	4a03      	ldr	r2, [pc, #12]	; (d5b08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5afc:	601a      	str	r2, [r3, #0]
   d5afe:	2200      	movs	r2, #0
   d5b00:	605a      	str	r2, [r3, #4]
   d5b02:	4770      	bx	lr
   d5b04:	2003e71c 	.word	0x2003e71c
   d5b08:	000d6368 	.word	0x000d6368

000d5b0c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5b0c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5b0e:	4e18      	ldr	r6, [pc, #96]	; (d5b70 <pinAvailable+0x64>)
   d5b10:	6831      	ldr	r1, [r6, #0]
   d5b12:	f011 0501 	ands.w	r5, r1, #1
   d5b16:	4604      	mov	r4, r0
   d5b18:	d10a      	bne.n	d5b30 <pinAvailable+0x24>
   d5b1a:	4630      	mov	r0, r6
   d5b1c:	f7fe fabf 	bl	d409e <__cxa_guard_acquire>
   d5b20:	b130      	cbz	r0, d5b30 <pinAvailable+0x24>
   d5b22:	4629      	mov	r1, r5
   d5b24:	4813      	ldr	r0, [pc, #76]	; (d5b74 <pinAvailable+0x68>)
   d5b26:	f7ff fad9 	bl	d50dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5b2a:	4630      	mov	r0, r6
   d5b2c:	f7fe fabc 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5b30:	4810      	ldr	r0, [pc, #64]	; (d5b74 <pinAvailable+0x68>)
   d5b32:	f7ff fadd 	bl	d50f0 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5b36:	b128      	cbz	r0, d5b44 <pinAvailable+0x38>
   d5b38:	f1a4 030b 	sub.w	r3, r4, #11
   d5b3c:	2b02      	cmp	r3, #2
   d5b3e:	d801      	bhi.n	d5b44 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5b40:	2000      	movs	r0, #0
   d5b42:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5b44:	f000 f870 	bl	d5c28 <_Z19__fetch_global_Wirev>
   d5b48:	f7ff fe3d 	bl	d57c6 <_ZN7TwoWire9isEnabledEv>
   d5b4c:	b108      	cbz	r0, d5b52 <pinAvailable+0x46>
   d5b4e:	2c01      	cmp	r4, #1
   d5b50:	d9f6      	bls.n	d5b40 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5b52:	f7ff fd8b 	bl	d566c <_Z22__fetch_global_Serial1v>
   d5b56:	f7ff fd85 	bl	d5664 <_ZN11USARTSerial9isEnabledEv>
   d5b5a:	b118      	cbz	r0, d5b64 <pinAvailable+0x58>
   d5b5c:	f1a4 0309 	sub.w	r3, r4, #9
   d5b60:	2b01      	cmp	r3, #1
   d5b62:	d9ed      	bls.n	d5b40 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5b64:	2c23      	cmp	r4, #35	; 0x23
   d5b66:	bf8c      	ite	hi
   d5b68:	2000      	movhi	r0, #0
   d5b6a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5b6c:	bd70      	pop	{r4, r5, r6, pc}
   d5b6e:	bf00      	nop
   d5b70:	2003e724 	.word	0x2003e724
   d5b74:	2003e728 	.word	0x2003e728

000d5b78 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b78:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5b7a:	b538      	push	{r3, r4, r5, lr}
   d5b7c:	4604      	mov	r4, r0
   d5b7e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b80:	d80a      	bhi.n	d5b98 <pinMode+0x20>
   d5b82:	29ff      	cmp	r1, #255	; 0xff
   d5b84:	d008      	beq.n	d5b98 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5b86:	f7ff ffc1 	bl	d5b0c <pinAvailable>
   d5b8a:	b128      	cbz	r0, d5b98 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5b8c:	4629      	mov	r1, r5
   d5b8e:	4620      	mov	r0, r4
}
   d5b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5b94:	f7ff b890 	b.w	d4cb8 <HAL_Pin_Mode>
   d5b98:	bd38      	pop	{r3, r4, r5, pc}

000d5b9a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5b9a:	b538      	push	{r3, r4, r5, lr}
   d5b9c:	4604      	mov	r4, r0
   d5b9e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5ba0:	f7ff f892 	bl	d4cc8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5ba4:	28ff      	cmp	r0, #255	; 0xff
   d5ba6:	d010      	beq.n	d5bca <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5ba8:	2806      	cmp	r0, #6
   d5baa:	d804      	bhi.n	d5bb6 <digitalWrite+0x1c>
   d5bac:	234d      	movs	r3, #77	; 0x4d
   d5bae:	fa23 f000 	lsr.w	r0, r3, r0
   d5bb2:	07c3      	lsls	r3, r0, #31
   d5bb4:	d409      	bmi.n	d5bca <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5bb6:	4620      	mov	r0, r4
   d5bb8:	f7ff ffa8 	bl	d5b0c <pinAvailable>
   d5bbc:	b128      	cbz	r0, d5bca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5bbe:	4629      	mov	r1, r5
   d5bc0:	4620      	mov	r0, r4
}
   d5bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5bc6:	f7ff b887 	b.w	d4cd8 <HAL_GPIO_Write>
   d5bca:	bd38      	pop	{r3, r4, r5, pc}

000d5bcc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5bcc:	b510      	push	{r4, lr}
   d5bce:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5bd0:	f7ff f87a 	bl	d4cc8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5bd4:	3804      	subs	r0, #4
   d5bd6:	b2c0      	uxtb	r0, r0
   d5bd8:	2801      	cmp	r0, #1
   d5bda:	d908      	bls.n	d5bee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5bdc:	4620      	mov	r0, r4
   d5bde:	f7ff ff95 	bl	d5b0c <pinAvailable>
   d5be2:	b120      	cbz	r0, d5bee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5be4:	4620      	mov	r0, r4
}
   d5be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5bea:	f7ff b87d 	b.w	d4ce8 <HAL_GPIO_Read>
}
   d5bee:	2000      	movs	r0, #0
   d5bf0:	bd10      	pop	{r4, pc}
	...

000d5bf4 <_Z17acquireWireBufferv>:
   d5bf4:	b570      	push	{r4, r5, r6, lr}
   d5bf6:	4604      	mov	r4, r0
   d5bf8:	2514      	movs	r5, #20
   d5bfa:	462a      	mov	r2, r5
   d5bfc:	4e09      	ldr	r6, [pc, #36]	; (d5c24 <_Z17acquireWireBufferv+0x30>)
   d5bfe:	2100      	movs	r1, #0
   d5c00:	f000 f9bb 	bl	d5f7a <memset>
   d5c04:	8025      	strh	r5, [r4, #0]
   d5c06:	2520      	movs	r5, #32
   d5c08:	4631      	mov	r1, r6
   d5c0a:	60a5      	str	r5, [r4, #8]
   d5c0c:	6125      	str	r5, [r4, #16]
   d5c0e:	4628      	mov	r0, r5
   d5c10:	f000 f840 	bl	d5c94 <_ZnajRKSt9nothrow_t>
   d5c14:	4631      	mov	r1, r6
   d5c16:	6060      	str	r0, [r4, #4]
   d5c18:	4628      	mov	r0, r5
   d5c1a:	f000 f83b 	bl	d5c94 <_ZnajRKSt9nothrow_t>
   d5c1e:	60e0      	str	r0, [r4, #12]
   d5c20:	4620      	mov	r0, r4
   d5c22:	bd70      	pop	{r4, r5, r6, pc}
   d5c24:	000d6394 	.word	0x000d6394

000d5c28 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5c28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c2a:	4d0e      	ldr	r5, [pc, #56]	; (d5c64 <_Z19__fetch_global_Wirev+0x3c>)
   d5c2c:	6829      	ldr	r1, [r5, #0]
   d5c2e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5c32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c34:	d113      	bne.n	d5c5e <_Z19__fetch_global_Wirev+0x36>
   d5c36:	4628      	mov	r0, r5
   d5c38:	f7fe fa31 	bl	d409e <__cxa_guard_acquire>
   d5c3c:	b178      	cbz	r0, d5c5e <_Z19__fetch_global_Wirev+0x36>
   d5c3e:	a801      	add	r0, sp, #4
   d5c40:	f7ff ffd8 	bl	d5bf4 <_Z17acquireWireBufferv>
   d5c44:	aa01      	add	r2, sp, #4
   d5c46:	4621      	mov	r1, r4
   d5c48:	4807      	ldr	r0, [pc, #28]	; (d5c68 <_Z19__fetch_global_Wirev+0x40>)
   d5c4a:	f7ff fd61 	bl	d5710 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5c4e:	4628      	mov	r0, r5
   d5c50:	f7fe fa2a 	bl	d40a8 <__cxa_guard_release>
   d5c54:	4a05      	ldr	r2, [pc, #20]	; (d5c6c <_Z19__fetch_global_Wirev+0x44>)
   d5c56:	4906      	ldr	r1, [pc, #24]	; (d5c70 <_Z19__fetch_global_Wirev+0x48>)
   d5c58:	4803      	ldr	r0, [pc, #12]	; (d5c68 <_Z19__fetch_global_Wirev+0x40>)
   d5c5a:	f000 f80b 	bl	d5c74 <__aeabi_atexit>
	return wire;
}
   d5c5e:	4802      	ldr	r0, [pc, #8]	; (d5c68 <_Z19__fetch_global_Wirev+0x40>)
   d5c60:	b007      	add	sp, #28
   d5c62:	bd30      	pop	{r4, r5, pc}
   d5c64:	2003e734 	.word	0x2003e734
   d5c68:	2003e738 	.word	0x2003e738
   d5c6c:	2003dd3c 	.word	0x2003dd3c
   d5c70:	000d56b9 	.word	0x000d56b9

000d5c74 <__aeabi_atexit>:
   d5c74:	460b      	mov	r3, r1
   d5c76:	4601      	mov	r1, r0
   d5c78:	4618      	mov	r0, r3
   d5c7a:	f000 b965 	b.w	d5f48 <__cxa_atexit>
	...

000d5c80 <_ZSt15get_new_handlerv>:
   d5c80:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <_ZSt15get_new_handlerv+0xc>)
   d5c82:	6818      	ldr	r0, [r3, #0]
   d5c84:	f3bf 8f5f 	dmb	sy
   d5c88:	4770      	bx	lr
   d5c8a:	bf00      	nop
   d5c8c:	2003e74c 	.word	0x2003e74c

000d5c90 <_ZdlPvj>:
   d5c90:	f7fe ba01 	b.w	d4096 <_ZdlPv>

000d5c94 <_ZnajRKSt9nothrow_t>:
   d5c94:	f000 b800 	b.w	d5c98 <_ZnwjRKSt9nothrow_t>

000d5c98 <_ZnwjRKSt9nothrow_t>:
   d5c98:	b510      	push	{r4, lr}
   d5c9a:	2800      	cmp	r0, #0
   d5c9c:	bf14      	ite	ne
   d5c9e:	4604      	movne	r4, r0
   d5ca0:	2401      	moveq	r4, #1
   d5ca2:	4620      	mov	r0, r4
   d5ca4:	f7ff f9cc 	bl	d5040 <malloc>
   d5ca8:	b920      	cbnz	r0, d5cb4 <_ZnwjRKSt9nothrow_t+0x1c>
   d5caa:	f7ff ffe9 	bl	d5c80 <_ZSt15get_new_handlerv>
   d5cae:	b108      	cbz	r0, d5cb4 <_ZnwjRKSt9nothrow_t+0x1c>
   d5cb0:	4780      	blx	r0
   d5cb2:	e7f6      	b.n	d5ca2 <_ZnwjRKSt9nothrow_t+0xa>
   d5cb4:	bd10      	pop	{r4, pc}
	...

000d5cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5cb8:	4b18      	ldr	r3, [pc, #96]	; (d5d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5cba:	681a      	ldr	r2, [r3, #0]
   d5cbc:	07d1      	lsls	r1, r2, #31
   d5cbe:	bf5c      	itt	pl
   d5cc0:	2201      	movpl	r2, #1
   d5cc2:	601a      	strpl	r2, [r3, #0]
   d5cc4:	4b16      	ldr	r3, [pc, #88]	; (d5d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5cc6:	681a      	ldr	r2, [r3, #0]
   d5cc8:	07d2      	lsls	r2, r2, #31
   d5cca:	bf5c      	itt	pl
   d5ccc:	2201      	movpl	r2, #1
   d5cce:	601a      	strpl	r2, [r3, #0]
   d5cd0:	4b14      	ldr	r3, [pc, #80]	; (d5d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5cd2:	681a      	ldr	r2, [r3, #0]
   d5cd4:	07d0      	lsls	r0, r2, #31
   d5cd6:	bf5c      	itt	pl
   d5cd8:	2201      	movpl	r2, #1
   d5cda:	601a      	strpl	r2, [r3, #0]
   d5cdc:	4b12      	ldr	r3, [pc, #72]	; (d5d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5cde:	681a      	ldr	r2, [r3, #0]
   d5ce0:	07d1      	lsls	r1, r2, #31
   d5ce2:	bf5c      	itt	pl
   d5ce4:	2201      	movpl	r2, #1
   d5ce6:	601a      	strpl	r2, [r3, #0]
   d5ce8:	4b10      	ldr	r3, [pc, #64]	; (d5d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5cea:	681a      	ldr	r2, [r3, #0]
   d5cec:	07d2      	lsls	r2, r2, #31
   d5cee:	bf5c      	itt	pl
   d5cf0:	2201      	movpl	r2, #1
   d5cf2:	601a      	strpl	r2, [r3, #0]
   d5cf4:	4b0e      	ldr	r3, [pc, #56]	; (d5d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5cf6:	681a      	ldr	r2, [r3, #0]
   d5cf8:	07d0      	lsls	r0, r2, #31
   d5cfa:	bf5c      	itt	pl
   d5cfc:	2201      	movpl	r2, #1
   d5cfe:	601a      	strpl	r2, [r3, #0]
   d5d00:	4b0c      	ldr	r3, [pc, #48]	; (d5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d02:	681a      	ldr	r2, [r3, #0]
   d5d04:	07d1      	lsls	r1, r2, #31
   d5d06:	bf5c      	itt	pl
   d5d08:	2201      	movpl	r2, #1
   d5d0a:	601a      	strpl	r2, [r3, #0]
   d5d0c:	4b0a      	ldr	r3, [pc, #40]	; (d5d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d0e:	681a      	ldr	r2, [r3, #0]
   d5d10:	07d2      	lsls	r2, r2, #31
   d5d12:	bf5c      	itt	pl
   d5d14:	2201      	movpl	r2, #1
   d5d16:	601a      	strpl	r2, [r3, #0]
   d5d18:	4770      	bx	lr
   d5d1a:	bf00      	nop
   d5d1c:	2003e76c 	.word	0x2003e76c
   d5d20:	2003e768 	.word	0x2003e768
   d5d24:	2003e764 	.word	0x2003e764
   d5d28:	2003e760 	.word	0x2003e760
   d5d2c:	2003e75c 	.word	0x2003e75c
   d5d30:	2003e758 	.word	0x2003e758
   d5d34:	2003e754 	.word	0x2003e754
   d5d38:	2003e750 	.word	0x2003e750

000d5d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5d3c:	4b24      	ldr	r3, [pc, #144]	; (d5dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5d3e:	681a      	ldr	r2, [r3, #0]
   d5d40:	07d0      	lsls	r0, r2, #31
   d5d42:	bf5c      	itt	pl
   d5d44:	2201      	movpl	r2, #1
   d5d46:	601a      	strpl	r2, [r3, #0]
   d5d48:	4b22      	ldr	r3, [pc, #136]	; (d5dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5d4a:	681a      	ldr	r2, [r3, #0]
   d5d4c:	07d1      	lsls	r1, r2, #31
   d5d4e:	bf5c      	itt	pl
   d5d50:	2201      	movpl	r2, #1
   d5d52:	601a      	strpl	r2, [r3, #0]
   d5d54:	4b20      	ldr	r3, [pc, #128]	; (d5dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5d56:	681a      	ldr	r2, [r3, #0]
   d5d58:	07d2      	lsls	r2, r2, #31
   d5d5a:	bf5c      	itt	pl
   d5d5c:	2201      	movpl	r2, #1
   d5d5e:	601a      	strpl	r2, [r3, #0]
   d5d60:	4b1e      	ldr	r3, [pc, #120]	; (d5ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5d62:	681a      	ldr	r2, [r3, #0]
   d5d64:	07d0      	lsls	r0, r2, #31
   d5d66:	bf5c      	itt	pl
   d5d68:	2201      	movpl	r2, #1
   d5d6a:	601a      	strpl	r2, [r3, #0]
   d5d6c:	4b1c      	ldr	r3, [pc, #112]	; (d5de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5d6e:	681a      	ldr	r2, [r3, #0]
   d5d70:	07d1      	lsls	r1, r2, #31
   d5d72:	bf5c      	itt	pl
   d5d74:	2201      	movpl	r2, #1
   d5d76:	601a      	strpl	r2, [r3, #0]
   d5d78:	4b1a      	ldr	r3, [pc, #104]	; (d5de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5d7a:	681a      	ldr	r2, [r3, #0]
   d5d7c:	07d2      	lsls	r2, r2, #31
   d5d7e:	bf5c      	itt	pl
   d5d80:	2201      	movpl	r2, #1
   d5d82:	601a      	strpl	r2, [r3, #0]
   d5d84:	4b18      	ldr	r3, [pc, #96]	; (d5de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5d86:	681a      	ldr	r2, [r3, #0]
   d5d88:	07d0      	lsls	r0, r2, #31
   d5d8a:	bf5c      	itt	pl
   d5d8c:	2201      	movpl	r2, #1
   d5d8e:	601a      	strpl	r2, [r3, #0]
   d5d90:	4b16      	ldr	r3, [pc, #88]	; (d5dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5d92:	681a      	ldr	r2, [r3, #0]
   d5d94:	07d1      	lsls	r1, r2, #31
   d5d96:	bf5c      	itt	pl
   d5d98:	2201      	movpl	r2, #1
   d5d9a:	601a      	strpl	r2, [r3, #0]
   d5d9c:	4b14      	ldr	r3, [pc, #80]	; (d5df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5d9e:	681a      	ldr	r2, [r3, #0]
   d5da0:	07d2      	lsls	r2, r2, #31
   d5da2:	bf5c      	itt	pl
   d5da4:	2201      	movpl	r2, #1
   d5da6:	601a      	strpl	r2, [r3, #0]
   d5da8:	4b12      	ldr	r3, [pc, #72]	; (d5df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5daa:	681a      	ldr	r2, [r3, #0]
   d5dac:	07d0      	lsls	r0, r2, #31
   d5dae:	bf5c      	itt	pl
   d5db0:	2201      	movpl	r2, #1
   d5db2:	601a      	strpl	r2, [r3, #0]
   d5db4:	4b10      	ldr	r3, [pc, #64]	; (d5df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5db6:	681a      	ldr	r2, [r3, #0]
   d5db8:	07d1      	lsls	r1, r2, #31
   d5dba:	bf5c      	itt	pl
   d5dbc:	2201      	movpl	r2, #1
   d5dbe:	601a      	strpl	r2, [r3, #0]
   d5dc0:	4b0e      	ldr	r3, [pc, #56]	; (d5dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5dc2:	681a      	ldr	r2, [r3, #0]
   d5dc4:	07d2      	lsls	r2, r2, #31
   d5dc6:	bf5c      	itt	pl
   d5dc8:	2201      	movpl	r2, #1
   d5dca:	601a      	strpl	r2, [r3, #0]
   d5dcc:	4770      	bx	lr
   d5dce:	bf00      	nop
   d5dd0:	2003e79c 	.word	0x2003e79c
   d5dd4:	2003e798 	.word	0x2003e798
   d5dd8:	2003e794 	.word	0x2003e794
   d5ddc:	2003e790 	.word	0x2003e790
   d5de0:	2003e78c 	.word	0x2003e78c
   d5de4:	2003e788 	.word	0x2003e788
   d5de8:	2003e784 	.word	0x2003e784
   d5dec:	2003e780 	.word	0x2003e780
   d5df0:	2003e77c 	.word	0x2003e77c
   d5df4:	2003e778 	.word	0x2003e778
   d5df8:	2003e774 	.word	0x2003e774
   d5dfc:	2003e770 	.word	0x2003e770

000d5e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5e00:	4b24      	ldr	r3, [pc, #144]	; (d5e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5e02:	681a      	ldr	r2, [r3, #0]
   d5e04:	07d0      	lsls	r0, r2, #31
   d5e06:	bf5c      	itt	pl
   d5e08:	2201      	movpl	r2, #1
   d5e0a:	601a      	strpl	r2, [r3, #0]
   d5e0c:	4b22      	ldr	r3, [pc, #136]	; (d5e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5e0e:	681a      	ldr	r2, [r3, #0]
   d5e10:	07d1      	lsls	r1, r2, #31
   d5e12:	bf5c      	itt	pl
   d5e14:	2201      	movpl	r2, #1
   d5e16:	601a      	strpl	r2, [r3, #0]
   d5e18:	4b20      	ldr	r3, [pc, #128]	; (d5e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5e1a:	681a      	ldr	r2, [r3, #0]
   d5e1c:	07d2      	lsls	r2, r2, #31
   d5e1e:	bf5c      	itt	pl
   d5e20:	2201      	movpl	r2, #1
   d5e22:	601a      	strpl	r2, [r3, #0]
   d5e24:	4b1e      	ldr	r3, [pc, #120]	; (d5ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5e26:	681a      	ldr	r2, [r3, #0]
   d5e28:	07d0      	lsls	r0, r2, #31
   d5e2a:	bf5c      	itt	pl
   d5e2c:	2201      	movpl	r2, #1
   d5e2e:	601a      	strpl	r2, [r3, #0]
   d5e30:	4b1c      	ldr	r3, [pc, #112]	; (d5ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5e32:	681a      	ldr	r2, [r3, #0]
   d5e34:	07d1      	lsls	r1, r2, #31
   d5e36:	bf5c      	itt	pl
   d5e38:	2201      	movpl	r2, #1
   d5e3a:	601a      	strpl	r2, [r3, #0]
   d5e3c:	4b1a      	ldr	r3, [pc, #104]	; (d5ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5e3e:	681a      	ldr	r2, [r3, #0]
   d5e40:	07d2      	lsls	r2, r2, #31
   d5e42:	bf5c      	itt	pl
   d5e44:	2201      	movpl	r2, #1
   d5e46:	601a      	strpl	r2, [r3, #0]
   d5e48:	4b18      	ldr	r3, [pc, #96]	; (d5eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5e4a:	681a      	ldr	r2, [r3, #0]
   d5e4c:	07d0      	lsls	r0, r2, #31
   d5e4e:	bf5c      	itt	pl
   d5e50:	2201      	movpl	r2, #1
   d5e52:	601a      	strpl	r2, [r3, #0]
   d5e54:	4b16      	ldr	r3, [pc, #88]	; (d5eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5e56:	681a      	ldr	r2, [r3, #0]
   d5e58:	07d1      	lsls	r1, r2, #31
   d5e5a:	bf5c      	itt	pl
   d5e5c:	2201      	movpl	r2, #1
   d5e5e:	601a      	strpl	r2, [r3, #0]
   d5e60:	4b14      	ldr	r3, [pc, #80]	; (d5eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5e62:	681a      	ldr	r2, [r3, #0]
   d5e64:	07d2      	lsls	r2, r2, #31
   d5e66:	bf5c      	itt	pl
   d5e68:	2201      	movpl	r2, #1
   d5e6a:	601a      	strpl	r2, [r3, #0]
   d5e6c:	4b12      	ldr	r3, [pc, #72]	; (d5eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5e6e:	681a      	ldr	r2, [r3, #0]
   d5e70:	07d0      	lsls	r0, r2, #31
   d5e72:	bf5c      	itt	pl
   d5e74:	2201      	movpl	r2, #1
   d5e76:	601a      	strpl	r2, [r3, #0]
   d5e78:	4b10      	ldr	r3, [pc, #64]	; (d5ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5e7a:	681a      	ldr	r2, [r3, #0]
   d5e7c:	07d1      	lsls	r1, r2, #31
   d5e7e:	bf5c      	itt	pl
   d5e80:	2201      	movpl	r2, #1
   d5e82:	601a      	strpl	r2, [r3, #0]
   d5e84:	4b0e      	ldr	r3, [pc, #56]	; (d5ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5e86:	681a      	ldr	r2, [r3, #0]
   d5e88:	07d2      	lsls	r2, r2, #31
   d5e8a:	bf5c      	itt	pl
   d5e8c:	2201      	movpl	r2, #1
   d5e8e:	601a      	strpl	r2, [r3, #0]
   d5e90:	4770      	bx	lr
   d5e92:	bf00      	nop
   d5e94:	2003e7cc 	.word	0x2003e7cc
   d5e98:	2003e7c8 	.word	0x2003e7c8
   d5e9c:	2003e7c4 	.word	0x2003e7c4
   d5ea0:	2003e7c0 	.word	0x2003e7c0
   d5ea4:	2003e7bc 	.word	0x2003e7bc
   d5ea8:	2003e7b8 	.word	0x2003e7b8
   d5eac:	2003e7b4 	.word	0x2003e7b4
   d5eb0:	2003e7b0 	.word	0x2003e7b0
   d5eb4:	2003e7ac 	.word	0x2003e7ac
   d5eb8:	2003e7a8 	.word	0x2003e7a8
   d5ebc:	2003e7a4 	.word	0x2003e7a4
   d5ec0:	2003e7a0 	.word	0x2003e7a0

000d5ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ec4:	4b18      	ldr	r3, [pc, #96]	; (d5f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5ec6:	681a      	ldr	r2, [r3, #0]
   d5ec8:	07d1      	lsls	r1, r2, #31
   d5eca:	bf5c      	itt	pl
   d5ecc:	2201      	movpl	r2, #1
   d5ece:	601a      	strpl	r2, [r3, #0]
   d5ed0:	4b16      	ldr	r3, [pc, #88]	; (d5f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5ed2:	681a      	ldr	r2, [r3, #0]
   d5ed4:	07d2      	lsls	r2, r2, #31
   d5ed6:	bf5c      	itt	pl
   d5ed8:	2201      	movpl	r2, #1
   d5eda:	601a      	strpl	r2, [r3, #0]
   d5edc:	4b14      	ldr	r3, [pc, #80]	; (d5f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5ede:	681a      	ldr	r2, [r3, #0]
   d5ee0:	07d0      	lsls	r0, r2, #31
   d5ee2:	bf5c      	itt	pl
   d5ee4:	2201      	movpl	r2, #1
   d5ee6:	601a      	strpl	r2, [r3, #0]
   d5ee8:	4b12      	ldr	r3, [pc, #72]	; (d5f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5eea:	681a      	ldr	r2, [r3, #0]
   d5eec:	07d1      	lsls	r1, r2, #31
   d5eee:	bf5c      	itt	pl
   d5ef0:	2201      	movpl	r2, #1
   d5ef2:	601a      	strpl	r2, [r3, #0]
   d5ef4:	4b10      	ldr	r3, [pc, #64]	; (d5f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5ef6:	681a      	ldr	r2, [r3, #0]
   d5ef8:	07d2      	lsls	r2, r2, #31
   d5efa:	bf5c      	itt	pl
   d5efc:	2201      	movpl	r2, #1
   d5efe:	601a      	strpl	r2, [r3, #0]
   d5f00:	4b0e      	ldr	r3, [pc, #56]	; (d5f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f02:	681a      	ldr	r2, [r3, #0]
   d5f04:	07d0      	lsls	r0, r2, #31
   d5f06:	bf5c      	itt	pl
   d5f08:	2201      	movpl	r2, #1
   d5f0a:	601a      	strpl	r2, [r3, #0]
   d5f0c:	4b0c      	ldr	r3, [pc, #48]	; (d5f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5f0e:	681a      	ldr	r2, [r3, #0]
   d5f10:	07d1      	lsls	r1, r2, #31
   d5f12:	bf5c      	itt	pl
   d5f14:	2201      	movpl	r2, #1
   d5f16:	601a      	strpl	r2, [r3, #0]
   d5f18:	4b0a      	ldr	r3, [pc, #40]	; (d5f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5f1a:	681a      	ldr	r2, [r3, #0]
   d5f1c:	07d2      	lsls	r2, r2, #31
   d5f1e:	bf5c      	itt	pl
   d5f20:	2201      	movpl	r2, #1
   d5f22:	601a      	strpl	r2, [r3, #0]
   d5f24:	4770      	bx	lr
   d5f26:	bf00      	nop
   d5f28:	2003e7ec 	.word	0x2003e7ec
   d5f2c:	2003e7e8 	.word	0x2003e7e8
   d5f30:	2003e7e4 	.word	0x2003e7e4
   d5f34:	2003e7e0 	.word	0x2003e7e0
   d5f38:	2003e7dc 	.word	0x2003e7dc
   d5f3c:	2003e7d8 	.word	0x2003e7d8
   d5f40:	2003e7d4 	.word	0x2003e7d4
   d5f44:	2003e7d0 	.word	0x2003e7d0

000d5f48 <__cxa_atexit>:
   d5f48:	b510      	push	{r4, lr}
   d5f4a:	4c05      	ldr	r4, [pc, #20]	; (d5f60 <__cxa_atexit+0x18>)
   d5f4c:	4613      	mov	r3, r2
   d5f4e:	b12c      	cbz	r4, d5f5c <__cxa_atexit+0x14>
   d5f50:	460a      	mov	r2, r1
   d5f52:	4601      	mov	r1, r0
   d5f54:	2002      	movs	r0, #2
   d5f56:	f3af 8000 	nop.w
   d5f5a:	bd10      	pop	{r4, pc}
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	bd10      	pop	{r4, pc}
   d5f60:	00000000 	.word	0x00000000

000d5f64 <memcpy>:
   d5f64:	b510      	push	{r4, lr}
   d5f66:	1e43      	subs	r3, r0, #1
   d5f68:	440a      	add	r2, r1
   d5f6a:	4291      	cmp	r1, r2
   d5f6c:	d004      	beq.n	d5f78 <memcpy+0x14>
   d5f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5f72:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5f76:	e7f8      	b.n	d5f6a <memcpy+0x6>
   d5f78:	bd10      	pop	{r4, pc}

000d5f7a <memset>:
   d5f7a:	4402      	add	r2, r0
   d5f7c:	4603      	mov	r3, r0
   d5f7e:	4293      	cmp	r3, r2
   d5f80:	d002      	beq.n	d5f88 <memset+0xe>
   d5f82:	f803 1b01 	strb.w	r1, [r3], #1
   d5f86:	e7fa      	b.n	d5f7e <memset+0x4>
   d5f88:	4770      	bx	lr
	...

000d5f8c <srand>:
   d5f8c:	b538      	push	{r3, r4, r5, lr}
   d5f8e:	4b12      	ldr	r3, [pc, #72]	; (d5fd8 <srand+0x4c>)
   d5f90:	681c      	ldr	r4, [r3, #0]
   d5f92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5f94:	4605      	mov	r5, r0
   d5f96:	b9d3      	cbnz	r3, d5fce <srand+0x42>
   d5f98:	2018      	movs	r0, #24
   d5f9a:	f7ff f851 	bl	d5040 <malloc>
   d5f9e:	f243 330e 	movw	r3, #13070	; 0x330e
   d5fa2:	63a0      	str	r0, [r4, #56]	; 0x38
   d5fa4:	8003      	strh	r3, [r0, #0]
   d5fa6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5faa:	8043      	strh	r3, [r0, #2]
   d5fac:	f241 2334 	movw	r3, #4660	; 0x1234
   d5fb0:	8083      	strh	r3, [r0, #4]
   d5fb2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5fb6:	80c3      	strh	r3, [r0, #6]
   d5fb8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5fbc:	8103      	strh	r3, [r0, #8]
   d5fbe:	2305      	movs	r3, #5
   d5fc0:	8143      	strh	r3, [r0, #10]
   d5fc2:	230b      	movs	r3, #11
   d5fc4:	8183      	strh	r3, [r0, #12]
   d5fc6:	2201      	movs	r2, #1
   d5fc8:	2300      	movs	r3, #0
   d5fca:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5fd0:	2200      	movs	r2, #0
   d5fd2:	611d      	str	r5, [r3, #16]
   d5fd4:	615a      	str	r2, [r3, #20]
   d5fd6:	bd38      	pop	{r3, r4, r5, pc}
   d5fd8:	2003dd38 	.word	0x2003dd38

000d5fdc <strlen>:
   d5fdc:	4603      	mov	r3, r0
   d5fde:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5fe2:	2a00      	cmp	r2, #0
   d5fe4:	d1fb      	bne.n	d5fde <strlen+0x2>
   d5fe6:	1a18      	subs	r0, r3, r0
   d5fe8:	3801      	subs	r0, #1
   d5fea:	4770      	bx	lr

000d5fec <dynalib_user>:
   d5fec:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5ffc:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
   d600c:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
   d601c:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
   d602c:	6f70 6577 2e72 7200 6465 003d 202c 7269     power..red=., ir
   d603c:	003d 202c 5248 003d 202c 5248 6176 696c     =., HR=., HRvali
   d604c:	3d64 2c00 5320 4f50 3d32 2c00 5320 4f50     d=., SPO2=., SPO
   d605c:	5632 6c61 6469 003d                         2Valid=.

000d6064 <_ZL14uch_spo2_table>:
   d6064:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   d6074:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   d6084:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   d6094:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   d60a4:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   d60b4:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   d60c4:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   d60d4:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   d60e4:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   d60f4:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   d6104:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   d6114:	0709 0506 0203 0001                         ........

000d611c <_ZTVN5spark13EthernetClassE>:
	...
   d6124:	50bf 000d 50b5 000d 50ab 000d 50a1 000d     .P...P...P...P..
   d6134:	5095 000d 5089 000d 507d 000d 5075 000d     .P...P..}P..uP..
   d6144:	506b 000d 5061 000d 5a2d 000d 6162 6475     kP..aP..-Z..baud
   d6154:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6164:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6174:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6184:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6194:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d61a4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d61b4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d61c4:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d61d4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d61e4:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d61f4:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d6204:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d6214:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d6224:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d6234:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d6244:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d6254:	7463 6d69 0065 0000                         ctime...

000d625c <_ZTV9IPAddress>:
	...
   d6264:	53d1 000d 53c1 000d 53c3 000d               .S...S...S..

000d6270 <_ZTV9USBSerial>:
	...
   d6278:	54a9 000d 54f9 000d 5507 000d 5181 000d     .T...T...U...Q..
   d6288:	54e5 000d 54ab 000d 54c1 000d 54f3 000d     .T...T...T...T..
   d6298:	54d7 000d 54a5 000d                         .T...T..

000d62a0 <_ZTV11USARTSerial>:
	...
   d62a8:	55b5 000d 5605 000d 5613 000d 5181 000d     .U...V...V...Q..
   d62b8:	55c9 000d 55eb 000d 55d7 000d 55ff 000d     .U...U...U...U..
   d62c8:	55b7 000d 55bb 000d                         .U...U..

000d62d0 <_ZTV7TwoWire>:
	...
   d62d8:	56b9 000d 5703 000d 56db 000d 56bb 000d     .V...W...V...V..
   d62e8:	56e3 000d 56eb 000d 56f3 000d 56fb 000d     .V...V...V...V..

000d62f8 <_ZTVN5spark9MeshClassE>:
	...
   d6300:	582d 000d 5823 000d 5819 000d 580f 000d     -X..#X...X...X..
   d6310:	5803 000d 57f7 000d 57eb 000d 57e3 000d     .X...W...W...W..
   d6320:	57d9 000d 57cf 000d 5a2d 000d               .W...W..-Z..

000d632c <_ZTVN5spark9WiFiClassE>:
	...
   d6334:	59a7 000d 599d 000d 5993 000d 5949 000d     .Y...Y...Y..IY..
   d6344:	5987 000d 597b 000d 596f 000d 5967 000d     .Y..{Y..oY..gY..
   d6354:	595d 000d 5953 000d 5a2d 000d               ]Y..SY..-Z..

000d6360 <_ZTVN5spark12NetworkClassE>:
	...
   d6368:	59c5 000d 59cf 000d 59d9 000d 59e3 000d     .Y...Y...Y...Y..
   d6378:	59ed 000d 59f9 000d 5a05 000d 5a11 000d     .Y...Y...Z...Z..
   d6388:	5a19 000d 5a23 000d 5a2d 000d               .Z..#Z..-Z..

000d6394 <_ZSt7nothrow>:
   d6394:	0000 0000                                   ....

000d6398 <__sf_fake_stdin>:
	...

000d63b8 <__sf_fake_stdout>:
	...

000d63d8 <__sf_fake_stderr>:
	...
   d63f8:	0043                                        C.

000d63fa <link_const_variable_data_end>:
	...

000d63fc <link_constructors_location>:
   d63fc:	000d4379 	.word	0x000d4379
   d6400:	000d438d 	.word	0x000d438d
   d6404:	000d48a3 	.word	0x000d48a3
   d6408:	000d4c85 	.word	0x000d4c85
   d640c:	000d50c9 	.word	0x000d50c9
   d6410:	000d5115 	.word	0x000d5115
   d6414:	000d5159 	.word	0x000d5159
   d6418:	000d524d 	.word	0x000d524d
   d641c:	000d525d 	.word	0x000d525d
   d6420:	000d5295 	.word	0x000d5295
   d6424:	000d58f9 	.word	0x000d58f9
   d6428:	000d59b1 	.word	0x000d59b1
   d642c:	000d5af9 	.word	0x000d5af9
   d6430:	000d5cb9 	.word	0x000d5cb9
   d6434:	000d5d3d 	.word	0x000d5d3d
   d6438:	000d5e01 	.word	0x000d5e01
   d643c:	000d5ec5 	.word	0x000d5ec5
