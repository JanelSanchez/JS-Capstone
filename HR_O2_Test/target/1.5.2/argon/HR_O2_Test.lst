
c:/Users/Janel/Documents/IoT/JS-Capstone/HR_O2_Test/target/1.5.2/argon/HR_O2_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002a14  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6a30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e2c8  000d6a34  0001e2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004bc  2003e334  2003e334  0002e334  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6aa0  000d6aa0  00026aa0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6ac8  000d6ac8  00026ac8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c5e88  00000000  00000000  00026acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f774  00000000  00000000  000ec954  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019ff7  00000000  00000000  000fc0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002158  00000000  00000000  001160bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003e30  00000000  00000000  00118217  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034ea8  00000000  00000000  0011c047  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000271c3  00000000  00000000  00150eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00102be2  00000000  00000000  001780b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c0e8  00000000  00000000  0027ac94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fabd 	bl	d65ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fac2 	bl	d65c2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2c8 	.word	0x2003e2c8
   d4048:	000d6a34 	.word	0x000d6a34
   d404c:	2003e334 	.word	0x2003e334
   d4050:	2003e334 	.word	0x2003e334
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f825 	bl	d50a8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6a30 	.word	0x000d6a30
   d4080:	000d69ec 	.word	0x000d69ec

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b814 	b.w	d40b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f855 	bl	d4138 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bfcb 	b.w	d502c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bdbb 	b.w	d4c10 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bdb9 	b.w	d4c10 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:

float beatsPerMinute;
int beatAvg;

void setup()
{
   d40b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
   d40b2:	f001 f8f9 	bl	d52a8 <_Z16_fetch_usbserialv>
   d40b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ba:	f001 f8e9 	bl	d5290 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
   d40be:	f001 f8f3 	bl	d52a8 <_Z16_fetch_usbserialv>
   d40c2:	4918      	ldr	r1, [pc, #96]	; (d4124 <setup+0x74>)
   d40c4:	f000 fe69 	bl	d4d9a <_ZN5Print7printlnEPKc>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
   d40c8:	f001 fbd2 	bl	d5870 <_Z19__fetch_global_Wirev>
   d40cc:	2357      	movs	r3, #87	; 0x57
   d40ce:	4601      	mov	r1, r0
   d40d0:	4a15      	ldr	r2, [pc, #84]	; (d4128 <setup+0x78>)
   d40d2:	4816      	ldr	r0, [pc, #88]	; (d412c <setup+0x7c>)
   d40d4:	f000 fa86 	bl	d45e4 <_ZN8MAX301055beginER7TwoWiremh>
   d40d8:	b928      	cbnz	r0, d40e6 <setup+0x36>
  {
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
   d40da:	f001 f8e5 	bl	d52a8 <_Z16_fetch_usbserialv>
   d40de:	4914      	ldr	r1, [pc, #80]	; (d4130 <setup+0x80>)
   d40e0:	f000 fe5b 	bl	d4d9a <_ZN5Print7printlnEPKc>
   d40e4:	e7fe      	b.n	d40e4 <setup+0x34>
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");
   d40e6:	f001 f8df 	bl	d52a8 <_Z16_fetch_usbserialv>
   d40ea:	4912      	ldr	r1, [pc, #72]	; (d4134 <setup+0x84>)
   d40ec:	f000 fe55 	bl	d4d9a <_ZN5Print7printlnEPKc>

  particleSensor.setup(); //Configure sensor with default settings
   d40f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d40f4:	f240 129b 	movw	r2, #411	; 0x19b
   d40f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d40fc:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d4100:	480a      	ldr	r0, [pc, #40]	; (d412c <setup+0x7c>)
   d4102:	2303      	movs	r3, #3
   d4104:	2204      	movs	r2, #4
   d4106:	211f      	movs	r1, #31
   d4108:	f000 fb2b 	bl	d4762 <_ZN8MAX301055setupEhhhiii>
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
   d410c:	210a      	movs	r1, #10
   d410e:	4807      	ldr	r0, [pc, #28]	; (d412c <setup+0x7c>)
   d4110:	f000 fa97 	bl	d4642 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
   d4114:	4805      	ldr	r0, [pc, #20]	; (d412c <setup+0x7c>)
   d4116:	2100      	movs	r1, #0
}
   d4118:	b005      	add	sp, #20
   d411a:	f85d eb04 	ldr.w	lr, [sp], #4
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");

  particleSensor.setup(); //Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
   d411e:	f000 ba9a 	b.w	d4656 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
   d4122:	bf00      	nop
   d4124:	000d6648 	.word	0x000d6648
   d4128:	00061a80 	.word	0x00061a80
   d412c:	2003e33c 	.word	0x2003e33c
   d4130:	000d6658 	.word	0x000d6658
   d4134:	000d668c 	.word	0x000d668c

000d4138 <loop>:
}

void loop()
{
   d4138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  long irValue = particleSensor.getIR();
   d413c:	4847      	ldr	r0, [pc, #284]	; (d425c <loop+0x124>)
   d413e:	4f48      	ldr	r7, [pc, #288]	; (d4260 <loop+0x128>)
   d4140:	4e48      	ldr	r6, [pc, #288]	; (d4264 <loop+0x12c>)
   d4142:	f000 fa37 	bl	d45b4 <_ZN8MAX301055getIREv>
   d4146:	4604      	mov	r4, r0
   d4148:	4605      	mov	r5, r0

  if (checkForBeat(irValue) == true)
   d414a:	f000 f8eb 	bl	d4324 <_Z12checkForBeatl>
   d414e:	2800      	cmp	r0, #0
   d4150:	d040      	beq.n	d41d4 <loop+0x9c>
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
   d4152:	f8df 9138 	ldr.w	r9, [pc, #312]	; d428c <loop+0x154>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4156:	f000 fbd7 	bl	d4908 <HAL_Timer_Get_Milli_Seconds>
   d415a:	f8d9 3000 	ldr.w	r3, [r9]
   d415e:	ebc3 0800 	rsb	r8, r3, r0
   d4162:	f000 fbd1 	bl	d4908 <HAL_Timer_Get_Milli_Seconds>
    lastBeat = millis();
   d4166:	f8c9 0000 	str.w	r0, [r9]

    beatsPerMinute = 60 / (delta / 1000.0);
   d416a:	4640      	mov	r0, r8
   d416c:	f001 fe62 	bl	d5e34 <__aeabi_i2d>
   d4170:	2200      	movs	r2, #0
   d4172:	4b3d      	ldr	r3, [pc, #244]	; (d4268 <loop+0x130>)
   d4174:	f001 ffee 	bl	d6154 <__aeabi_ddiv>
   d4178:	4602      	mov	r2, r0
   d417a:	460b      	mov	r3, r1
   d417c:	2000      	movs	r0, #0
   d417e:	493b      	ldr	r1, [pc, #236]	; (d426c <loop+0x134>)
   d4180:	f001 ffe8 	bl	d6154 <__aeabi_ddiv>
   d4184:	f002 f9b4 	bl	d64f0 <__aeabi_d2f>

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
   d4188:	ed9f 7a39 	vldr	s14, [pc, #228]	; d4270 <loop+0x138>
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
    lastBeat = millis();

    beatsPerMinute = 60 / (delta / 1000.0);
   d418c:	6038      	str	r0, [r7, #0]
   d418e:	ee07 0a90 	vmov	s15, r0

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
   d4192:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d419a:	d51b      	bpl.n	d41d4 <loop+0x9c>
   d419c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
   d41a0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d41a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41a8:	dd14      	ble.n	d41d4 <loop+0x9c>
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
   d41aa:	4832      	ldr	r0, [pc, #200]	; (d4274 <loop+0x13c>)
   d41ac:	4932      	ldr	r1, [pc, #200]	; (d4278 <loop+0x140>)
   d41ae:	7803      	ldrb	r3, [r0, #0]
   d41b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d41b4:	ee17 2a90 	vmov	r2, s15
   d41b8:	54ca      	strb	r2, [r1, r3]
      rateSpot %= RATE_SIZE; //Wrap variable
   d41ba:	3301      	adds	r3, #1
   d41bc:	f003 0303 	and.w	r3, r3, #3

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
   d41c0:	784a      	ldrb	r2, [r1, #1]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
   d41c2:	7003      	strb	r3, [r0, #0]

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
   d41c4:	780b      	ldrb	r3, [r1, #0]
   d41c6:	4413      	add	r3, r2
   d41c8:	788a      	ldrb	r2, [r1, #2]
   d41ca:	4413      	add	r3, r2
   d41cc:	78ca      	ldrb	r2, [r1, #3]
   d41ce:	4413      	add	r3, r2
   d41d0:	109b      	asrs	r3, r3, #2
   d41d2:	6033      	str	r3, [r6, #0]
    }
  }

  Serial.print("IR=");
   d41d4:	f001 f868 	bl	d52a8 <_Z16_fetch_usbserialv>
   d41d8:	4928      	ldr	r1, [pc, #160]	; (d427c <loop+0x144>)
   d41da:	f000 fdcb 	bl	d4d74 <_ZN5Print5printEPKc>
  Serial.print(irValue);
   d41de:	f001 f863 	bl	d52a8 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d41e2:	2c00      	cmp	r4, #0
   d41e4:	4680      	mov	r8, r0
   d41e6:	da03      	bge.n	d41f0 <loop+0xb8>
            t = print('-');
   d41e8:	212d      	movs	r1, #45	; 0x2d
   d41ea:	f000 fdc7 	bl	d4d7c <_ZN5Print5printEc>
            val = -n;
   d41ee:	4264      	negs	r4, r4
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d41f0:	220a      	movs	r2, #10
   d41f2:	4621      	mov	r1, r4
   d41f4:	4640      	mov	r0, r8
   d41f6:	f000 fdda 	bl	d4dae <_ZN5Print11printNumberEmh>
  Serial.print(", BPM=");
   d41fa:	f001 f855 	bl	d52a8 <_Z16_fetch_usbserialv>
   d41fe:	4920      	ldr	r1, [pc, #128]	; (d4280 <loop+0x148>)
   d4200:	f000 fdb8 	bl	d4d74 <_ZN5Print5printEPKc>
  Serial.print(beatsPerMinute);
   d4204:	f001 f850 	bl	d52a8 <_Z16_fetch_usbserialv>
   d4208:	ed97 0a00 	vldr	s0, [r7]
   d420c:	2102      	movs	r1, #2
   d420e:	f000 fead 	bl	d4f6c <_ZN5Print5printEfi>
  Serial.print(", Avg BPM=");
   d4212:	f001 f849 	bl	d52a8 <_Z16_fetch_usbserialv>
   d4216:	491b      	ldr	r1, [pc, #108]	; (d4284 <loop+0x14c>)
   d4218:	f000 fdac 	bl	d4d74 <_ZN5Print5printEPKc>
  Serial.print(beatAvg);
   d421c:	f001 f844 	bl	d52a8 <_Z16_fetch_usbserialv>
   d4220:	6834      	ldr	r4, [r6, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4222:	2c00      	cmp	r4, #0
   d4224:	4607      	mov	r7, r0
   d4226:	da04      	bge.n	d4232 <loop+0xfa>
            t = print('-');
   d4228:	212d      	movs	r1, #45	; 0x2d
   d422a:	f000 fda7 	bl	d4d7c <_ZN5Print5printEc>
            val = -n;
   d422e:	4261      	negs	r1, r4
   d4230:	e000      	b.n	d4234 <loop+0xfc>
        } else {
            val = n;
   d4232:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4234:	220a      	movs	r2, #10
   d4236:	4638      	mov	r0, r7
   d4238:	f000 fdb9 	bl	d4dae <_ZN5Print11printNumberEmh>

  if (irValue < 50000)
   d423c:	f24c 334f 	movw	r3, #49999	; 0xc34f
   d4240:	429d      	cmp	r5, r3
   d4242:	dc04      	bgt.n	d424e <loop+0x116>
    Serial.print(" No finger?");
   d4244:	f001 f830 	bl	d52a8 <_Z16_fetch_usbserialv>
   d4248:	490f      	ldr	r1, [pc, #60]	; (d4288 <loop+0x150>)
   d424a:	f000 fd93 	bl	d4d74 <_ZN5Print5printEPKc>

  Serial.println();
   d424e:	f001 f82b 	bl	d52a8 <_Z16_fetch_usbserialv>
   d4252:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.print(beatAvg);

  if (irValue < 50000)
    Serial.print(" No finger?");

  Serial.println();
   d4256:	f000 bd94 	b.w	d4d82 <_ZN5Print7printlnEv>
   d425a:	bf00      	nop
   d425c:	2003e33c 	.word	0x2003e33c
   d4260:	2003e380 	.word	0x2003e380
   d4264:	2003e338 	.word	0x2003e338
   d4268:	408f4000 	.word	0x408f4000
   d426c:	404e0000 	.word	0x404e0000
   d4270:	437f0000 	.word	0x437f0000
   d4274:	2003e384 	.word	0x2003e384
   d4278:	2003e37c 	.word	0x2003e37c
   d427c:	000d66c8 	.word	0x000d66c8
   d4280:	000d66cc 	.word	0x000d66cc
   d4284:	000d66d3 	.word	0x000d66d3
   d4288:	000d66de 	.word	0x000d66de
   d428c:	2003e378 	.word	0x2003e378

000d4290 <_GLOBAL__sub_I_particleSensor>:
   d4290:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4292:	f000 fb29 	bl	d48e8 <HAL_Pin_Map>
#include <Wire.h>
#include "MAX30105.h"

#include "heartRate.h"

MAX30105 particleSensor;
   d4296:	4802      	ldr	r0, [pc, #8]	; (d42a0 <_GLOBAL__sub_I_particleSensor+0x10>)

  if (irValue < 50000)
    Serial.print(" No finger?");

  Serial.println();
   d4298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include <Wire.h>
#include "MAX30105.h"

#include "heartRate.h"

MAX30105 particleSensor;
   d429c:	f000 b8ac 	b.w	d43f8 <_ZN8MAX30105C1Ev>
   d42a0:	2003e33c 	.word	0x2003e33c

000d42a4 <_Z18averageDCEstimatorPlt>:
}

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
  *p += ((((long) x << 15) - *p) >> 4);
   d42a4:	6803      	ldr	r3, [r0, #0]
   d42a6:	ebc3 31c1 	rsb	r1, r3, r1, lsl #15
   d42aa:	eb03 1321 	add.w	r3, r3, r1, asr #4
   d42ae:	6003      	str	r3, [r0, #0]
  return (*p >> 15);
}
   d42b0:	f343 30cf 	sbfx	r0, r3, #15, #16
   d42b4:	4770      	bx	lr
	...

000d42b8 <_Z16lowPassFIRFilters>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
   d42b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  cbuf[offset] = din;
   d42bc:	4d16      	ldr	r5, [pc, #88]	; (d4318 <_Z16lowPassFIRFilters+0x60>)
   d42be:	4917      	ldr	r1, [pc, #92]	; (d431c <_Z16lowPassFIRFilters+0x64>)
   d42c0:	782b      	ldrb	r3, [r5, #0]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   d42c2:	f8df c05c 	ldr.w	ip, [pc, #92]	; d4320 <_Z16lowPassFIRFilters+0x68>
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
   d42c6:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
   d42ca:	f1a3 020b 	sub.w	r2, r3, #11
   d42ce:	f002 021f 	and.w	r2, r2, #31
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   d42d2:	f1a3 0e16 	sub.w	lr, r3, #22
//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
   d42d6:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
   d42da:	2200      	movs	r2, #0
   d42dc:	0300      	lsls	r0, r0, #12

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   d42de:	eb0e 0402 	add.w	r4, lr, r2
   d42e2:	1a9e      	subs	r6, r3, r2
   d42e4:	f004 041f 	and.w	r4, r4, #31
   d42e8:	f006 061f 	and.w	r6, r6, #31
   d42ec:	f831 8014 	ldrh.w	r8, [r1, r4, lsl #1]
   d42f0:	f831 4016 	ldrh.w	r4, [r1, r6, lsl #1]
   d42f4:	f93c 7012 	ldrsh.w	r7, [ip, r2, lsl #1]
   d42f8:	4444      	add	r4, r8
   d42fa:	3201      	adds	r2, #1
   d42fc:	b224      	sxth	r4, r4
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
   d42fe:	2a0b      	cmp	r2, #11
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   d4300:	fb07 0004 	mla	r0, r7, r4, r0
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
   d4304:	d1eb      	bne.n	d42de <_Z16lowPassFIRFilters+0x26>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
  }

  offset++;
  offset %= 32; //Wrap condition
   d4306:	3301      	adds	r3, #1
   d4308:	f003 031f 	and.w	r3, r3, #31
   d430c:	702b      	strb	r3, [r5, #0]

  return(z >> 15);
}
   d430e:	f340 30cf 	sbfx	r0, r0, #15, #16
   d4312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4316:	bf00      	nop
   d4318:	2003e394 	.word	0x2003e394
   d431c:	2003e398 	.word	0x2003e398
   d4320:	000d66ea 	.word	0x000d66ea

000d4324 <_Z12checkForBeatl>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
   d4324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
   d4326:	4d29      	ldr	r5, [pc, #164]	; (d43cc <_Z12checkForBeatl+0xa8>)
   d4328:	4c29      	ldr	r4, [pc, #164]	; (d43d0 <_Z12checkForBeatl+0xac>)
   d432a:	882b      	ldrh	r3, [r5, #0]
   d432c:	8023      	strh	r3, [r4, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
   d432e:	b282      	uxth	r2, r0
   d4330:	4611      	mov	r1, r2
   d4332:	4828      	ldr	r0, [pc, #160]	; (d43d4 <_Z12checkForBeatl+0xb0>)
   d4334:	f7ff ffb6 	bl	d42a4 <_Z18averageDCEstimatorPlt>
   d4338:	4b27      	ldr	r3, [pc, #156]	; (d43d8 <_Z12checkForBeatl+0xb4>)
   d433a:	8018      	strh	r0, [r3, #0]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
   d433c:	1a10      	subs	r0, r2, r0
   d433e:	b200      	sxth	r0, r0
   d4340:	f7ff ffba 	bl	d42b8 <_Z16lowPassFIRFilters>

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
   d4344:	f9b4 2000 	ldrsh.w	r2, [r4]
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
   d4348:	8028      	strh	r0, [r5, #0]

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
   d434a:	2a00      	cmp	r2, #0
   d434c:	4c23      	ldr	r4, [pc, #140]	; (d43dc <_Z12checkForBeatl+0xb8>)
   d434e:	4924      	ldr	r1, [pc, #144]	; (d43e0 <_Z12checkForBeatl+0xbc>)
   d4350:	da1a      	bge.n	d4388 <_Z12checkForBeatl+0x64>
   d4352:	0403      	lsls	r3, r0, #16
   d4354:	d418      	bmi.n	d4388 <_Z12checkForBeatl+0x64>
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
   d4356:	4e23      	ldr	r6, [pc, #140]	; (d43e4 <_Z12checkForBeatl+0xc0>)
   d4358:	4d23      	ldr	r5, [pc, #140]	; (d43e8 <_Z12checkForBeatl+0xc4>)
   d435a:	f9b6 3000 	ldrsh.w	r3, [r6]
   d435e:	802b      	strh	r3, [r5, #0]
    IR_AC_Min = IR_AC_Signal_min;
   d4360:	4d22      	ldr	r5, [pc, #136]	; (d43ec <_Z12checkForBeatl+0xc8>)
   d4362:	4f23      	ldr	r7, [pc, #140]	; (d43f0 <_Z12checkForBeatl+0xcc>)
   d4364:	f9b5 5000 	ldrsh.w	r5, [r5]
   d4368:	803d      	strh	r5, [r7, #0]
    positiveEdge = 1;
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   d436a:	1b5b      	subs	r3, r3, r5
   d436c:	3b15      	subs	r3, #21
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
   d436e:	2701      	movs	r7, #1
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   d4370:	f240 35d2 	movw	r5, #978	; 0x3d2
   d4374:	42ab      	cmp	r3, r5
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
   d4376:	8027      	strh	r7, [r4, #0]
    negativeEdge = 0;
   d4378:	f04f 0700 	mov.w	r7, #0
   d437c:	800f      	strh	r7, [r1, #0]
    IR_AC_Signal_max = 0;
   d437e:	8037      	strh	r7, [r6, #0]

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   d4380:	bf8c      	ite	hi
   d4382:	2300      	movhi	r3, #0
   d4384:	2301      	movls	r3, #1
   d4386:	e000      	b.n	d438a <_Z12checkForBeatl+0x66>
//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;
   d4388:	2300      	movs	r3, #0
      beatDetected = true;
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
   d438a:	2a00      	cmp	r2, #0
   d438c:	dd07      	ble.n	d439e <_Z12checkForBeatl+0x7a>
   d438e:	2800      	cmp	r0, #0
   d4390:	dc05      	bgt.n	d439e <_Z12checkForBeatl+0x7a>
  {
    positiveEdge = 0;
    negativeEdge = 1;
   d4392:	2601      	movs	r6, #1
   d4394:	800e      	strh	r6, [r1, #0]
    IR_AC_Signal_min = 0;
   d4396:	4e15      	ldr	r6, [pc, #84]	; (d43ec <_Z12checkForBeatl+0xc8>)
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
  {
    positiveEdge = 0;
   d4398:	2500      	movs	r5, #0
   d439a:	8025      	strh	r5, [r4, #0]
    negativeEdge = 1;
    IR_AC_Signal_min = 0;
   d439c:	8035      	strh	r5, [r6, #0]
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
   d439e:	f9b4 4000 	ldrsh.w	r4, [r4]
   d43a2:	4290      	cmp	r0, r2
   d43a4:	bfd4      	ite	le
   d43a6:	2400      	movle	r4, #0
   d43a8:	f004 0401 	andgt.w	r4, r4, #1
   d43ac:	b10c      	cbz	r4, d43b2 <_Z12checkForBeatl+0x8e>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
   d43ae:	4c0d      	ldr	r4, [pc, #52]	; (d43e4 <_Z12checkForBeatl+0xc0>)
   d43b0:	8020      	strh	r0, [r4, #0]
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
   d43b2:	f9b1 1000 	ldrsh.w	r1, [r1]
   d43b6:	4290      	cmp	r0, r2
   d43b8:	bfac      	ite	ge
   d43ba:	2200      	movge	r2, #0
   d43bc:	f001 0201 	andlt.w	r2, r1, #1
   d43c0:	b10a      	cbz	r2, d43c6 <_Z12checkForBeatl+0xa2>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
   d43c2:	4a0a      	ldr	r2, [pc, #40]	; (d43ec <_Z12checkForBeatl+0xc8>)
   d43c4:	8010      	strh	r0, [r2, #0]
  }
  
  return(beatDetected);
}
   d43c6:	4618      	mov	r0, r3
   d43c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d43ca:	bf00      	nop
   d43cc:	2003e390 	.word	0x2003e390
   d43d0:	2003e392 	.word	0x2003e392
   d43d4:	2003e38c 	.word	0x2003e38c
   d43d8:	2003e3da 	.word	0x2003e3da
   d43dc:	2003e3d8 	.word	0x2003e3d8
   d43e0:	2003e396 	.word	0x2003e396
   d43e4:	2003e388 	.word	0x2003e388
   d43e8:	2003e2ca 	.word	0x2003e2ca
   d43ec:	2003e386 	.word	0x2003e386
   d43f0:	2003e2c8 	.word	0x2003e2c8

000d43f4 <_GLOBAL__sub_I_IR_AC_Max>:
   d43f4:	f000 ba78 	b.w	d48e8 <HAL_Pin_Map>

000d43f8 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
   d43f8:	4770      	bx	lr

000d43fa <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d43fa:	b570      	push	{r4, r5, r6, lr}
   d43fc:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d43fe:	6800      	ldr	r0, [r0, #0]
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d4400:	4616      	mov	r6, r2
   d4402:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   d4404:	f001 f86d 	bl	d54e2 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d4408:	6820      	ldr	r0, [r4, #0]
   d440a:	6803      	ldr	r3, [r0, #0]
   d440c:	4631      	mov	r1, r6
   d440e:	689b      	ldr	r3, [r3, #8]
   d4410:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   d4412:	2100      	movs	r1, #0
   d4414:	6820      	ldr	r0, [r4, #0]
   d4416:	f001 f86b 	bl	d54f0 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
   d441a:	2201      	movs	r2, #1
   d441c:	4629      	mov	r1, r5
   d441e:	6820      	ldr	r0, [r4, #0]
   d4420:	f001 f85c 	bl	d54dc <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d4424:	6820      	ldr	r0, [r4, #0]
   d4426:	6803      	ldr	r3, [r0, #0]
   d4428:	691b      	ldr	r3, [r3, #16]
   d442a:	4798      	blx	r3
   d442c:	b120      	cbz	r0, d4438 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
   d442e:	6820      	ldr	r0, [r4, #0]
   d4430:	6803      	ldr	r3, [r0, #0]
   d4432:	695b      	ldr	r3, [r3, #20]
   d4434:	4798      	blx	r3
   d4436:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
   d4438:	bd70      	pop	{r4, r5, r6, pc}

000d443a <_ZN8MAX3010515getWritePointerEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t MAX30105::getWritePointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   d443a:	2204      	movs	r2, #4
   d443c:	7901      	ldrb	r1, [r0, #4]
   d443e:	f7ff bfdc 	b.w	d43fa <_ZN8MAX3010513readRegister8Ehh>

000d4442 <_ZN8MAX3010514getReadPointerEv>:
}

//Read the FIFO Read Pointer
uint8_t MAX30105::getReadPointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   d4442:	2206      	movs	r2, #6
   d4444:	7901      	ldrb	r1, [r0, #4]
   d4446:	f7ff bfd8 	b.w	d43fa <_ZN8MAX3010513readRegister8Ehh>

000d444a <_ZN8MAX301055checkEv>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105::check(void)
{
   d444a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d444e:	4604      	mov	r4, r0
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
   d4450:	f7ff fff7 	bl	d4442 <_ZN8MAX3010514getReadPointerEv>
   d4454:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
   d4456:	4620      	mov	r0, r4
   d4458:	f7ff ffef 	bl	d443a <_ZN8MAX3010515getWritePointerEv>

  int numberOfSamples = 0;

  //Do we have new data?
  if (readPointer != writePointer)
   d445c:	4285      	cmp	r5, r0
   d445e:	f000 808e 	beq.w	d457e <_ZN8MAX301055checkEv+0x134>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d4462:	1b47      	subs	r7, r0, r5
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d4464:	f04f 0157 	mov.w	r1, #87	; 0x57
   d4468:	6820      	ldr	r0, [r4, #0]
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d446a:	7966      	ldrb	r6, [r4, #5]
  //Do we have new data?
  if (readPointer != writePointer)
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d446c:	bf48      	it	mi
   d446e:	3720      	addmi	r7, #32
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d4470:	f001 f83b 	bl	d54ea <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   d4474:	6820      	ldr	r0, [r4, #0]
   d4476:	6803      	ldr	r3, [r0, #0]
   d4478:	2107      	movs	r1, #7
   d447a:	689b      	ldr	r3, [r3, #8]
   d447c:	4798      	blx	r3
    _i2cPort->endTransmission();
   d447e:	6820      	ldr	r0, [r4, #0]
   d4480:	f001 f83a 	bl	d54f8 <_ZN7TwoWire15endTransmissionEv>
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d4484:	437e      	muls	r6, r7
   d4486:	eb06 0646 	add.w	r6, r6, r6, lsl #1
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d448a:	f04f 0820 	mov.w	r8, #32

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
   d448e:	f04f 0900 	mov.w	r9, #0
    _i2cPort->endTransmission();

    //We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
    //I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
    //Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
    while (bytesLeftToRead > 0)
   d4492:	2e00      	cmp	r6, #0
   d4494:	dd74      	ble.n	d4580 <_ZN8MAX301055checkEv+0x136>
    {
      int toGet = bytesLeftToRead;
      if (toGet > I2C_BUFFER_LENGTH)
   d4496:	2e20      	cmp	r6, #32
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d4498:	bfc8      	it	gt
   d449a:	7965      	ldrbgt	r5, [r4, #5]
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d449c:	6820      	ldr	r0, [r4, #0]
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d449e:	bfc9      	itett	gt
   d44a0:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
   d44a4:	4635      	movle	r5, r6
   d44a6:	fb98 f3f5 	sdivgt	r3, r8, r5
   d44aa:	435d      	mulgt	r5, r3
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d44ac:	462a      	mov	r2, r5
   d44ae:	2157      	movs	r1, #87	; 0x57
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
      }

      bytesLeftToRead -= toGet;
   d44b0:	1b76      	subs	r6, r6, r5

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d44b2:	f001 f813 	bl	d54dc <_ZN7TwoWire11requestFromEhj>
      
      while (toGet > 0)
   d44b6:	2d00      	cmp	r5, #0
   d44b8:	ddeb      	ble.n	d4492 <_ZN8MAX301055checkEv+0x48>
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
   d44ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
   d44be:	6820      	ldr	r0, [r4, #0]

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
   d44c0:	f88d 9007 	strb.w	r9, [sp, #7]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
   d44c4:	3301      	adds	r3, #1
   d44c6:	f003 0303 	and.w	r3, r3, #3
   d44ca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
   d44ce:	6803      	ldr	r3, [r0, #0]
   d44d0:	695b      	ldr	r3, [r3, #20]
   d44d2:	4798      	blx	r3
   d44d4:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   d44d8:	6820      	ldr	r0, [r4, #0]
   d44da:	6803      	ldr	r3, [r0, #0]
   d44dc:	695b      	ldr	r3, [r3, #20]
   d44de:	4798      	blx	r3
   d44e0:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   d44e4:	6820      	ldr	r0, [r4, #0]
   d44e6:	6803      	ldr	r3, [r0, #0]
   d44e8:	695b      	ldr	r3, [r3, #20]
   d44ea:	4798      	blx	r3
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d44ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
        temp[1] = _i2cPort->read();
        temp[0] = _i2cPort->read();
   d44f0:	f88d 0004 	strb.w	r0, [sp, #4]
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d44f4:	9a01      	ldr	r2, [sp, #4]
   d44f6:	3302      	adds	r3, #2
   d44f8:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d44fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

        if (activeLEDs > 1)
   d4500:	7963      	ldrb	r3, [r4, #5]
   d4502:	2b01      	cmp	r3, #1
   d4504:	d919      	bls.n	d453a <_ZN8MAX301055checkEv+0xf0>
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
   d4506:	6820      	ldr	r0, [r4, #0]
   d4508:	6803      	ldr	r3, [r0, #0]
   d450a:	695b      	ldr	r3, [r3, #20]
   d450c:	4798      	blx	r3
   d450e:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d4512:	6820      	ldr	r0, [r4, #0]
   d4514:	6803      	ldr	r3, [r0, #0]
   d4516:	695b      	ldr	r3, [r3, #20]
   d4518:	4798      	blx	r3
   d451a:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d451e:	6820      	ldr	r0, [r4, #0]
   d4520:	6803      	ldr	r3, [r0, #0]
   d4522:	695b      	ldr	r3, [r3, #20]
   d4524:	4798      	blx	r3
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
   d4526:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
          temp[1] = _i2cPort->read();
          temp[0] = _i2cPort->read();
   d452a:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
   d452e:	9a01      	ldr	r2, [sp, #4]
   d4530:	3306      	adds	r3, #6
   d4532:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d4536:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        if (activeLEDs > 2)
   d453a:	7963      	ldrb	r3, [r4, #5]
   d453c:	2b02      	cmp	r3, #2
   d453e:	d919      	bls.n	d4574 <_ZN8MAX301055checkEv+0x12a>
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
   d4540:	6820      	ldr	r0, [r4, #0]
   d4542:	6803      	ldr	r3, [r0, #0]
   d4544:	695b      	ldr	r3, [r3, #20]
   d4546:	4798      	blx	r3
   d4548:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d454c:	6820      	ldr	r0, [r4, #0]
   d454e:	6803      	ldr	r3, [r0, #0]
   d4550:	695b      	ldr	r3, [r3, #20]
   d4552:	4798      	blx	r3
   d4554:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d4558:	6820      	ldr	r0, [r4, #0]
   d455a:	6803      	ldr	r3, [r0, #0]
   d455c:	695b      	ldr	r3, [r3, #20]
   d455e:	4798      	blx	r3
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
   d4560:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
          temp[1] = _i2cPort->read();
          temp[0] = _i2cPort->read();
   d4564:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
   d4568:	9a01      	ldr	r2, [sp, #4]
   d456a:	330a      	adds	r3, #10
   d456c:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d4570:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        toGet -= activeLEDs * 3;
   d4574:	7963      	ldrb	r3, [r4, #5]
   d4576:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d457a:	441d      	add	r5, r3
      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
   d457c:	e79b      	b.n	d44b6 <_ZN8MAX301055checkEv+0x6c>
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
  byte writePointer = getWritePointer();

  int numberOfSamples = 0;
   d457e:	2700      	movs	r7, #0
    } //End while (bytesLeftToRead > 0)

  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
}
   d4580:	b2b8      	uxth	r0, r7
   d4582:	b003      	add	sp, #12
   d4584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4588 <_ZN8MAX301059safeCheckEh>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
   d4588:	b570      	push	{r4, r5, r6, lr}
   d458a:	4605      	mov	r5, r0
   d458c:	460e      	mov	r6, r1
   d458e:	f000 f9bb 	bl	d4908 <HAL_Timer_Get_Milli_Seconds>
   d4592:	4604      	mov	r4, r0
   d4594:	f000 f9b8 	bl	d4908 <HAL_Timer_Get_Milli_Seconds>
  uint32_t markTime = millis();
  
  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
   d4598:	1b00      	subs	r0, r0, r4
   d459a:	42b0      	cmp	r0, r6
   d459c:	d808      	bhi.n	d45b0 <_ZN8MAX301059safeCheckEh+0x28>

	if(check() == true) //We found new data!
   d459e:	4628      	mov	r0, r5
   d45a0:	f7ff ff53 	bl	d444a <_ZN8MAX301055checkEv>
   d45a4:	2801      	cmp	r0, #1
   d45a6:	d004      	beq.n	d45b2 <_ZN8MAX301059safeCheckEh+0x2a>
	  return(true);

	delay(1);
   d45a8:	2001      	movs	r0, #1
   d45aa:	f000 fd01 	bl	d4fb0 <delay>
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
  uint32_t markTime = millis();
  
  while(1)
   d45ae:	e7f1      	b.n	d4594 <_ZN8MAX301059safeCheckEh+0xc>
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
   d45b0:	2000      	movs	r0, #0
	if(check() == true) //We found new data!
	  return(true);

	delay(1);
  }
}
   d45b2:	bd70      	pop	{r4, r5, r6, pc}

000d45b4 <_ZN8MAX301055getIREv>:
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
   d45b4:	b510      	push	{r4, lr}
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d45b6:	21fa      	movs	r1, #250	; 0xfa
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
   d45b8:	4604      	mov	r4, r0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d45ba:	f7ff ffe5 	bl	d4588 <_ZN8MAX301059safeCheckEh>
   d45be:	b120      	cbz	r0, d45ca <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   d45c0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d45c4:	3306      	adds	r3, #6
   d45c6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  else
    return(0); //Sensor failed to find new data
}
   d45ca:	bd10      	pop	{r4, pc}

000d45cc <_ZN8MAX3010510readPartIDEv>:

//
// Device ID and Revision
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
   d45cc:	22ff      	movs	r2, #255	; 0xff
   d45ce:	7901      	ldrb	r1, [r0, #4]
   d45d0:	f7ff bf13 	b.w	d43fa <_ZN8MAX3010513readRegister8Ehh>

000d45d4 <_ZN8MAX3010514readRevisionIDEv>:
}

void MAX30105::readRevisionID() {
   d45d4:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d45d6:	22fe      	movs	r2, #254	; 0xfe
   d45d8:	7901      	ldrb	r1, [r0, #4]
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
}

void MAX30105::readRevisionID() {
   d45da:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d45dc:	f7ff ff0d 	bl	d43fa <_ZN8MAX3010513readRegister8Ehh>
   d45e0:	71a0      	strb	r0, [r4, #6]
   d45e2:	bd10      	pop	{r4, pc}

000d45e4 <_ZN8MAX301055beginER7TwoWiremh>:

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d45e4:	b570      	push	{r4, r5, r6, lr}
   d45e6:	4604      	mov	r4, r0
   d45e8:	4616      	mov	r6, r2
   d45ea:	4608      	mov	r0, r1

  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d45ec:	6021      	str	r1, [r4, #0]

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d45ee:	461d      	mov	r5, r3

  _i2cPort = &wirePort; //Grab which port the user wants us to use

  _i2cPort->begin();
   d45f0:	f000 ff40 	bl	d5474 <_ZN7TwoWire5beginEv>

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d45f4:	4631      	mov	r1, r6
   d45f6:	6820      	ldr	r0, [r4, #0]
   d45f8:	f000 ff38 	bl	d546c <_ZN7TwoWire8setSpeedEm>
  _i2cPort->setClock(i2cSpeed);

  _i2caddr = i2caddr;
   d45fc:	7125      	strb	r5, [r4, #4]

  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
   d45fe:	4620      	mov	r0, r4
   d4600:	f7ff ffe4 	bl	d45cc <_ZN8MAX3010510readPartIDEv>
   d4604:	2815      	cmp	r0, #21
   d4606:	d104      	bne.n	d4612 <_ZN8MAX301055beginER7TwoWiremh+0x2e>
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
  }

  // Populate revision ID
  readRevisionID();
   d4608:	4620      	mov	r0, r4
   d460a:	f7ff ffe3 	bl	d45d4 <_ZN8MAX3010514readRevisionIDEv>
  
  return true;
   d460e:	2001      	movs	r0, #1
   d4610:	bd70      	pop	{r4, r5, r6, pc}
  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
   d4612:	2000      	movs	r0, #0

  // Populate revision ID
  readRevisionID();
  
  return true;
}
   d4614:	bd70      	pop	{r4, r5, r6, pc}

000d4616 <_ZN8MAX3010514writeRegister8Ehhh>:

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d4616:	b570      	push	{r4, r5, r6, lr}
   d4618:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d461a:	6800      	ldr	r0, [r0, #0]

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d461c:	4616      	mov	r6, r2
   d461e:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   d4620:	f000 ff5f 	bl	d54e2 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d4624:	6820      	ldr	r0, [r4, #0]
   d4626:	6803      	ldr	r3, [r0, #0]
   d4628:	4631      	mov	r1, r6
   d462a:	689b      	ldr	r3, [r3, #8]
   d462c:	4798      	blx	r3
  _i2cPort->write(value);
   d462e:	6820      	ldr	r0, [r4, #0]
   d4630:	6803      	ldr	r3, [r0, #0]
   d4632:	4629      	mov	r1, r5
   d4634:	689a      	ldr	r2, [r3, #8]
   d4636:	4790      	blx	r2
  _i2cPort->endTransmission();
   d4638:	6820      	ldr	r0, [r4, #0]
}
   d463a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
  _i2cPort->beginTransmission(address);
  _i2cPort->write(reg);
  _i2cPort->write(value);
  _i2cPort->endTransmission();
   d463e:	f000 bf5b 	b.w	d54f8 <_ZN7TwoWire15endTransmissionEv>

000d4642 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
}

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   d4642:	460b      	mov	r3, r1
   d4644:	220c      	movs	r2, #12
   d4646:	7901      	ldrb	r1, [r0, #4]
   d4648:	f7ff bfe5 	b.w	d4616 <_ZN8MAX3010514writeRegister8Ehhh>

000d464c <_ZN8MAX3010519setPulseAmplitudeIREh>:
}

void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   d464c:	460b      	mov	r3, r1
   d464e:	220d      	movs	r2, #13
   d4650:	7901      	ldrb	r1, [r0, #4]
   d4652:	f7ff bfe0 	b.w	d4616 <_ZN8MAX3010514writeRegister8Ehhh>

000d4656 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
}

void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   d4656:	460b      	mov	r3, r1
   d4658:	220e      	movs	r2, #14
   d465a:	7901      	ldrb	r1, [r0, #4]
   d465c:	f7ff bfdb 	b.w	d4616 <_ZN8MAX3010514writeRegister8Ehhh>

000d4660 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
}

void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   d4660:	460b      	mov	r3, r1
   d4662:	2210      	movs	r2, #16
   d4664:	7901      	ldrb	r1, [r0, #4]
   d4666:	f7ff bfd6 	b.w	d4616 <_ZN8MAX3010514writeRegister8Ehhh>

000d466a <_ZN8MAX301059clearFIFOEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
}

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
   d466a:	b510      	push	{r4, lr}
   d466c:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   d466e:	7901      	ldrb	r1, [r0, #4]
   d4670:	2300      	movs	r3, #0
   d4672:	2204      	movs	r2, #4
   d4674:	f7ff ffcf 	bl	d4616 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   d4678:	7921      	ldrb	r1, [r4, #4]
   d467a:	4620      	mov	r0, r4
   d467c:	2300      	movs	r3, #0
   d467e:	2205      	movs	r2, #5
   d4680:	f7ff ffc9 	bl	d4616 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d4684:	7921      	ldrb	r1, [r4, #4]
   d4686:	4620      	mov	r0, r4
   d4688:	2300      	movs	r3, #0
   d468a:	2206      	movs	r2, #6
}
   d468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d4690:	f7ff bfc1 	b.w	d4616 <_ZN8MAX3010514writeRegister8Ehhh>

000d4694 <_ZN8MAX301057bitMaskEhhh>:
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
   d4694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4698:	460e      	mov	r6, r1
   d469a:	4615      	mov	r5, r2
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d469c:	460a      	mov	r2, r1
   d469e:	7901      	ldrb	r1, [r0, #4]
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
   d46a0:	4604      	mov	r4, r0
   d46a2:	461f      	mov	r7, r3
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d46a4:	f7ff fea9 	bl	d43fa <_ZN8MAX3010513readRegister8Ehh>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d46a8:	4028      	ands	r0, r5
   d46aa:	ea47 0300 	orr.w	r3, r7, r0
   d46ae:	4632      	mov	r2, r6
   d46b0:	7921      	ldrb	r1, [r4, #4]
   d46b2:	4620      	mov	r0, r4
}
   d46b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d46b8:	f7ff bfad 	b.w	d4616 <_ZN8MAX3010514writeRegister8Ehhh>

000d46bc <_ZN8MAX301059softResetEv>:
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
   d46bc:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d46be:	22bf      	movs	r2, #191	; 0xbf
   d46c0:	2340      	movs	r3, #64	; 0x40
   d46c2:	2109      	movs	r1, #9
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
   d46c4:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d46c6:	f7ff ffe5 	bl	d4694 <_ZN8MAX301057bitMaskEhhh>
   d46ca:	f000 f91d 	bl	d4908 <HAL_Timer_Get_Milli_Seconds>
   d46ce:	4605      	mov	r5, r0
   d46d0:	f000 f91a 	bl	d4908 <HAL_Timer_Get_Milli_Seconds>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
   d46d4:	1b40      	subs	r0, r0, r5
   d46d6:	2863      	cmp	r0, #99	; 0x63
   d46d8:	d80a      	bhi.n	d46f0 <_ZN8MAX301059softResetEv+0x34>
  {
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   d46da:	2209      	movs	r2, #9
   d46dc:	7921      	ldrb	r1, [r4, #4]
   d46de:	4620      	mov	r0, r4
   d46e0:	f7ff fe8b 	bl	d43fa <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   d46e4:	0643      	lsls	r3, r0, #25
   d46e6:	d503      	bpl.n	d46f0 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   d46e8:	2001      	movs	r0, #1
   d46ea:	f000 fc61 	bl	d4fb0 <delay>
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
   d46ee:	e7ef      	b.n	d46d0 <_ZN8MAX301059softResetEv+0x14>
   d46f0:	bd38      	pop	{r3, r4, r5, pc}

000d46f2 <_ZN8MAX3010510setLEDModeEh>:
}

void MAX30105::setLEDMode(uint8_t mode) {
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   d46f2:	460b      	mov	r3, r1
   d46f4:	22f8      	movs	r2, #248	; 0xf8
   d46f6:	2109      	movs	r1, #9
   d46f8:	f7ff bfcc 	b.w	d4694 <_ZN8MAX301057bitMaskEhhh>

000d46fc <_ZN8MAX3010511setADCRangeEh>:
}

void MAX30105::setADCRange(uint8_t adcRange) {
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   d46fc:	460b      	mov	r3, r1
   d46fe:	229f      	movs	r2, #159	; 0x9f
   d4700:	210a      	movs	r1, #10
   d4702:	f7ff bfc7 	b.w	d4694 <_ZN8MAX301057bitMaskEhhh>

000d4706 <_ZN8MAX3010513setSampleRateEh>:
}

void MAX30105::setSampleRate(uint8_t sampleRate) {
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   d4706:	460b      	mov	r3, r1
   d4708:	22e3      	movs	r2, #227	; 0xe3
   d470a:	210a      	movs	r1, #10
   d470c:	f7ff bfc2 	b.w	d4694 <_ZN8MAX301057bitMaskEhhh>

000d4710 <_ZN8MAX3010513setPulseWidthEh>:
}

void MAX30105::setPulseWidth(uint8_t pulseWidth) {
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   d4710:	460b      	mov	r3, r1
   d4712:	22fc      	movs	r2, #252	; 0xfc
   d4714:	210a      	movs	r1, #10
   d4716:	f7ff bfbd 	b.w	d4694 <_ZN8MAX301057bitMaskEhhh>

000d471a <_ZN8MAX3010514setFIFOAverageEh>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   d471a:	460b      	mov	r3, r1
   d471c:	221f      	movs	r2, #31
   d471e:	2108      	movs	r1, #8
   d4720:	f7ff bfb8 	b.w	d4694 <_ZN8MAX301057bitMaskEhhh>

000d4724 <_ZN8MAX3010518enableFIFORolloverEv>:
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
}

//Enable roll over if FIFO over flows
void MAX30105::enableFIFORollover(void) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   d4724:	2310      	movs	r3, #16
   d4726:	22ef      	movs	r2, #239	; 0xef
   d4728:	2108      	movs	r1, #8
   d472a:	f7ff bfb3 	b.w	d4694 <_ZN8MAX301057bitMaskEhhh>

000d472e <_ZN8MAX3010510enableSlotEhh>:
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {

  uint8_t originalContents;

  switch (slotNumber) {
   d472e:	3901      	subs	r1, #1

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   d4730:	4613      	mov	r3, r2

  uint8_t originalContents;

  switch (slotNumber) {
   d4732:	2903      	cmp	r1, #3
   d4734:	d814      	bhi.n	d4760 <_ZN8MAX3010510enableSlotEhh+0x32>
   d4736:	e8df f001 	tbb	[pc, r1]
   d473a:	0402      	.short	0x0402
   d473c:	0c0a      	.short	0x0c0a
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   d473e:	22f8      	movs	r2, #248	; 0xf8
   d4740:	e003      	b.n	d474a <_ZN8MAX3010510enableSlotEhh+0x1c>
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d4742:	011b      	lsls	r3, r3, #4
   d4744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d4748:	228f      	movs	r2, #143	; 0x8f
   d474a:	2111      	movs	r1, #17
   d474c:	e006      	b.n	d475c <_ZN8MAX3010510enableSlotEhh+0x2e>
      break;
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   d474e:	22f8      	movs	r2, #248	; 0xf8
   d4750:	e003      	b.n	d475a <_ZN8MAX3010510enableSlotEhh+0x2c>
      break;
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   d4752:	011b      	lsls	r3, r3, #4
   d4754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d4758:	228f      	movs	r2, #143	; 0x8f
   d475a:	2112      	movs	r1, #18
   d475c:	f7ff bf9a 	b.w	d4694 <_ZN8MAX301057bitMaskEhhh>
   d4760:	4770      	bx	lr

000d4762 <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   d4762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4766:	4616      	mov	r6, r2
   d4768:	ad08      	add	r5, sp, #32
   d476a:	4604      	mov	r4, r0
   d476c:	4688      	mov	r8, r1
   d476e:	461f      	mov	r7, r3
   d4770:	e895 0620 	ldmia.w	r5, {r5, r9, sl}
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   d4774:	f7ff ffa2 	bl	d46bc <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   d4778:	2e01      	cmp	r6, #1
   d477a:	d101      	bne.n	d4780 <_ZN8MAX301055setupEhhhiii+0x1e>
   d477c:	2100      	movs	r1, #0
   d477e:	e012      	b.n	d47a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   d4780:	2e02      	cmp	r6, #2
   d4782:	d101      	bne.n	d4788 <_ZN8MAX301055setupEhhhiii+0x26>
   d4784:	2120      	movs	r1, #32
   d4786:	e00e      	b.n	d47a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   d4788:	2e04      	cmp	r6, #4
   d478a:	d101      	bne.n	d4790 <_ZN8MAX301055setupEhhhiii+0x2e>
   d478c:	2140      	movs	r1, #64	; 0x40
   d478e:	e00a      	b.n	d47a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   d4790:	2e08      	cmp	r6, #8
   d4792:	d101      	bne.n	d4798 <_ZN8MAX301055setupEhhhiii+0x36>
   d4794:	2160      	movs	r1, #96	; 0x60
   d4796:	e006      	b.n	d47a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   d4798:	2e10      	cmp	r6, #16
   d479a:	d101      	bne.n	d47a0 <_ZN8MAX301055setupEhhhiii+0x3e>
   d479c:	2180      	movs	r1, #128	; 0x80
   d479e:	e002      	b.n	d47a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   d47a0:	2e20      	cmp	r6, #32
   d47a2:	d1f3      	bne.n	d478c <_ZN8MAX301055setupEhhhiii+0x2a>
   d47a4:	21a0      	movs	r1, #160	; 0xa0
   d47a6:	4620      	mov	r0, r4
   d47a8:	f7ff ffb7 	bl	d471a <_ZN8MAX3010514setFIFOAverageEh>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   d47ac:	4620      	mov	r0, r4
   d47ae:	f7ff ffb9 	bl	d4724 <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   d47b2:	2f03      	cmp	r7, #3
   d47b4:	d101      	bne.n	d47ba <_ZN8MAX301055setupEhhhiii+0x58>
   d47b6:	2107      	movs	r1, #7
   d47b8:	e003      	b.n	d47c2 <_ZN8MAX301055setupEhhhiii+0x60>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   d47ba:	2f02      	cmp	r7, #2
   d47bc:	bf0c      	ite	eq
   d47be:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   d47c0:	2102      	movne	r1, #2
   d47c2:	4620      	mov	r0, r4
   d47c4:	f7ff ff95 	bl	d46f2 <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d47c8:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   d47cc:	7167      	strb	r7, [r4, #5]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d47ce:	da01      	bge.n	d47d4 <_ZN8MAX301055setupEhhhiii+0x72>
   d47d0:	2100      	movs	r1, #0
   d47d2:	e00b      	b.n	d47ec <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   d47d4:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   d47d8:	da01      	bge.n	d47de <_ZN8MAX301055setupEhhhiii+0x7c>
   d47da:	2120      	movs	r1, #32
   d47dc:	e006      	b.n	d47ec <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   d47de:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   d47e2:	da01      	bge.n	d47e8 <_ZN8MAX301055setupEhhhiii+0x86>
   d47e4:	2140      	movs	r1, #64	; 0x40
   d47e6:	e001      	b.n	d47ec <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   d47e8:	d1f2      	bne.n	d47d0 <_ZN8MAX301055setupEhhhiii+0x6e>
   d47ea:	2160      	movs	r1, #96	; 0x60
   d47ec:	4620      	mov	r0, r4
   d47ee:	f7ff ff85 	bl	d46fc <_ZN8MAX3010511setADCRangeEh>
  else setADCRange(MAX30105_ADCRANGE_2048);

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   d47f2:	2d63      	cmp	r5, #99	; 0x63
   d47f4:	dc01      	bgt.n	d47fa <_ZN8MAX301055setupEhhhiii+0x98>
   d47f6:	2100      	movs	r1, #0
   d47f8:	e01e      	b.n	d4838 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   d47fa:	2dc7      	cmp	r5, #199	; 0xc7
   d47fc:	dc01      	bgt.n	d4802 <_ZN8MAX301055setupEhhhiii+0xa0>
   d47fe:	2104      	movs	r1, #4
   d4800:	e01a      	b.n	d4838 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   d4802:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   d4806:	da01      	bge.n	d480c <_ZN8MAX301055setupEhhhiii+0xaa>
   d4808:	2108      	movs	r1, #8
   d480a:	e015      	b.n	d4838 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   d480c:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
   d4810:	da01      	bge.n	d4816 <_ZN8MAX301055setupEhhhiii+0xb4>
   d4812:	210c      	movs	r1, #12
   d4814:	e010      	b.n	d4838 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   d4816:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   d481a:	da01      	bge.n	d4820 <_ZN8MAX301055setupEhhhiii+0xbe>
   d481c:	2110      	movs	r1, #16
   d481e:	e00b      	b.n	d4838 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   d4820:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
   d4824:	da01      	bge.n	d482a <_ZN8MAX301055setupEhhhiii+0xc8>
   d4826:	2114      	movs	r1, #20
   d4828:	e006      	b.n	d4838 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   d482a:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
   d482e:	da01      	bge.n	d4834 <_ZN8MAX301055setupEhhhiii+0xd2>
   d4830:	2118      	movs	r1, #24
   d4832:	e001      	b.n	d4838 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   d4834:	d1df      	bne.n	d47f6 <_ZN8MAX301055setupEhhhiii+0x94>
   d4836:	211c      	movs	r1, #28
   d4838:	4620      	mov	r0, r4
   d483a:	f7ff ff64 	bl	d4706 <_ZN8MAX3010513setSampleRateEh>
  else setSampleRate(MAX30105_SAMPLERATE_50);

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   d483e:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   d4842:	dc01      	bgt.n	d4848 <_ZN8MAX301055setupEhhhiii+0xe6>
   d4844:	2100      	movs	r1, #0
   d4846:	e00e      	b.n	d4866 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   d4848:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   d484c:	dc01      	bgt.n	d4852 <_ZN8MAX301055setupEhhhiii+0xf0>
   d484e:	2101      	movs	r1, #1
   d4850:	e009      	b.n	d4866 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   d4852:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   d4856:	dc01      	bgt.n	d485c <_ZN8MAX301055setupEhhhiii+0xfa>
   d4858:	2102      	movs	r1, #2
   d485a:	e004      	b.n	d4866 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   d485c:	f240 139b 	movw	r3, #411	; 0x19b
   d4860:	4599      	cmp	r9, r3
   d4862:	d1ef      	bne.n	d4844 <_ZN8MAX301055setupEhhhiii+0xe2>
   d4864:	2103      	movs	r1, #3
   d4866:	4620      	mov	r0, r4
   d4868:	f7ff ff52 	bl	d4710 <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
   d486c:	4641      	mov	r1, r8
   d486e:	4620      	mov	r0, r4
   d4870:	f7ff fee7 	bl	d4642 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   d4874:	4641      	mov	r1, r8
   d4876:	4620      	mov	r0, r4
   d4878:	f7ff fee8 	bl	d464c <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   d487c:	4641      	mov	r1, r8
   d487e:	4620      	mov	r0, r4
   d4880:	f7ff fee9 	bl	d4656 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   d4884:	4641      	mov	r1, r8
   d4886:	4620      	mov	r0, r4
   d4888:	f7ff feea 	bl	d4660 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
   d488c:	2201      	movs	r2, #1
   d488e:	4611      	mov	r1, r2
   d4890:	4620      	mov	r0, r4
   d4892:	f7ff ff4c 	bl	d472e <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   d4896:	2f01      	cmp	r7, #1
   d4898:	d90c      	bls.n	d48b4 <_ZN8MAX301055setupEhhhiii+0x152>
  switch (slotNumber) {
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d489a:	2320      	movs	r3, #32
   d489c:	228f      	movs	r2, #143	; 0x8f
   d489e:	2111      	movs	r1, #17
   d48a0:	4620      	mov	r0, r4
   d48a2:	f7ff fef7 	bl	d4694 <_ZN8MAX301057bitMaskEhhh>

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   d48a6:	2f02      	cmp	r7, #2
   d48a8:	d004      	beq.n	d48b4 <_ZN8MAX301055setupEhhhiii+0x152>
   d48aa:	2203      	movs	r2, #3
   d48ac:	4611      	mov	r1, r2
   d48ae:	4620      	mov	r0, r4
   d48b0:	f7ff ff3d 	bl	d472e <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d48b4:	4620      	mov	r0, r4
}
   d48b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d48ba:	f7ff bed6 	b.w	d466a <_ZN8MAX301059clearFIFOEv>

000d48be <_GLOBAL__sub_I__ZN8MAX30105C2Ev>:
   d48be:	f000 b813 	b.w	d48e8 <HAL_Pin_Map>

000d48c2 <_GLOBAL__sub_I__Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
   d48c2:	f000 b811 	b.w	d48e8 <HAL_Pin_Map>
	...

000d48c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <netdb_freeaddrinfo+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	689b      	ldr	r3, [r3, #8]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030268 	.word	0x00030268

000d48d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <netdb_getaddrinfo+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	68db      	ldr	r3, [r3, #12]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030268 	.word	0x00030268

000d48e8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_Pin_Map+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	681b      	ldr	r3, [r3, #0]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	0003022c 	.word	0x0003022c

000d48f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_RNG_GetRandomNumber+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	685b      	ldr	r3, [r3, #4]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030218 	.word	0x00030218

000d4908 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	695b      	ldr	r3, [r3, #20]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030218 	.word	0x00030218

000d4918 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <os_thread_is_current+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	689b      	ldr	r3, [r3, #8]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030248 	.word	0x00030248

000d4928 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <os_thread_join+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	691b      	ldr	r3, [r3, #16]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030248 	.word	0x00030248

000d4938 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <os_thread_cleanup+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	695b      	ldr	r3, [r3, #20]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030248 	.word	0x00030248

000d4948 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <os_mutex_recursive_create+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030248 	.word	0x00030248

000d4958 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <os_mutex_recursive_destroy+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030248 	.word	0x00030248

000d4968 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <inet_inet_ntop+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	695b      	ldr	r3, [r3, #20]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030264 	.word	0x00030264

000d4978 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <HAL_USART_Init+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	681b      	ldr	r3, [r3, #0]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003023c 	.word	0x0003023c

000d4988 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_USART_Write_Data+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	68db      	ldr	r3, [r3, #12]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003023c 	.word	0x0003023c

000d4998 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_USART_Available_Data+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	691b      	ldr	r3, [r3, #16]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003023c 	.word	0x0003023c

000d49a8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <HAL_USART_Read_Data+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	695b      	ldr	r3, [r3, #20]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003023c 	.word	0x0003023c

000d49b8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <HAL_USART_Peek_Data+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	699b      	ldr	r3, [r3, #24]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003023c 	.word	0x0003023c

000d49c8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <HAL_USART_Flush_Data+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	69db      	ldr	r3, [r3, #28]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003023c 	.word	0x0003023c

000d49d8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <HAL_USART_Available_Data_For_Write+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003023c 	.word	0x0003023c

000d49e8 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <HAL_I2C_Set_Speed+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	681b      	ldr	r3, [r3, #0]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030228 	.word	0x00030228

000d49f8 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <HAL_I2C_Begin+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	68db      	ldr	r3, [r3, #12]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030228 	.word	0x00030228

000d4a08 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <HAL_I2C_Begin_Transmission+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	699b      	ldr	r3, [r3, #24]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030228 	.word	0x00030228

000d4a18 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <HAL_I2C_End_Transmission+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	69db      	ldr	r3, [r3, #28]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030228 	.word	0x00030228

000d4a28 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <HAL_I2C_Write_Data+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	6a1b      	ldr	r3, [r3, #32]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030228 	.word	0x00030228

000d4a38 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <HAL_I2C_Available_Data+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030228 	.word	0x00030228

000d4a48 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <HAL_I2C_Read_Data+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030228 	.word	0x00030228

000d4a58 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <HAL_I2C_Peek_Data+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	00030228 	.word	0x00030228

000d4a68 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <HAL_I2C_Flush_Data+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	00030228 	.word	0x00030228

000d4a78 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <HAL_I2C_Init+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	00030228 	.word	0x00030228

000d4a88 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <HAL_I2C_Request_Data_Ex+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	00030228 	.word	0x00030228

000d4a98 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <HAL_USB_USART_Init+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	681b      	ldr	r3, [r3, #0]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	0003024c 	.word	0x0003024c

000d4aa8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <HAL_USB_USART_Begin+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	685b      	ldr	r3, [r3, #4]
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	0003024c 	.word	0x0003024c

000d4ab8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <HAL_USB_USART_Available_Data+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	691b      	ldr	r3, [r3, #16]
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003024c 	.word	0x0003024c

000d4ac8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	695b      	ldr	r3, [r3, #20]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	0003024c 	.word	0x0003024c

000d4ad8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <HAL_USB_USART_Receive_Data+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	699b      	ldr	r3, [r3, #24]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	0003024c 	.word	0x0003024c

000d4ae8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <HAL_USB_USART_Send_Data+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	69db      	ldr	r3, [r3, #28]
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	0003024c 	.word	0x0003024c

000d4af8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <HAL_USB_USART_Flush_Data+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	6a1b      	ldr	r3, [r3, #32]
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	0003024c 	.word	0x0003024c

000d4b08 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <set_system_mode+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	685b      	ldr	r3, [r3, #4]
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	00030220 	.word	0x00030220

000d4b18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <system_delay_ms+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	695b      	ldr	r3, [r3, #20]
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	00030220 	.word	0x00030220

000d4b28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b03      	ldr	r3, [pc, #12]	; (d4b38 <system_ctrl_set_app_request_handler+0x10>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b32:	9301      	str	r3, [sp, #4]
   d4b34:	bd08      	pop	{r3, pc}
   d4b36:	0000      	.short	0x0000
   d4b38:	00030220 	.word	0x00030220

000d4b3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b03      	ldr	r3, [pc, #12]	; (d4b4c <system_ctrl_set_result+0x10>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b46:	9301      	str	r3, [sp, #4]
   d4b48:	bd08      	pop	{r3, pc}
   d4b4a:	0000      	.short	0x0000
   d4b4c:	00030220 	.word	0x00030220

000d4b50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <network_connect+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	685b      	ldr	r3, [r3, #4]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030240 	.word	0x00030240

000d4b60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <network_connecting+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	689b      	ldr	r3, [r3, #8]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030240 	.word	0x00030240

000d4b70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <network_disconnect+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	68db      	ldr	r3, [r3, #12]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030240 	.word	0x00030240

000d4b80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <network_ready+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	691b      	ldr	r3, [r3, #16]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030240 	.word	0x00030240

000d4b90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <network_on+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	695b      	ldr	r3, [r3, #20]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030240 	.word	0x00030240

000d4ba0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <network_off+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	699b      	ldr	r3, [r3, #24]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030240 	.word	0x00030240

000d4bb0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <network_listen+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	69db      	ldr	r3, [r3, #28]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030240 	.word	0x00030240

000d4bc0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <network_listening+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6a1b      	ldr	r3, [r3, #32]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030240 	.word	0x00030240

000d4bd0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <network_set_listen_timeout+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030240 	.word	0x00030240

000d4be0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <network_get_listen_timeout+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030240 	.word	0x00030240

000d4bf0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <spark_set_random_seed_from_cloud_handler+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030244 	.word	0x00030244

000d4c00 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <malloc+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	681b      	ldr	r3, [r3, #0]
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	0003021c 	.word	0x0003021c

000d4c10 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <free+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	685b      	ldr	r3, [r3, #4]
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	0003021c 	.word	0x0003021c

000d4c20 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c20:	2200      	movs	r2, #0
   d4c22:	4611      	mov	r1, r2
   d4c24:	6840      	ldr	r0, [r0, #4]
   d4c26:	f7ff bfcb 	b.w	d4bc0 <network_listening>

000d4c2a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c2a:	2200      	movs	r2, #0
   d4c2c:	4611      	mov	r1, r2
   d4c2e:	6840      	ldr	r0, [r0, #4]
   d4c30:	f7ff bfd6 	b.w	d4be0 <network_get_listen_timeout>

000d4c34 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c34:	2200      	movs	r2, #0
   d4c36:	6840      	ldr	r0, [r0, #4]
   d4c38:	f7ff bfca 	b.w	d4bd0 <network_set_listen_timeout>

000d4c3c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c3c:	2200      	movs	r2, #0
   d4c3e:	f081 0101 	eor.w	r1, r1, #1
   d4c42:	6840      	ldr	r0, [r0, #4]
   d4c44:	f7ff bfb4 	b.w	d4bb0 <network_listen>

000d4c48 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4c48:	2300      	movs	r3, #0
   d4c4a:	461a      	mov	r2, r3
   d4c4c:	4619      	mov	r1, r3
   d4c4e:	6840      	ldr	r0, [r0, #4]
   d4c50:	f7ff bfa6 	b.w	d4ba0 <network_off>

000d4c54 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c54:	2300      	movs	r3, #0
   d4c56:	461a      	mov	r2, r3
   d4c58:	4619      	mov	r1, r3
   d4c5a:	6840      	ldr	r0, [r0, #4]
   d4c5c:	f7ff bf98 	b.w	d4b90 <network_on>

000d4c60 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c60:	2200      	movs	r2, #0
   d4c62:	4611      	mov	r1, r2
   d4c64:	6840      	ldr	r0, [r0, #4]
   d4c66:	f7ff bf8b 	b.w	d4b80 <network_ready>

000d4c6a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c6a:	2200      	movs	r2, #0
   d4c6c:	4611      	mov	r1, r2
   d4c6e:	6840      	ldr	r0, [r0, #4]
   d4c70:	f7ff bf76 	b.w	d4b60 <network_connecting>

000d4c74 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c74:	2200      	movs	r2, #0
   d4c76:	2102      	movs	r1, #2
   d4c78:	6840      	ldr	r0, [r0, #4]
   d4c7a:	f7ff bf79 	b.w	d4b70 <network_disconnect>

000d4c7e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c7e:	2300      	movs	r3, #0
   d4c80:	461a      	mov	r2, r3
   d4c82:	6840      	ldr	r0, [r0, #4]
   d4c84:	f7ff bf64 	b.w	d4b50 <network_connect>

000d4c88 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4c88:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4c8a:	2203      	movs	r2, #3
   d4c8c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4c8e:	4a02      	ldr	r2, [pc, #8]	; (d4c98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4c90:	601a      	str	r2, [r3, #0]
   d4c92:	4770      	bx	lr
   d4c94:	2003e3dc 	.word	0x2003e3dc
   d4c98:	000d670c 	.word	0x000d670c

000d4c9c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4c9c:	b510      	push	{r4, lr}
   d4c9e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4ca0:	6800      	ldr	r0, [r0, #0]
   d4ca2:	b118      	cbz	r0, d4cac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4ca4:	f7ff ffb4 	bl	d4c10 <free>
            wakeupSource_ = nullptr;
   d4ca8:	2300      	movs	r3, #0
   d4caa:	6023      	str	r3, [r4, #0]
   d4cac:	bd10      	pop	{r4, pc}

000d4cae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4cae:	b510      	push	{r4, lr}
   d4cb0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4cb2:	f7ff fff3 	bl	d4c9c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	bd10      	pop	{r4, pc}
	...

000d4cbc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4cbc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4cbe:	4c09      	ldr	r4, [pc, #36]	; (d4ce4 <_GLOBAL__sub_I_System+0x28>)
   d4cc0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4cc6:	6020      	str	r0, [r4, #0]
   d4cc8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cca:	71a0      	strb	r0, [r4, #6]
   d4ccc:	8120      	strh	r0, [r4, #8]
   d4cce:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4cd0:	f7ff ff1a 	bl	d4b08 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	4a04      	ldr	r2, [pc, #16]	; (d4ce8 <_GLOBAL__sub_I_System+0x2c>)
   d4cd8:	4904      	ldr	r1, [pc, #16]	; (d4cec <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4cde:	f000 bded 	b.w	d58bc <__aeabi_atexit>
   d4ce2:	bf00      	nop
   d4ce4:	2003e3e4 	.word	0x2003e3e4
   d4ce8:	2003e334 	.word	0x2003e334
   d4cec:	000d4caf 	.word	0x000d4caf

000d4cf0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4cf0:	b510      	push	{r4, lr}
   d4cf2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4cf4:	6800      	ldr	r0, [r0, #0]
   d4cf6:	b108      	cbz	r0, d4cfc <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4cf8:	f7ff fe2e 	bl	d4958 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	bd10      	pop	{r4, pc}

000d4d00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d00:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d02:	4c06      	ldr	r4, [pc, #24]	; (d4d1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d04:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4d06:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d08:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d0a:	f7ff fe1d 	bl	d4948 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d0e:	4620      	mov	r0, r4
   d4d10:	4a03      	ldr	r2, [pc, #12]	; (d4d20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d12:	4904      	ldr	r1, [pc, #16]	; (d4d24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d18:	f000 bdd0 	b.w	d58bc <__aeabi_atexit>
   d4d1c:	2003e3f0 	.word	0x2003e3f0
   d4d20:	2003e334 	.word	0x2003e334
   d4d24:	000d4cf1 	.word	0x000d4cf1

000d4d28 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d2a:	4606      	mov	r6, r0
   d4d2c:	460d      	mov	r5, r1
   d4d2e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4d30:	2400      	movs	r4, #0
  while (size--) {
   d4d32:	42bd      	cmp	r5, r7
   d4d34:	d00c      	beq.n	d4d50 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d36:	6833      	ldr	r3, [r6, #0]
   d4d38:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d3c:	689b      	ldr	r3, [r3, #8]
   d4d3e:	4630      	mov	r0, r6
   d4d40:	4798      	blx	r3
     if (chunk>=0)
   d4d42:	2800      	cmp	r0, #0
   d4d44:	db01      	blt.n	d4d4a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d46:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4d48:	e7f3      	b.n	d4d32 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d4a:	2c00      	cmp	r4, #0
   d4d4c:	bf08      	it	eq
   d4d4e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d50:	4620      	mov	r0, r4
   d4d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d54 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d54:	b570      	push	{r4, r5, r6, lr}
   d4d56:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4d58:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4d5a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4d5c:	b149      	cbz	r1, d4d72 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4d5e:	f001 fc61 	bl	d6624 <strlen>
   d4d62:	682b      	ldr	r3, [r5, #0]
   d4d64:	4602      	mov	r2, r0
   d4d66:	4621      	mov	r1, r4
   d4d68:	4628      	mov	r0, r5
   d4d6a:	68db      	ldr	r3, [r3, #12]
    }
   d4d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d70:	4718      	bx	r3
    }
   d4d72:	bd70      	pop	{r4, r5, r6, pc}

000d4d74 <_ZN5Print5printEPKc>:
   d4d74:	b508      	push	{r3, lr}
   d4d76:	f7ff ffed 	bl	d4d54 <_ZN5Print5writeEPKc>
   d4d7a:	bd08      	pop	{r3, pc}

000d4d7c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4d7c:	6803      	ldr	r3, [r0, #0]
   d4d7e:	689b      	ldr	r3, [r3, #8]
   d4d80:	4718      	bx	r3

000d4d82 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d82:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d84:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d86:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d88:	f7ff fff8 	bl	d4d7c <_ZN5Print5printEc>
  n += print('\n');
   d4d8c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4d8e:	4604      	mov	r4, r0
  n += print('\n');
   d4d90:	4628      	mov	r0, r5
   d4d92:	f7ff fff3 	bl	d4d7c <_ZN5Print5printEc>
  return n;
}
   d4d96:	4420      	add	r0, r4
   d4d98:	bd38      	pop	{r3, r4, r5, pc}

000d4d9a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4d9a:	b538      	push	{r3, r4, r5, lr}
   d4d9c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d9e:	f7ff ffd9 	bl	d4d54 <_ZN5Print5writeEPKc>
   d4da2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4da4:	4628      	mov	r0, r5
   d4da6:	f7ff ffec 	bl	d4d82 <_ZN5Print7printlnEv>
  return n;
}
   d4daa:	4420      	add	r0, r4
   d4dac:	bd38      	pop	{r3, r4, r5, pc}

000d4dae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4dae:	b530      	push	{r4, r5, lr}
   d4db0:	b08b      	sub	sp, #44	; 0x2c
   d4db2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4db4:	2100      	movs	r1, #0
   d4db6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4dba:	2a01      	cmp	r2, #1
   d4dbc:	bf98      	it	ls
   d4dbe:	220a      	movls	r2, #10
   d4dc0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4dc4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4dc8:	fb05 3312 	mls	r3, r5, r2, r3
   d4dcc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4dd0:	2b09      	cmp	r3, #9
   d4dd2:	bf94      	ite	ls
   d4dd4:	3330      	addls	r3, #48	; 0x30
   d4dd6:	3337      	addhi	r3, #55	; 0x37
   d4dd8:	b2db      	uxtb	r3, r3
   d4dda:	4621      	mov	r1, r4
   d4ddc:	f804 3901 	strb.w	r3, [r4], #-1
   d4de0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4de2:	2d00      	cmp	r5, #0
   d4de4:	d1ee      	bne.n	d4dc4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4de6:	f7ff ffb5 	bl	d4d54 <_ZN5Print5writeEPKc>
}
   d4dea:	b00b      	add	sp, #44	; 0x2c
   d4dec:	bd30      	pop	{r4, r5, pc}
	...

000d4df0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4df4:	ec57 6b10 	vmov	r6, r7, d0
   d4df8:	4682      	mov	sl, r0
   d4dfa:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4dfc:	ee10 2a10 	vmov	r2, s0
   d4e00:	463b      	mov	r3, r7
   d4e02:	ee10 0a10 	vmov	r0, s0
   d4e06:	4639      	mov	r1, r7
   d4e08:	f001 fb14 	bl	d6434 <__aeabi_dcmpun>
   d4e0c:	b108      	cbz	r0, d4e12 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e0e:	494e      	ldr	r1, [pc, #312]	; (d4f48 <_ZN5Print10printFloatEdh+0x158>)
   d4e10:	e012      	b.n	d4e38 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4e12:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4e16:	f04f 32ff 	mov.w	r2, #4294967295
   d4e1a:	4b4c      	ldr	r3, [pc, #304]	; (d4f4c <_ZN5Print10printFloatEdh+0x15c>)
   d4e1c:	4630      	mov	r0, r6
   d4e1e:	4649      	mov	r1, r9
   d4e20:	f001 fb08 	bl	d6434 <__aeabi_dcmpun>
   d4e24:	b968      	cbnz	r0, d4e42 <_ZN5Print10printFloatEdh+0x52>
   d4e26:	f04f 32ff 	mov.w	r2, #4294967295
   d4e2a:	4b48      	ldr	r3, [pc, #288]	; (d4f4c <_ZN5Print10printFloatEdh+0x15c>)
   d4e2c:	4630      	mov	r0, r6
   d4e2e:	4649      	mov	r1, r9
   d4e30:	f001 fae2 	bl	d63f8 <__aeabi_dcmple>
   d4e34:	b928      	cbnz	r0, d4e42 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e36:	4946      	ldr	r1, [pc, #280]	; (d4f50 <_ZN5Print10printFloatEdh+0x160>)
   d4e38:	4650      	mov	r0, sl
   d4e3a:	f7ff ff8b 	bl	d4d54 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4e42:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4e46:	4b43      	ldr	r3, [pc, #268]	; (d4f54 <_ZN5Print10printFloatEdh+0x164>)
   d4e48:	4630      	mov	r0, r6
   d4e4a:	4639      	mov	r1, r7
   d4e4c:	f001 fae8 	bl	d6420 <__aeabi_dcmpgt>
   d4e50:	b108      	cbz	r0, d4e56 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e52:	4941      	ldr	r1, [pc, #260]	; (d4f58 <_ZN5Print10printFloatEdh+0x168>)
   d4e54:	e7f0      	b.n	d4e38 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4e56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4e5a:	4b40      	ldr	r3, [pc, #256]	; (d4f5c <_ZN5Print10printFloatEdh+0x16c>)
   d4e5c:	4630      	mov	r0, r6
   d4e5e:	4639      	mov	r1, r7
   d4e60:	f001 fac0 	bl	d63e4 <__aeabi_dcmplt>
   d4e64:	2800      	cmp	r0, #0
   d4e66:	d1f4      	bne.n	d4e52 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4e68:	2200      	movs	r2, #0
   d4e6a:	2300      	movs	r3, #0
   d4e6c:	4630      	mov	r0, r6
   d4e6e:	4639      	mov	r1, r7
   d4e70:	f001 fab8 	bl	d63e4 <__aeabi_dcmplt>
   d4e74:	b140      	cbz	r0, d4e88 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4e76:	212d      	movs	r1, #45	; 0x2d
   d4e78:	4650      	mov	r0, sl
   d4e7a:	f7ff ff7f 	bl	d4d7c <_ZN5Print5printEc>
     number = -number;
   d4e7e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4e82:	4604      	mov	r4, r0
     number = -number;
   d4e84:	461f      	mov	r7, r3
   d4e86:	e000      	b.n	d4e8a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4e88:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4e8a:	4935      	ldr	r1, [pc, #212]	; (d4f60 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4e8c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4e90:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4e92:	fa5f f388 	uxtb.w	r3, r8
   d4e96:	429d      	cmp	r5, r3
   d4e98:	d906      	bls.n	d4ea8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4e9a:	2200      	movs	r2, #0
   d4e9c:	4b31      	ldr	r3, [pc, #196]	; (d4f64 <_ZN5Print10printFloatEdh+0x174>)
   d4e9e:	f001 f959 	bl	d6154 <__aeabi_ddiv>
   d4ea2:	f108 0801 	add.w	r8, r8, #1
   d4ea6:	e7f4      	b.n	d4e92 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4ea8:	4632      	mov	r2, r6
   d4eaa:	463b      	mov	r3, r7
   d4eac:	f000 fe76 	bl	d5b9c <__adddf3>
   d4eb0:	460f      	mov	r7, r1
   d4eb2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4eb4:	f001 fafc 	bl	d64b0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4eb8:	220a      	movs	r2, #10
   d4eba:	4601      	mov	r1, r0
   d4ebc:	4680      	mov	r8, r0
   d4ebe:	4650      	mov	r0, sl
   d4ec0:	f7ff ff75 	bl	d4dae <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4ec4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4ec6:	b3e5      	cbz	r5, d4f42 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4ec8:	4640      	mov	r0, r8
   d4eca:	f000 ffa3 	bl	d5e14 <__aeabi_ui2d>
   d4ece:	4602      	mov	r2, r0
   d4ed0:	460b      	mov	r3, r1
   d4ed2:	4630      	mov	r0, r6
   d4ed4:	4639      	mov	r1, r7
   d4ed6:	f000 fe5f 	bl	d5b98 <__aeabi_dsub>
   d4eda:	4606      	mov	r6, r0
   d4edc:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ede:	4650      	mov	r0, sl
   d4ee0:	4921      	ldr	r1, [pc, #132]	; (d4f68 <_ZN5Print10printFloatEdh+0x178>)
   d4ee2:	f7ff ff37 	bl	d4d54 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4ee6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4ee8:	2200      	movs	r2, #0
   d4eea:	4b1e      	ldr	r3, [pc, #120]	; (d4f64 <_ZN5Print10printFloatEdh+0x174>)
   d4eec:	4630      	mov	r0, r6
   d4eee:	4639      	mov	r1, r7
   d4ef0:	f001 f806 	bl	d5f00 <__aeabi_dmul>
   d4ef4:	4606      	mov	r6, r0
   d4ef6:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d4ef8:	f001 fab2 	bl	d6460 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4efc:	f1b0 0900 	subs.w	r9, r0, #0
   d4f00:	da07      	bge.n	d4f12 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d4f02:	212d      	movs	r1, #45	; 0x2d
   d4f04:	4650      	mov	r0, sl
   d4f06:	f7ff ff39 	bl	d4d7c <_ZN5Print5printEc>
            val = -n;
   d4f0a:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4f0e:	4680      	mov	r8, r0
   d4f10:	e002      	b.n	d4f18 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d4f12:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4f14:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4f18:	220a      	movs	r2, #10
   d4f1a:	4650      	mov	r0, sl
   d4f1c:	f7ff ff47 	bl	d4dae <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d4f20:	4440      	add	r0, r8
   d4f22:	4404      	add	r4, r0
    remainder -= toPrint;
   d4f24:	4648      	mov	r0, r9
   d4f26:	f000 ff85 	bl	d5e34 <__aeabi_i2d>
   d4f2a:	4602      	mov	r2, r0
   d4f2c:	460b      	mov	r3, r1
   d4f2e:	4630      	mov	r0, r6
   d4f30:	4639      	mov	r1, r7
   d4f32:	f000 fe31 	bl	d5b98 <__aeabi_dsub>
   d4f36:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4f38:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4f3c:	4606      	mov	r6, r0
   d4f3e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4f40:	d1d2      	bne.n	d4ee8 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4f42:	4620      	mov	r0, r4
   d4f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f48:	000d6738 	.word	0x000d6738
   d4f4c:	7fefffff 	.word	0x7fefffff
   d4f50:	000d6740 	.word	0x000d6740
   d4f54:	41efffff 	.word	0x41efffff
   d4f58:	000d673c 	.word	0x000d673c
   d4f5c:	c1efffff 	.word	0xc1efffff
   d4f60:	3fe00000 	.word	0x3fe00000
   d4f64:	40240000 	.word	0x40240000
   d4f68:	000d6656 	.word	0x000d6656

000d4f6c <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d4f6c:	b538      	push	{r3, r4, r5, lr}
   d4f6e:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d4f70:	ee10 0a10 	vmov	r0, s0
   d4f74:	b2cd      	uxtb	r5, r1
   d4f76:	f000 ff6f 	bl	d5e58 <__aeabi_f2d>
   d4f7a:	ec41 0b10 	vmov	d0, r0, r1
   d4f7e:	4629      	mov	r1, r5
   d4f80:	4620      	mov	r0, r4
}
   d4f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d4f86:	f7ff bf33 	b.w	d4df0 <_ZN5Print10printFloatEdh>
	...

000d4f8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f8c:	4b01      	ldr	r3, [pc, #4]	; (d4f94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f8e:	4a02      	ldr	r2, [pc, #8]	; (d4f98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f90:	601a      	str	r2, [r3, #0]
   d4f92:	4770      	bx	lr
   d4f94:	2003e3f4 	.word	0x2003e3f4
   d4f98:	000d67b7 	.word	0x000d67b7

000d4f9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f9c:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f9e:	681a      	ldr	r2, [r3, #0]
   d4fa0:	4b02      	ldr	r3, [pc, #8]	; (d4fac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4fa2:	601a      	str	r2, [r3, #0]
   d4fa4:	4770      	bx	lr
   d4fa6:	bf00      	nop
   d4fa8:	2003e2cc 	.word	0x2003e2cc
   d4fac:	2003e3f8 	.word	0x2003e3f8

000d4fb0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4fb0:	2100      	movs	r1, #0
   d4fb2:	f7ff bdb1 	b.w	d4b18 <system_delay_ms>

000d4fb6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4fb6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4fb8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4fba:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4fbc:	b113      	cbz	r3, d4fc4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4fbe:	2203      	movs	r2, #3
   d4fc0:	4601      	mov	r1, r0
   d4fc2:	4798      	blx	r3
    }
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	bd10      	pop	{r4, pc}

000d4fc8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4fc8:	b510      	push	{r4, lr}
   d4fca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fcc:	f7ff fff3 	bl	d4fb6 <_ZNSt14_Function_baseD1Ev>
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	bd10      	pop	{r4, pc}

000d4fd4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fd4:	4803      	ldr	r0, [pc, #12]	; (d4fe4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4fd6:	4a04      	ldr	r2, [pc, #16]	; (d4fe8 <_GLOBAL__sub_I_RGB+0x14>)
   d4fd8:	4904      	ldr	r1, [pc, #16]	; (d4fec <_GLOBAL__sub_I_RGB+0x18>)
   d4fda:	2300      	movs	r3, #0
   d4fdc:	6083      	str	r3, [r0, #8]
   d4fde:	f000 bc6d 	b.w	d58bc <__aeabi_atexit>
   d4fe2:	bf00      	nop
   d4fe4:	2003e3fc 	.word	0x2003e3fc
   d4fe8:	2003e334 	.word	0x2003e334
   d4fec:	000d4fc9 	.word	0x000d4fc9

000d4ff0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4ff0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4ff2:	4b0c      	ldr	r3, [pc, #48]	; (d5024 <serialEventRun+0x34>)
   d4ff4:	b133      	cbz	r3, d5004 <serialEventRun+0x14>
   d4ff6:	f000 f957 	bl	d52a8 <_Z16_fetch_usbserialv>
   d4ffa:	6803      	ldr	r3, [r0, #0]
   d4ffc:	691b      	ldr	r3, [r3, #16]
   d4ffe:	4798      	blx	r3
   d5000:	2800      	cmp	r0, #0
   d5002:	dc09      	bgt.n	d5018 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5004:	4b08      	ldr	r3, [pc, #32]	; (d5028 <serialEventRun+0x38>)
   d5006:	b163      	cbz	r3, d5022 <serialEventRun+0x32>
   d5008:	f000 f9cc 	bl	d53a4 <_Z22__fetch_global_Serial1v>
   d500c:	6803      	ldr	r3, [r0, #0]
   d500e:	691b      	ldr	r3, [r3, #16]
   d5010:	4798      	blx	r3
   d5012:	2800      	cmp	r0, #0
   d5014:	dc03      	bgt.n	d501e <serialEventRun+0x2e>
   d5016:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5018:	f3af 8000 	nop.w
   d501c:	e7f2      	b.n	d5004 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d501e:	f3af 8000 	nop.w
   d5022:	bd08      	pop	{r3, pc}
	...

000d502c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d502c:	b508      	push	{r3, lr}
	serialEventRun();
   d502e:	f7ff ffdf 	bl	d4ff0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5032:	f7ff fc69 	bl	d4908 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5036:	4b01      	ldr	r3, [pc, #4]	; (d503c <_post_loop+0x10>)
   d5038:	6018      	str	r0, [r3, #0]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	2003e730 	.word	0x2003e730

000d5040 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5040:	4802      	ldr	r0, [pc, #8]	; (d504c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5042:	4a03      	ldr	r2, [pc, #12]	; (d5050 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5044:	4903      	ldr	r1, [pc, #12]	; (d5054 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5046:	1a12      	subs	r2, r2, r0
   d5048:	f001 bab0 	b.w	d65ac <memcpy>
   d504c:	2003f400 	.word	0x2003f400
   d5050:	2003f404 	.word	0x2003f404
   d5054:	000d6a30 	.word	0x000d6a30

000d5058 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5058:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d505a:	2300      	movs	r3, #0
   d505c:	9300      	str	r3, [sp, #0]
   d505e:	461a      	mov	r2, r3
   d5060:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5064:	f7ff fd6a 	bl	d4b3c <system_ctrl_set_result>
}
   d5068:	b003      	add	sp, #12
   d506a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5070 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5070:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5072:	8843      	ldrh	r3, [r0, #2]
   d5074:	2b0a      	cmp	r3, #10
   d5076:	d008      	beq.n	d508a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5078:	2b50      	cmp	r3, #80	; 0x50
   d507a:	d109      	bne.n	d5090 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d507c:	4b09      	ldr	r3, [pc, #36]	; (d50a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d507e:	681b      	ldr	r3, [r3, #0]
   d5080:	b13b      	cbz	r3, d5092 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5082:	b003      	add	sp, #12
   d5084:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5088:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d508a:	f7ff ffe5 	bl	d5058 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d508e:	e006      	b.n	d509e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5090:	2300      	movs	r3, #0
   d5092:	9300      	str	r3, [sp, #0]
   d5094:	461a      	mov	r2, r3
   d5096:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d509a:	f7ff fd4f 	bl	d4b3c <system_ctrl_set_result>
        break;
    }
}
   d509e:	b003      	add	sp, #12
   d50a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d50a4:	2003e40c 	.word	0x2003e40c

000d50a8 <module_user_init_hook>:

void module_user_init_hook()
{
   d50a8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d50aa:	4c10      	ldr	r4, [pc, #64]	; (d50ec <module_user_init_hook+0x44>)
   d50ac:	4d10      	ldr	r5, [pc, #64]	; (d50f0 <module_user_init_hook+0x48>)
   d50ae:	6823      	ldr	r3, [r4, #0]
   d50b0:	42ab      	cmp	r3, r5
   d50b2:	4b10      	ldr	r3, [pc, #64]	; (d50f4 <module_user_init_hook+0x4c>)
   d50b4:	bf0c      	ite	eq
   d50b6:	2201      	moveq	r2, #1
   d50b8:	2200      	movne	r2, #0
   d50ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d50bc:	d002      	beq.n	d50c4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d50be:	f7ff ffbf 	bl	d5040 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d50c2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d50c4:	f7ff fc18 	bl	d48f8 <HAL_RNG_GetRandomNumber>
   d50c8:	4604      	mov	r4, r0
    srand(seed);
   d50ca:	f001 fa83 	bl	d65d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d50ce:	4b0a      	ldr	r3, [pc, #40]	; (d50f8 <module_user_init_hook+0x50>)
   d50d0:	b113      	cbz	r3, d50d8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d50d2:	4620      	mov	r0, r4
   d50d4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d50d8:	2100      	movs	r1, #0
   d50da:	4807      	ldr	r0, [pc, #28]	; (d50f8 <module_user_init_hook+0x50>)
   d50dc:	f7ff fd88 	bl	d4bf0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d50e0:	2100      	movs	r1, #0
   d50e2:	4806      	ldr	r0, [pc, #24]	; (d50fc <module_user_init_hook+0x54>)
}
   d50e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d50e8:	f7ff bd1e 	b.w	d4b28 <system_ctrl_set_app_request_handler>
   d50ec:	2003f400 	.word	0x2003f400
   d50f0:	9a271c1e 	.word	0x9a271c1e
   d50f4:	2003e410 	.word	0x2003e410
   d50f8:	00000000 	.word	0x00000000
   d50fc:	000d5071 	.word	0x000d5071

000d5100 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5100:	4770      	bx	lr

000d5102 <_ZN9IPAddressD0Ev>:
   d5102:	b510      	push	{r4, lr}
   d5104:	2118      	movs	r1, #24
   d5106:	4604      	mov	r4, r0
   d5108:	f000 fbe6 	bl	d58d8 <_ZdlPvj>
   d510c:	4620      	mov	r0, r4
   d510e:	bd10      	pop	{r4, pc}

000d5110 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5110:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5112:	7d03      	ldrb	r3, [r0, #20]
   d5114:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5116:	b08d      	sub	sp, #52	; 0x34
   d5118:	460e      	mov	r6, r1
   d511a:	f100 0704 	add.w	r7, r0, #4
   d511e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5122:	d002      	beq.n	d512a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5124:	f100 0508 	add.w	r5, r0, #8
   d5128:	e018      	b.n	d515c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d512a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d512c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d512e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5132:	232f      	movs	r3, #47	; 0x2f
   d5134:	462a      	mov	r2, r5
   d5136:	200a      	movs	r0, #10
   d5138:	f7ff fc16 	bl	d4968 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d513c:	4628      	mov	r0, r5
   d513e:	f001 fa71 	bl	d6624 <strlen>
   d5142:	6833      	ldr	r3, [r6, #0]
   d5144:	4602      	mov	r2, r0
   d5146:	68db      	ldr	r3, [r3, #12]
   d5148:	4629      	mov	r1, r5
   d514a:	4630      	mov	r0, r6
   d514c:	4798      	blx	r3
   d514e:	e00f      	b.n	d5170 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5150:	b124      	cbz	r4, d515c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5152:	212e      	movs	r1, #46	; 0x2e
   d5154:	4630      	mov	r0, r6
   d5156:	f7ff fe11 	bl	d4d7c <_ZN5Print5printEc>
   d515a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d515c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5160:	220a      	movs	r2, #10
   d5162:	4630      	mov	r0, r6
   d5164:	f7ff fe23 	bl	d4dae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5168:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d516a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d516c:	d1f0      	bne.n	d5150 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d516e:	4620      	mov	r0, r4
    }
    return n;
}
   d5170:	b00d      	add	sp, #52	; 0x34
   d5172:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5174 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5174:	b510      	push	{r4, lr}
   d5176:	4b05      	ldr	r3, [pc, #20]	; (d518c <_ZN9IPAddressC1Ev+0x18>)
   d5178:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d517a:	2211      	movs	r2, #17
   d517c:	f840 3b04 	str.w	r3, [r0], #4
   d5180:	2100      	movs	r1, #0
   d5182:	f001 fa1e 	bl	d65c2 <memset>
{
    clear();
}
   d5186:	4620      	mov	r0, r4
   d5188:	bd10      	pop	{r4, pc}
   d518a:	bf00      	nop
   d518c:	000d6854 	.word	0x000d6854

000d5190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5190:	4603      	mov	r3, r0
   d5192:	4a07      	ldr	r2, [pc, #28]	; (d51b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5194:	b510      	push	{r4, lr}
   d5196:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d519a:	f101 0210 	add.w	r2, r1, #16
   d519e:	f851 4b04 	ldr.w	r4, [r1], #4
   d51a2:	f843 4b04 	str.w	r4, [r3], #4
   d51a6:	4291      	cmp	r1, r2
   d51a8:	d1f9      	bne.n	d519e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d51aa:	780a      	ldrb	r2, [r1, #0]
   d51ac:	701a      	strb	r2, [r3, #0]
}
   d51ae:	bd10      	pop	{r4, pc}
   d51b0:	000d6854 	.word	0x000d6854

000d51b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d51b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d51b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d51ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d51be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d51c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d51c6:	2304      	movs	r3, #4
   d51c8:	6041      	str	r1, [r0, #4]
   d51ca:	7503      	strb	r3, [r0, #20]
   d51cc:	bd10      	pop	{r4, pc}

000d51ce <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d51ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d51d0:	780d      	ldrb	r5, [r1, #0]
   d51d2:	788b      	ldrb	r3, [r1, #2]
   d51d4:	784a      	ldrb	r2, [r1, #1]
   d51d6:	78c9      	ldrb	r1, [r1, #3]
   d51d8:	9100      	str	r1, [sp, #0]
   d51da:	4629      	mov	r1, r5
   d51dc:	f7ff ffea 	bl	d51b4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d51e0:	b003      	add	sp, #12
   d51e2:	bd30      	pop	{r4, r5, pc}

000d51e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d51e4:	7441      	strb	r1, [r0, #17]
   d51e6:	4770      	bx	lr

000d51e8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d51e8:	4770      	bx	lr

000d51ea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d51ea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d51ec:	2100      	movs	r1, #0
   d51ee:	7c00      	ldrb	r0, [r0, #16]
   d51f0:	f7ff fc72 	bl	d4ad8 <HAL_USB_USART_Receive_Data>
}
   d51f4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d51f8:	bf28      	it	cs
   d51fa:	f04f 30ff 	movcs.w	r0, #4294967295
   d51fe:	bd08      	pop	{r3, pc}

000d5200 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5200:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5202:	2101      	movs	r1, #1
   d5204:	7c00      	ldrb	r0, [r0, #16]
   d5206:	f7ff fc67 	bl	d4ad8 <HAL_USB_USART_Receive_Data>
}
   d520a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d520e:	bf28      	it	cs
   d5210:	f04f 30ff 	movcs.w	r0, #4294967295
   d5214:	bd08      	pop	{r3, pc}

000d5216 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5216:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5218:	7c00      	ldrb	r0, [r0, #16]
   d521a:	f7ff fc55 	bl	d4ac8 <HAL_USB_USART_Available_Data_For_Write>
}
   d521e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5222:	bd08      	pop	{r3, pc}

000d5224 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5224:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5226:	7c00      	ldrb	r0, [r0, #16]
   d5228:	f7ff fc46 	bl	d4ab8 <HAL_USB_USART_Available_Data>
}
   d522c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5230:	bd08      	pop	{r3, pc}

000d5232 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5232:	7c00      	ldrb	r0, [r0, #16]
   d5234:	f7ff bc60 	b.w	d4af8 <HAL_USB_USART_Flush_Data>

000d5238 <_ZN9USBSerialD0Ev>:
   d5238:	b510      	push	{r4, lr}
   d523a:	2114      	movs	r1, #20
   d523c:	4604      	mov	r4, r0
   d523e:	f000 fb4b 	bl	d58d8 <_ZdlPvj>
   d5242:	4620      	mov	r0, r4
   d5244:	bd10      	pop	{r4, pc}

000d5246 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5246:	b538      	push	{r3, r4, r5, lr}
   d5248:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d524a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d524c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d524e:	f7ff fc3b 	bl	d4ac8 <HAL_USB_USART_Available_Data_For_Write>
   d5252:	2800      	cmp	r0, #0
   d5254:	dc01      	bgt.n	d525a <_ZN9USBSerial5writeEh+0x14>
   d5256:	7c60      	ldrb	r0, [r4, #17]
   d5258:	b128      	cbz	r0, d5266 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d525a:	4629      	mov	r1, r5
   d525c:	7c20      	ldrb	r0, [r4, #16]
   d525e:	f7ff fc43 	bl	d4ae8 <HAL_USB_USART_Send_Data>
   d5262:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5266:	bd38      	pop	{r3, r4, r5, pc}

000d5268 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5268:	b510      	push	{r4, lr}
   d526a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d526c:	2300      	movs	r3, #0
   d526e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5274:	60a3      	str	r3, [r4, #8]
   d5276:	4b05      	ldr	r3, [pc, #20]	; (d528c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5278:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d527a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d527c:	4608      	mov	r0, r1
{
  _serial = serial;
   d527e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5280:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5282:	4611      	mov	r1, r2
   d5284:	f7ff fc08 	bl	d4a98 <HAL_USB_USART_Init>
}
   d5288:	4620      	mov	r0, r4
   d528a:	bd10      	pop	{r4, pc}
   d528c:	000d6868 	.word	0x000d6868

000d5290 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5290:	2200      	movs	r2, #0
   d5292:	7c00      	ldrb	r0, [r0, #16]
   d5294:	f7ff bc08 	b.w	d4aa8 <HAL_USB_USART_Begin>

000d5298 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5298:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d529a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d529c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d529e:	2100      	movs	r1, #0
   d52a0:	f001 f98f 	bl	d65c2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d52a4:	4620      	mov	r0, r4
   d52a6:	bd10      	pop	{r4, pc}

000d52a8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d52a8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52aa:	4d0e      	ldr	r5, [pc, #56]	; (d52e4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d52ac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d52ae:	a801      	add	r0, sp, #4
   d52b0:	f7ff fff2 	bl	d5298 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52b4:	6829      	ldr	r1, [r5, #0]
   d52b6:	f011 0401 	ands.w	r4, r1, #1
   d52ba:	d110      	bne.n	d52de <_Z16_fetch_usbserialv+0x36>
   d52bc:	4628      	mov	r0, r5
   d52be:	f7fe feee 	bl	d409e <__cxa_guard_acquire>
   d52c2:	b160      	cbz	r0, d52de <_Z16_fetch_usbserialv+0x36>
   d52c4:	aa01      	add	r2, sp, #4
   d52c6:	4621      	mov	r1, r4
   d52c8:	4807      	ldr	r0, [pc, #28]	; (d52e8 <_Z16_fetch_usbserialv+0x40>)
   d52ca:	f7ff ffcd 	bl	d5268 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d52ce:	4628      	mov	r0, r5
   d52d0:	f7fe feea 	bl	d40a8 <__cxa_guard_release>
   d52d4:	4a05      	ldr	r2, [pc, #20]	; (d52ec <_Z16_fetch_usbserialv+0x44>)
   d52d6:	4906      	ldr	r1, [pc, #24]	; (d52f0 <_Z16_fetch_usbserialv+0x48>)
   d52d8:	4803      	ldr	r0, [pc, #12]	; (d52e8 <_Z16_fetch_usbserialv+0x40>)
   d52da:	f000 faef 	bl	d58bc <__aeabi_atexit>
	return _usbserial;
}
   d52de:	4802      	ldr	r0, [pc, #8]	; (d52e8 <_Z16_fetch_usbserialv+0x40>)
   d52e0:	b007      	add	sp, #28
   d52e2:	bd30      	pop	{r4, r5, pc}
   d52e4:	2003e414 	.word	0x2003e414
   d52e8:	2003e418 	.word	0x2003e418
   d52ec:	2003e334 	.word	0x2003e334
   d52f0:	000d51e9 	.word	0x000d51e9

000d52f4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d52f4:	4770      	bx	lr

000d52f6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d52f6:	7441      	strb	r1, [r0, #17]
   d52f8:	4770      	bx	lr

000d52fa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d52fa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d52fc:	7c00      	ldrb	r0, [r0, #16]
   d52fe:	f7ff fb6b 	bl	d49d8 <HAL_USART_Available_Data_For_Write>
}
   d5302:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5306:	bd08      	pop	{r3, pc}

000d5308 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5308:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d530a:	7c00      	ldrb	r0, [r0, #16]
   d530c:	f7ff fb44 	bl	d4998 <HAL_USART_Available_Data>
}
   d5310:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5314:	bd08      	pop	{r3, pc}

000d5316 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5316:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5318:	7c00      	ldrb	r0, [r0, #16]
   d531a:	f7ff fb4d 	bl	d49b8 <HAL_USART_Peek_Data>
}
   d531e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5322:	bf28      	it	cs
   d5324:	f04f 30ff 	movcs.w	r0, #4294967295
   d5328:	bd08      	pop	{r3, pc}

000d532a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d532a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d532c:	7c00      	ldrb	r0, [r0, #16]
   d532e:	f7ff fb3b 	bl	d49a8 <HAL_USART_Read_Data>
}
   d5332:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5336:	bf28      	it	cs
   d5338:	f04f 30ff 	movcs.w	r0, #4294967295
   d533c:	bd08      	pop	{r3, pc}

000d533e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d533e:	7c00      	ldrb	r0, [r0, #16]
   d5340:	f7ff bb42 	b.w	d49c8 <HAL_USART_Flush_Data>

000d5344 <_ZN11USARTSerialD0Ev>:
   d5344:	b510      	push	{r4, lr}
   d5346:	2114      	movs	r1, #20
   d5348:	4604      	mov	r4, r0
   d534a:	f000 fac5 	bl	d58d8 <_ZdlPvj>
   d534e:	4620      	mov	r0, r4
   d5350:	bd10      	pop	{r4, pc}

000d5352 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5352:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5354:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5356:	4604      	mov	r4, r0
   d5358:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d535a:	b925      	cbnz	r5, d5366 <_ZN11USARTSerial5writeEh+0x14>
   d535c:	7c00      	ldrb	r0, [r0, #16]
   d535e:	f7ff fb3b 	bl	d49d8 <HAL_USART_Available_Data_For_Write>
   d5362:	2800      	cmp	r0, #0
   d5364:	dd05      	ble.n	d5372 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5366:	4631      	mov	r1, r6
   d5368:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d536a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d536e:	f7ff bb0b 	b.w	d4988 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5372:	4628      	mov	r0, r5
   d5374:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5378 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5378:	b510      	push	{r4, lr}
   d537a:	4604      	mov	r4, r0
   d537c:	4608      	mov	r0, r1
   d537e:	4611      	mov	r1, r2
   d5380:	2200      	movs	r2, #0
   d5382:	6062      	str	r2, [r4, #4]
   d5384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5388:	60a2      	str	r2, [r4, #8]
   d538a:	4a05      	ldr	r2, [pc, #20]	; (d53a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d538c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d538e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5390:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5392:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5394:	461a      	mov	r2, r3
   d5396:	f7ff faef 	bl	d4978 <HAL_USART_Init>
}
   d539a:	4620      	mov	r0, r4
   d539c:	bd10      	pop	{r4, pc}
   d539e:	bf00      	nop
   d53a0:	000d6898 	.word	0x000d6898

000d53a4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d53a4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d53a6:	4d0c      	ldr	r5, [pc, #48]	; (d53d8 <_Z22__fetch_global_Serial1v+0x34>)
   d53a8:	6829      	ldr	r1, [r5, #0]
   d53aa:	f011 0401 	ands.w	r4, r1, #1
   d53ae:	d111      	bne.n	d53d4 <_Z22__fetch_global_Serial1v+0x30>
   d53b0:	4628      	mov	r0, r5
   d53b2:	f7fe fe74 	bl	d409e <__cxa_guard_acquire>
   d53b6:	b168      	cbz	r0, d53d4 <_Z22__fetch_global_Serial1v+0x30>
   d53b8:	4a08      	ldr	r2, [pc, #32]	; (d53dc <_Z22__fetch_global_Serial1v+0x38>)
   d53ba:	4b09      	ldr	r3, [pc, #36]	; (d53e0 <_Z22__fetch_global_Serial1v+0x3c>)
   d53bc:	4809      	ldr	r0, [pc, #36]	; (d53e4 <_Z22__fetch_global_Serial1v+0x40>)
   d53be:	4621      	mov	r1, r4
   d53c0:	f7ff ffda 	bl	d5378 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d53c4:	4628      	mov	r0, r5
   d53c6:	f7fe fe6f 	bl	d40a8 <__cxa_guard_release>
   d53ca:	4a07      	ldr	r2, [pc, #28]	; (d53e8 <_Z22__fetch_global_Serial1v+0x44>)
   d53cc:	4907      	ldr	r1, [pc, #28]	; (d53ec <_Z22__fetch_global_Serial1v+0x48>)
   d53ce:	4805      	ldr	r0, [pc, #20]	; (d53e4 <_Z22__fetch_global_Serial1v+0x40>)
   d53d0:	f000 fa74 	bl	d58bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d53d4:	4803      	ldr	r0, [pc, #12]	; (d53e4 <_Z22__fetch_global_Serial1v+0x40>)
   d53d6:	bd38      	pop	{r3, r4, r5, pc}
   d53d8:	2003e4c4 	.word	0x2003e4c4
   d53dc:	2003e4c8 	.word	0x2003e4c8
   d53e0:	2003e440 	.word	0x2003e440
   d53e4:	2003e42c 	.word	0x2003e42c
   d53e8:	2003e334 	.word	0x2003e334
   d53ec:	000d52f5 	.word	0x000d52f5

000d53f0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d53f0:	4770      	bx	lr

000d53f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53f4:	4606      	mov	r6, r0
   d53f6:	4615      	mov	r5, r2
   d53f8:	460c      	mov	r4, r1
   d53fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53fc:	42bc      	cmp	r4, r7
   d53fe:	d006      	beq.n	d540e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5400:	6833      	ldr	r3, [r6, #0]
   d5402:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5406:	689b      	ldr	r3, [r3, #8]
   d5408:	4630      	mov	r0, r6
   d540a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d540c:	e7f6      	b.n	d53fc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d540e:	4628      	mov	r0, r5
   d5410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5412 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5412:	2200      	movs	r2, #0
   d5414:	7c00      	ldrb	r0, [r0, #16]
   d5416:	f7ff bb07 	b.w	d4a28 <HAL_I2C_Write_Data>

000d541a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d541a:	2100      	movs	r1, #0
   d541c:	7c00      	ldrb	r0, [r0, #16]
   d541e:	f7ff bb0b 	b.w	d4a38 <HAL_I2C_Available_Data>

000d5422 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5422:	2100      	movs	r1, #0
   d5424:	7c00      	ldrb	r0, [r0, #16]
   d5426:	f7ff bb0f 	b.w	d4a48 <HAL_I2C_Read_Data>

000d542a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d542a:	2100      	movs	r1, #0
   d542c:	7c00      	ldrb	r0, [r0, #16]
   d542e:	f7ff bb13 	b.w	d4a58 <HAL_I2C_Peek_Data>

000d5432 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5432:	2100      	movs	r1, #0
   d5434:	7c00      	ldrb	r0, [r0, #16]
   d5436:	f7ff bb17 	b.w	d4a68 <HAL_I2C_Flush_Data>

000d543a <_ZN7TwoWireD0Ev>:
   d543a:	b510      	push	{r4, lr}
   d543c:	2114      	movs	r1, #20
   d543e:	4604      	mov	r4, r0
   d5440:	f000 fa4a 	bl	d58d8 <_ZdlPvj>
   d5444:	4620      	mov	r0, r4
   d5446:	bd10      	pop	{r4, pc}

000d5448 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5448:	b510      	push	{r4, lr}
   d544a:	4604      	mov	r4, r0
   d544c:	2300      	movs	r3, #0
   d544e:	6063      	str	r3, [r4, #4]
   d5450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5454:	60a3      	str	r3, [r4, #8]
   d5456:	4b04      	ldr	r3, [pc, #16]	; (d5468 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5458:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d545a:	4608      	mov	r0, r1
   d545c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d545e:	4611      	mov	r1, r2
   d5460:	f7ff fb0a 	bl	d4a78 <HAL_I2C_Init>
}
   d5464:	4620      	mov	r0, r4
   d5466:	bd10      	pop	{r4, pc}
   d5468:	000d68c8 	.word	0x000d68c8

000d546c <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d546c:	2200      	movs	r2, #0
   d546e:	7c00      	ldrb	r0, [r0, #16]
   d5470:	f7ff baba 	b.w	d49e8 <HAL_I2C_Set_Speed>

000d5474 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5474:	2300      	movs	r3, #0
   d5476:	461a      	mov	r2, r3
   d5478:	4619      	mov	r1, r3
   d547a:	7c00      	ldrb	r0, [r0, #16]
   d547c:	f7ff babc 	b.w	d49f8 <HAL_I2C_Begin>

000d5480 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5480:	b570      	push	{r4, r5, r6, lr}
   d5482:	460c      	mov	r4, r1
   d5484:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5486:	2514      	movs	r5, #20
   d5488:	4606      	mov	r6, r0
   d548a:	462a      	mov	r2, r5
   d548c:	2100      	movs	r1, #0
   d548e:	a801      	add	r0, sp, #4
   d5490:	f001 f897 	bl	d65c2 <memset>
   d5494:	7823      	ldrb	r3, [r4, #0]
   d5496:	f88d 3008 	strb.w	r3, [sp, #8]
   d549a:	6863      	ldr	r3, [r4, #4]
   d549c:	9303      	str	r3, [sp, #12]
   d549e:	68e3      	ldr	r3, [r4, #12]
   d54a0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d54a2:	2200      	movs	r2, #0
   d54a4:	7a23      	ldrb	r3, [r4, #8]
   d54a6:	7c30      	ldrb	r0, [r6, #16]
   d54a8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d54ac:	a901      	add	r1, sp, #4
   d54ae:	9305      	str	r3, [sp, #20]
   d54b0:	f7ff faea 	bl	d4a88 <HAL_I2C_Request_Data_Ex>
}
   d54b4:	b006      	add	sp, #24
   d54b6:	bd70      	pop	{r4, r5, r6, pc}

000d54b8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d54b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d54ba:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d54bc:	f88d 1000 	strb.w	r1, [sp]
   d54c0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d54c4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d54c6:	bf18      	it	ne
   d54c8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d54ca:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d54cc:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d54ce:	f88d 3008 	strb.w	r3, [sp, #8]
   d54d2:	f7ff ffd5 	bl	d5480 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d54d6:	b005      	add	sp, #20
   d54d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d54dc <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d54dc:	2301      	movs	r3, #1
   d54de:	f7ff bfeb 	b.w	d54b8 <_ZN7TwoWire11requestFromEhjh>

000d54e2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d54e2:	2200      	movs	r2, #0
   d54e4:	7c00      	ldrb	r0, [r0, #16]
   d54e6:	f7ff ba8f 	b.w	d4a08 <HAL_I2C_Begin_Transmission>

000d54ea <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d54ea:	b2c9      	uxtb	r1, r1
   d54ec:	f7ff bff9 	b.w	d54e2 <_ZN7TwoWire17beginTransmissionEh>

000d54f0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d54f0:	2200      	movs	r2, #0
   d54f2:	7c00      	ldrb	r0, [r0, #16]
   d54f4:	f7ff ba90 	b.w	d4a18 <HAL_I2C_End_Transmission>

000d54f8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d54f8:	2101      	movs	r1, #1
   d54fa:	f7ff bff9 	b.w	d54f0 <_ZN7TwoWire15endTransmissionEh>

000d54fe <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54fe:	2200      	movs	r2, #0
   d5500:	4611      	mov	r1, r2
   d5502:	6840      	ldr	r0, [r0, #4]
   d5504:	f7ff bb5c 	b.w	d4bc0 <network_listening>

000d5508 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5508:	2200      	movs	r2, #0
   d550a:	4611      	mov	r1, r2
   d550c:	6840      	ldr	r0, [r0, #4]
   d550e:	f7ff bb67 	b.w	d4be0 <network_get_listen_timeout>

000d5512 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5512:	2200      	movs	r2, #0
   d5514:	6840      	ldr	r0, [r0, #4]
   d5516:	f7ff bb5b 	b.w	d4bd0 <network_set_listen_timeout>

000d551a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d551a:	2200      	movs	r2, #0
   d551c:	f081 0101 	eor.w	r1, r1, #1
   d5520:	6840      	ldr	r0, [r0, #4]
   d5522:	f7ff bb45 	b.w	d4bb0 <network_listen>

000d5526 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5526:	2300      	movs	r3, #0
   d5528:	461a      	mov	r2, r3
   d552a:	2101      	movs	r1, #1
   d552c:	6840      	ldr	r0, [r0, #4]
   d552e:	f7ff bb37 	b.w	d4ba0 <network_off>

000d5532 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5532:	2300      	movs	r3, #0
   d5534:	461a      	mov	r2, r3
   d5536:	4619      	mov	r1, r3
   d5538:	6840      	ldr	r0, [r0, #4]
   d553a:	f7ff bb29 	b.w	d4b90 <network_on>

000d553e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d553e:	2200      	movs	r2, #0
   d5540:	4611      	mov	r1, r2
   d5542:	6840      	ldr	r0, [r0, #4]
   d5544:	f7ff bb1c 	b.w	d4b80 <network_ready>

000d5548 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5548:	2200      	movs	r2, #0
   d554a:	4611      	mov	r1, r2
   d554c:	6840      	ldr	r0, [r0, #4]
   d554e:	f7ff bb07 	b.w	d4b60 <network_connecting>

000d5552 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5552:	2200      	movs	r2, #0
   d5554:	2102      	movs	r1, #2
   d5556:	6840      	ldr	r0, [r0, #4]
   d5558:	f7ff bb0a 	b.w	d4b70 <network_disconnect>

000d555c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d555c:	2300      	movs	r3, #0
   d555e:	461a      	mov	r2, r3
   d5560:	6840      	ldr	r0, [r0, #4]
   d5562:	f7ff baf5 	b.w	d4b50 <network_connect>

000d5566 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5566:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5568:	4605      	mov	r5, r0
   d556a:	b188      	cbz	r0, d5590 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d556c:	6804      	ldr	r4, [r0, #0]
   d556e:	b14c      	cbz	r4, d5584 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5570:	68a3      	ldr	r3, [r4, #8]
   d5572:	b11b      	cbz	r3, d557c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5574:	2203      	movs	r2, #3
   d5576:	4621      	mov	r1, r4
   d5578:	4620      	mov	r0, r4
   d557a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d557c:	2110      	movs	r1, #16
   d557e:	4620      	mov	r0, r4
   d5580:	f000 f9aa 	bl	d58d8 <_ZdlPvj>
   d5584:	4628      	mov	r0, r5
   d5586:	2114      	movs	r1, #20
      }
   d5588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d558c:	f000 b9a4 	b.w	d58d8 <_ZdlPvj>
   d5590:	bd38      	pop	{r3, r4, r5, pc}

000d5592 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5592:	b110      	cbz	r0, d559a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5594:	6803      	ldr	r3, [r0, #0]
   d5596:	685b      	ldr	r3, [r3, #4]
   d5598:	4718      	bx	r3
   d559a:	4770      	bx	lr

000d559c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d559c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d559e:	6803      	ldr	r3, [r0, #0]
   d55a0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d55a2:	b1bb      	cbz	r3, d55d4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d55a4:	6858      	ldr	r0, [r3, #4]
   d55a6:	f7ff f9b7 	bl	d4918 <os_thread_is_current>
   d55aa:	b978      	cbnz	r0, d55cc <_ZN6ThreadD1Ev+0x30>
   d55ac:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d55ae:	7c5a      	ldrb	r2, [r3, #17]
   d55b0:	b912      	cbnz	r2, d55b8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d55b2:	6858      	ldr	r0, [r3, #4]
   d55b4:	f7ff f9b8 	bl	d4928 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d55b8:	6823      	ldr	r3, [r4, #0]
   d55ba:	6858      	ldr	r0, [r3, #4]
   d55bc:	f7ff f9bc 	bl	d4938 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55c0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d55c2:	2300      	movs	r3, #0
   d55c4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d55c6:	b128      	cbz	r0, d55d4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d55c8:	f7ff ffcd 	bl	d5566 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55cc:	6820      	ldr	r0, [r4, #0]
   d55ce:	b108      	cbz	r0, d55d4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d55d0:	f7ff ffc9 	bl	d5566 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d55d4:	4620      	mov	r0, r4
   d55d6:	bd10      	pop	{r4, pc}

000d55d8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d55d8:	b538      	push	{r3, r4, r5, lr}
   d55da:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55dc:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d55e0:	b108      	cbz	r0, d55e6 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d55e2:	f7fe fd5a 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d55e6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d55ea:	b108      	cbz	r0, d55f0 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d55ec:	f7ff f9b4 	bl	d4958 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55f0:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d55f4:	b135      	cbz	r5, d5604 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55f6:	4628      	mov	r0, r5
   d55f8:	f7ff ffd0 	bl	d559c <_ZN6ThreadD1Ev>
   d55fc:	2104      	movs	r1, #4
   d55fe:	4628      	mov	r0, r5
   d5600:	f000 f96a 	bl	d58d8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5604:	6820      	ldr	r0, [r4, #0]
   d5606:	b108      	cbz	r0, d560c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5608:	f7ff ffc3 	bl	d5592 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d560c:	4620      	mov	r0, r4
   d560e:	bd38      	pop	{r3, r4, r5, pc}

000d5610 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5610:	b510      	push	{r4, lr}
   d5612:	4b04      	ldr	r3, [pc, #16]	; (d5624 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5614:	4604      	mov	r4, r0
   d5616:	f840 3b08 	str.w	r3, [r0], #8
   d561a:	f7ff ffdd 	bl	d55d8 <_ZN5spark11MeshPublishD1Ev>
   d561e:	4620      	mov	r0, r4
   d5620:	bd10      	pop	{r4, pc}
   d5622:	bf00      	nop
   d5624:	000d68f0 	.word	0x000d68f0

000d5628 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5628:	b538      	push	{r3, r4, r5, lr}
   d562a:	4c0e      	ldr	r4, [pc, #56]	; (d5664 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d562c:	4b0e      	ldr	r3, [pc, #56]	; (d5668 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d562e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5630:	2500      	movs	r5, #0
   d5632:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5634:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5638:	6063      	str	r3, [r4, #4]
   d563a:	60a5      	str	r5, [r4, #8]
   d563c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5640:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5644:	f7ff f980 	bl	d4948 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5648:	4b08      	ldr	r3, [pc, #32]	; (d566c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d564a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d564e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5652:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5654:	4620      	mov	r0, r4
   d5656:	4a06      	ldr	r2, [pc, #24]	; (d5670 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5658:	4906      	ldr	r1, [pc, #24]	; (d5674 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d565a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d565e:	f000 b92d 	b.w	d58bc <__aeabi_atexit>
   d5662:	bf00      	nop
   d5664:	2003e54c 	.word	0x2003e54c
   d5668:	000d6958 	.word	0x000d6958
   d566c:	000d68f0 	.word	0x000d68f0
   d5670:	2003e334 	.word	0x2003e334
   d5674:	000d5611 	.word	0x000d5611

000d5678 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5678:	2200      	movs	r2, #0
   d567a:	4611      	mov	r1, r2
   d567c:	6840      	ldr	r0, [r0, #4]
   d567e:	f7ff ba7f 	b.w	d4b80 <network_ready>

000d5682 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5682:	2200      	movs	r2, #0
   d5684:	4611      	mov	r1, r2
   d5686:	6840      	ldr	r0, [r0, #4]
   d5688:	f7ff ba9a 	b.w	d4bc0 <network_listening>

000d568c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d568c:	2200      	movs	r2, #0
   d568e:	4611      	mov	r1, r2
   d5690:	6840      	ldr	r0, [r0, #4]
   d5692:	f7ff baa5 	b.w	d4be0 <network_get_listen_timeout>

000d5696 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5696:	2200      	movs	r2, #0
   d5698:	6840      	ldr	r0, [r0, #4]
   d569a:	f7ff ba99 	b.w	d4bd0 <network_set_listen_timeout>

000d569e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d569e:	2200      	movs	r2, #0
   d56a0:	f081 0101 	eor.w	r1, r1, #1
   d56a4:	6840      	ldr	r0, [r0, #4]
   d56a6:	f7ff ba83 	b.w	d4bb0 <network_listen>

000d56aa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d56aa:	2300      	movs	r3, #0
   d56ac:	461a      	mov	r2, r3
   d56ae:	4619      	mov	r1, r3
   d56b0:	6840      	ldr	r0, [r0, #4]
   d56b2:	f7ff ba75 	b.w	d4ba0 <network_off>

000d56b6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d56b6:	2300      	movs	r3, #0
   d56b8:	461a      	mov	r2, r3
   d56ba:	4619      	mov	r1, r3
   d56bc:	6840      	ldr	r0, [r0, #4]
   d56be:	f7ff ba67 	b.w	d4b90 <network_on>

000d56c2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56c2:	2200      	movs	r2, #0
   d56c4:	4611      	mov	r1, r2
   d56c6:	6840      	ldr	r0, [r0, #4]
   d56c8:	f7ff ba4a 	b.w	d4b60 <network_connecting>

000d56cc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56cc:	2200      	movs	r2, #0
   d56ce:	2102      	movs	r1, #2
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	f7ff ba4d 	b.w	d4b70 <network_disconnect>

000d56d6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56d6:	2300      	movs	r3, #0
   d56d8:	461a      	mov	r2, r3
   d56da:	6840      	ldr	r0, [r0, #4]
   d56dc:	f7ff ba38 	b.w	d4b50 <network_connect>

000d56e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d56e0:	4b02      	ldr	r3, [pc, #8]	; (d56ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d56e2:	2204      	movs	r2, #4
   d56e4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d56e6:	4a02      	ldr	r2, [pc, #8]	; (d56f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d56e8:	601a      	str	r2, [r3, #0]
   d56ea:	4770      	bx	lr
   d56ec:	2003e720 	.word	0x2003e720
   d56f0:	000d6924 	.word	0x000d6924

000d56f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d56f4:	2300      	movs	r3, #0
   d56f6:	461a      	mov	r2, r3
   d56f8:	6840      	ldr	r0, [r0, #4]
   d56fa:	f7ff ba29 	b.w	d4b50 <network_connect>

000d56fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d56fe:	2200      	movs	r2, #0
   d5700:	2102      	movs	r1, #2
   d5702:	6840      	ldr	r0, [r0, #4]
   d5704:	f7ff ba34 	b.w	d4b70 <network_disconnect>

000d5708 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5708:	2200      	movs	r2, #0
   d570a:	4611      	mov	r1, r2
   d570c:	6840      	ldr	r0, [r0, #4]
   d570e:	f7ff ba27 	b.w	d4b60 <network_connecting>

000d5712 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5712:	2200      	movs	r2, #0
   d5714:	4611      	mov	r1, r2
   d5716:	6840      	ldr	r0, [r0, #4]
   d5718:	f7ff ba32 	b.w	d4b80 <network_ready>

000d571c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d571c:	2300      	movs	r3, #0
   d571e:	461a      	mov	r2, r3
   d5720:	4619      	mov	r1, r3
   d5722:	6840      	ldr	r0, [r0, #4]
   d5724:	f7ff ba34 	b.w	d4b90 <network_on>

000d5728 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5728:	2300      	movs	r3, #0
   d572a:	461a      	mov	r2, r3
   d572c:	4619      	mov	r1, r3
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	f7ff ba36 	b.w	d4ba0 <network_off>

000d5734 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5734:	2200      	movs	r2, #0
   d5736:	f081 0101 	eor.w	r1, r1, #1
   d573a:	6840      	ldr	r0, [r0, #4]
   d573c:	f7ff ba38 	b.w	d4bb0 <network_listen>

000d5740 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5740:	2200      	movs	r2, #0
   d5742:	6840      	ldr	r0, [r0, #4]
   d5744:	f7ff ba44 	b.w	d4bd0 <network_set_listen_timeout>

000d5748 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5748:	2200      	movs	r2, #0
   d574a:	4611      	mov	r1, r2
   d574c:	6840      	ldr	r0, [r0, #4]
   d574e:	f7ff ba47 	b.w	d4be0 <network_get_listen_timeout>

000d5752 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5752:	2200      	movs	r2, #0
   d5754:	4611      	mov	r1, r2
   d5756:	6840      	ldr	r0, [r0, #4]
   d5758:	f7ff ba32 	b.w	d4bc0 <network_listening>

000d575c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d575c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5760:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5762:	b095      	sub	sp, #84	; 0x54
   d5764:	4616      	mov	r6, r2
   d5766:	460d      	mov	r5, r1
   d5768:	4607      	mov	r7, r0
    IPAddress addr;
   d576a:	f7ff fd03 	bl	d5174 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d576e:	4621      	mov	r1, r4
   d5770:	2220      	movs	r2, #32
   d5772:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5774:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5776:	f000 ff24 	bl	d65c2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d577a:	2340      	movs	r3, #64	; 0x40
   d577c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d577e:	4621      	mov	r1, r4
   d5780:	466b      	mov	r3, sp
   d5782:	aa0c      	add	r2, sp, #48	; 0x30
   d5784:	4630      	mov	r0, r6
   d5786:	f7ff f8a7 	bl	d48d8 <netdb_getaddrinfo>
    if (!r) {
   d578a:	4604      	mov	r4, r0
   d578c:	2800      	cmp	r0, #0
   d578e:	d144      	bne.n	d581a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5790:	4602      	mov	r2, r0
   d5792:	2101      	movs	r1, #1
   d5794:	6868      	ldr	r0, [r5, #4]
   d5796:	f7ff f9f3 	bl	d4b80 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d579a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d579c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d579e:	4622      	mov	r2, r4
   d57a0:	6868      	ldr	r0, [r5, #4]
   d57a2:	f7ff f9ed 	bl	d4b80 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57a6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57a8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d57aa:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57ac:	2e00      	cmp	r6, #0
   d57ae:	d034      	beq.n	d581a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d57b0:	2900      	cmp	r1, #0
   d57b2:	d132      	bne.n	d581a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d57b4:	6873      	ldr	r3, [r6, #4]
   d57b6:	2b02      	cmp	r3, #2
   d57b8:	d002      	beq.n	d57c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d57ba:	2b0a      	cmp	r3, #10
   d57bc:	d009      	beq.n	d57d2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d57be:	e02a      	b.n	d5816 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d57c0:	f1b8 0f00 	cmp.w	r8, #0
   d57c4:	d027      	beq.n	d5816 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57c6:	6971      	ldr	r1, [r6, #20]
   d57c8:	4638      	mov	r0, r7
   d57ca:	3104      	adds	r1, #4
   d57cc:	f7ff fcff 	bl	d51ce <_ZN9IPAddressaSEPKh>
   d57d0:	e020      	b.n	d5814 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d57d2:	f1b9 0f00 	cmp.w	r9, #0
   d57d6:	d01e      	beq.n	d5816 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d57d8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d57da:	2211      	movs	r2, #17
   d57dc:	a801      	add	r0, sp, #4
   d57de:	f000 fef0 	bl	d65c2 <memset>
                    a.v = 6;
   d57e2:	2306      	movs	r3, #6
   d57e4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57e8:	ad01      	add	r5, sp, #4
   d57ea:	f104 0308 	add.w	r3, r4, #8
   d57ee:	3418      	adds	r4, #24
   d57f0:	6818      	ldr	r0, [r3, #0]
   d57f2:	6859      	ldr	r1, [r3, #4]
   d57f4:	462a      	mov	r2, r5
   d57f6:	c203      	stmia	r2!, {r0, r1}
   d57f8:	3308      	adds	r3, #8
   d57fa:	42a3      	cmp	r3, r4
   d57fc:	4615      	mov	r5, r2
   d57fe:	d1f7      	bne.n	d57f0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5800:	a901      	add	r1, sp, #4
   d5802:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5804:	ad07      	add	r5, sp, #28
   d5806:	f7ff fcc3 	bl	d5190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d580a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d580c:	1d3c      	adds	r4, r7, #4
   d580e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5810:	682b      	ldr	r3, [r5, #0]
   d5812:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5814:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5816:	69f6      	ldr	r6, [r6, #28]
   d5818:	e7c8      	b.n	d57ac <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d581a:	9800      	ldr	r0, [sp, #0]
   d581c:	f7ff f854 	bl	d48c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5820:	4638      	mov	r0, r7
   d5822:	b015      	add	sp, #84	; 0x54
   d5824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5828 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5828:	4b02      	ldr	r3, [pc, #8]	; (d5834 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d582a:	4a03      	ldr	r2, [pc, #12]	; (d5838 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d582c:	601a      	str	r2, [r3, #0]
   d582e:	2200      	movs	r2, #0
   d5830:	605a      	str	r2, [r3, #4]
   d5832:	4770      	bx	lr
   d5834:	2003e728 	.word	0x2003e728
   d5838:	000d6958 	.word	0x000d6958

000d583c <_Z17acquireWireBufferv>:
   d583c:	b570      	push	{r4, r5, r6, lr}
   d583e:	4604      	mov	r4, r0
   d5840:	2514      	movs	r5, #20
   d5842:	462a      	mov	r2, r5
   d5844:	4e09      	ldr	r6, [pc, #36]	; (d586c <_Z17acquireWireBufferv+0x30>)
   d5846:	2100      	movs	r1, #0
   d5848:	f000 febb 	bl	d65c2 <memset>
   d584c:	8025      	strh	r5, [r4, #0]
   d584e:	2520      	movs	r5, #32
   d5850:	4631      	mov	r1, r6
   d5852:	60a5      	str	r5, [r4, #8]
   d5854:	6125      	str	r5, [r4, #16]
   d5856:	4628      	mov	r0, r5
   d5858:	f000 f840 	bl	d58dc <_ZnajRKSt9nothrow_t>
   d585c:	4631      	mov	r1, r6
   d585e:	6060      	str	r0, [r4, #4]
   d5860:	4628      	mov	r0, r5
   d5862:	f000 f83b 	bl	d58dc <_ZnajRKSt9nothrow_t>
   d5866:	60e0      	str	r0, [r4, #12]
   d5868:	4620      	mov	r0, r4
   d586a:	bd70      	pop	{r4, r5, r6, pc}
   d586c:	000d6984 	.word	0x000d6984

000d5870 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5870:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5872:	4d0e      	ldr	r5, [pc, #56]	; (d58ac <_Z19__fetch_global_Wirev+0x3c>)
   d5874:	6829      	ldr	r1, [r5, #0]
   d5876:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d587a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d587c:	d113      	bne.n	d58a6 <_Z19__fetch_global_Wirev+0x36>
   d587e:	4628      	mov	r0, r5
   d5880:	f7fe fc0d 	bl	d409e <__cxa_guard_acquire>
   d5884:	b178      	cbz	r0, d58a6 <_Z19__fetch_global_Wirev+0x36>
   d5886:	a801      	add	r0, sp, #4
   d5888:	f7ff ffd8 	bl	d583c <_Z17acquireWireBufferv>
   d588c:	aa01      	add	r2, sp, #4
   d588e:	4621      	mov	r1, r4
   d5890:	4807      	ldr	r0, [pc, #28]	; (d58b0 <_Z19__fetch_global_Wirev+0x40>)
   d5892:	f7ff fdd9 	bl	d5448 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5896:	4628      	mov	r0, r5
   d5898:	f7fe fc06 	bl	d40a8 <__cxa_guard_release>
   d589c:	4a05      	ldr	r2, [pc, #20]	; (d58b4 <_Z19__fetch_global_Wirev+0x44>)
   d589e:	4906      	ldr	r1, [pc, #24]	; (d58b8 <_Z19__fetch_global_Wirev+0x48>)
   d58a0:	4803      	ldr	r0, [pc, #12]	; (d58b0 <_Z19__fetch_global_Wirev+0x40>)
   d58a2:	f000 f80b 	bl	d58bc <__aeabi_atexit>
	return wire;
}
   d58a6:	4802      	ldr	r0, [pc, #8]	; (d58b0 <_Z19__fetch_global_Wirev+0x40>)
   d58a8:	b007      	add	sp, #28
   d58aa:	bd30      	pop	{r4, r5, pc}
   d58ac:	2003e734 	.word	0x2003e734
   d58b0:	2003e738 	.word	0x2003e738
   d58b4:	2003e334 	.word	0x2003e334
   d58b8:	000d53f1 	.word	0x000d53f1

000d58bc <__aeabi_atexit>:
   d58bc:	460b      	mov	r3, r1
   d58be:	4601      	mov	r1, r0
   d58c0:	4618      	mov	r0, r3
   d58c2:	f000 be65 	b.w	d6590 <__cxa_atexit>
	...

000d58c8 <_ZSt15get_new_handlerv>:
   d58c8:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <_ZSt15get_new_handlerv+0xc>)
   d58ca:	6818      	ldr	r0, [r3, #0]
   d58cc:	f3bf 8f5f 	dmb	sy
   d58d0:	4770      	bx	lr
   d58d2:	bf00      	nop
   d58d4:	2003e74c 	.word	0x2003e74c

000d58d8 <_ZdlPvj>:
   d58d8:	f7fe bbdd 	b.w	d4096 <_ZdlPv>

000d58dc <_ZnajRKSt9nothrow_t>:
   d58dc:	f000 b800 	b.w	d58e0 <_ZnwjRKSt9nothrow_t>

000d58e0 <_ZnwjRKSt9nothrow_t>:
   d58e0:	b510      	push	{r4, lr}
   d58e2:	2800      	cmp	r0, #0
   d58e4:	bf14      	ite	ne
   d58e6:	4604      	movne	r4, r0
   d58e8:	2401      	moveq	r4, #1
   d58ea:	4620      	mov	r0, r4
   d58ec:	f7ff f988 	bl	d4c00 <malloc>
   d58f0:	b920      	cbnz	r0, d58fc <_ZnwjRKSt9nothrow_t+0x1c>
   d58f2:	f7ff ffe9 	bl	d58c8 <_ZSt15get_new_handlerv>
   d58f6:	b108      	cbz	r0, d58fc <_ZnwjRKSt9nothrow_t+0x1c>
   d58f8:	4780      	blx	r0
   d58fa:	e7f6      	b.n	d58ea <_ZnwjRKSt9nothrow_t+0xa>
   d58fc:	bd10      	pop	{r4, pc}
	...

000d5900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5900:	4b18      	ldr	r3, [pc, #96]	; (d5964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5902:	681a      	ldr	r2, [r3, #0]
   d5904:	07d1      	lsls	r1, r2, #31
   d5906:	bf5c      	itt	pl
   d5908:	2201      	movpl	r2, #1
   d590a:	601a      	strpl	r2, [r3, #0]
   d590c:	4b16      	ldr	r3, [pc, #88]	; (d5968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d590e:	681a      	ldr	r2, [r3, #0]
   d5910:	07d2      	lsls	r2, r2, #31
   d5912:	bf5c      	itt	pl
   d5914:	2201      	movpl	r2, #1
   d5916:	601a      	strpl	r2, [r3, #0]
   d5918:	4b14      	ldr	r3, [pc, #80]	; (d596c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d591a:	681a      	ldr	r2, [r3, #0]
   d591c:	07d0      	lsls	r0, r2, #31
   d591e:	bf5c      	itt	pl
   d5920:	2201      	movpl	r2, #1
   d5922:	601a      	strpl	r2, [r3, #0]
   d5924:	4b12      	ldr	r3, [pc, #72]	; (d5970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5926:	681a      	ldr	r2, [r3, #0]
   d5928:	07d1      	lsls	r1, r2, #31
   d592a:	bf5c      	itt	pl
   d592c:	2201      	movpl	r2, #1
   d592e:	601a      	strpl	r2, [r3, #0]
   d5930:	4b10      	ldr	r3, [pc, #64]	; (d5974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5932:	681a      	ldr	r2, [r3, #0]
   d5934:	07d2      	lsls	r2, r2, #31
   d5936:	bf5c      	itt	pl
   d5938:	2201      	movpl	r2, #1
   d593a:	601a      	strpl	r2, [r3, #0]
   d593c:	4b0e      	ldr	r3, [pc, #56]	; (d5978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d593e:	681a      	ldr	r2, [r3, #0]
   d5940:	07d0      	lsls	r0, r2, #31
   d5942:	bf5c      	itt	pl
   d5944:	2201      	movpl	r2, #1
   d5946:	601a      	strpl	r2, [r3, #0]
   d5948:	4b0c      	ldr	r3, [pc, #48]	; (d597c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d594a:	681a      	ldr	r2, [r3, #0]
   d594c:	07d1      	lsls	r1, r2, #31
   d594e:	bf5c      	itt	pl
   d5950:	2201      	movpl	r2, #1
   d5952:	601a      	strpl	r2, [r3, #0]
   d5954:	4b0a      	ldr	r3, [pc, #40]	; (d5980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5956:	681a      	ldr	r2, [r3, #0]
   d5958:	07d2      	lsls	r2, r2, #31
   d595a:	bf5c      	itt	pl
   d595c:	2201      	movpl	r2, #1
   d595e:	601a      	strpl	r2, [r3, #0]
   d5960:	4770      	bx	lr
   d5962:	bf00      	nop
   d5964:	2003e76c 	.word	0x2003e76c
   d5968:	2003e768 	.word	0x2003e768
   d596c:	2003e764 	.word	0x2003e764
   d5970:	2003e760 	.word	0x2003e760
   d5974:	2003e75c 	.word	0x2003e75c
   d5978:	2003e758 	.word	0x2003e758
   d597c:	2003e754 	.word	0x2003e754
   d5980:	2003e750 	.word	0x2003e750

000d5984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5984:	4b24      	ldr	r3, [pc, #144]	; (d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5986:	681a      	ldr	r2, [r3, #0]
   d5988:	07d0      	lsls	r0, r2, #31
   d598a:	bf5c      	itt	pl
   d598c:	2201      	movpl	r2, #1
   d598e:	601a      	strpl	r2, [r3, #0]
   d5990:	4b22      	ldr	r3, [pc, #136]	; (d5a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5992:	681a      	ldr	r2, [r3, #0]
   d5994:	07d1      	lsls	r1, r2, #31
   d5996:	bf5c      	itt	pl
   d5998:	2201      	movpl	r2, #1
   d599a:	601a      	strpl	r2, [r3, #0]
   d599c:	4b20      	ldr	r3, [pc, #128]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d599e:	681a      	ldr	r2, [r3, #0]
   d59a0:	07d2      	lsls	r2, r2, #31
   d59a2:	bf5c      	itt	pl
   d59a4:	2201      	movpl	r2, #1
   d59a6:	601a      	strpl	r2, [r3, #0]
   d59a8:	4b1e      	ldr	r3, [pc, #120]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d59aa:	681a      	ldr	r2, [r3, #0]
   d59ac:	07d0      	lsls	r0, r2, #31
   d59ae:	bf5c      	itt	pl
   d59b0:	2201      	movpl	r2, #1
   d59b2:	601a      	strpl	r2, [r3, #0]
   d59b4:	4b1c      	ldr	r3, [pc, #112]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d59b6:	681a      	ldr	r2, [r3, #0]
   d59b8:	07d1      	lsls	r1, r2, #31
   d59ba:	bf5c      	itt	pl
   d59bc:	2201      	movpl	r2, #1
   d59be:	601a      	strpl	r2, [r3, #0]
   d59c0:	4b1a      	ldr	r3, [pc, #104]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d2      	lsls	r2, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b18      	ldr	r3, [pc, #96]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d0      	lsls	r0, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b16      	ldr	r3, [pc, #88]	; (d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d1      	lsls	r1, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4b14      	ldr	r3, [pc, #80]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d59e6:	681a      	ldr	r2, [r3, #0]
   d59e8:	07d2      	lsls	r2, r2, #31
   d59ea:	bf5c      	itt	pl
   d59ec:	2201      	movpl	r2, #1
   d59ee:	601a      	strpl	r2, [r3, #0]
   d59f0:	4b12      	ldr	r3, [pc, #72]	; (d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d59f2:	681a      	ldr	r2, [r3, #0]
   d59f4:	07d0      	lsls	r0, r2, #31
   d59f6:	bf5c      	itt	pl
   d59f8:	2201      	movpl	r2, #1
   d59fa:	601a      	strpl	r2, [r3, #0]
   d59fc:	4b10      	ldr	r3, [pc, #64]	; (d5a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d59fe:	681a      	ldr	r2, [r3, #0]
   d5a00:	07d1      	lsls	r1, r2, #31
   d5a02:	bf5c      	itt	pl
   d5a04:	2201      	movpl	r2, #1
   d5a06:	601a      	strpl	r2, [r3, #0]
   d5a08:	4b0e      	ldr	r3, [pc, #56]	; (d5a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5a0a:	681a      	ldr	r2, [r3, #0]
   d5a0c:	07d2      	lsls	r2, r2, #31
   d5a0e:	bf5c      	itt	pl
   d5a10:	2201      	movpl	r2, #1
   d5a12:	601a      	strpl	r2, [r3, #0]
   d5a14:	4770      	bx	lr
   d5a16:	bf00      	nop
   d5a18:	2003e79c 	.word	0x2003e79c
   d5a1c:	2003e798 	.word	0x2003e798
   d5a20:	2003e794 	.word	0x2003e794
   d5a24:	2003e790 	.word	0x2003e790
   d5a28:	2003e78c 	.word	0x2003e78c
   d5a2c:	2003e788 	.word	0x2003e788
   d5a30:	2003e784 	.word	0x2003e784
   d5a34:	2003e780 	.word	0x2003e780
   d5a38:	2003e77c 	.word	0x2003e77c
   d5a3c:	2003e778 	.word	0x2003e778
   d5a40:	2003e774 	.word	0x2003e774
   d5a44:	2003e770 	.word	0x2003e770

000d5a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5a48:	4b24      	ldr	r3, [pc, #144]	; (d5adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5a4a:	681a      	ldr	r2, [r3, #0]
   d5a4c:	07d0      	lsls	r0, r2, #31
   d5a4e:	bf5c      	itt	pl
   d5a50:	2201      	movpl	r2, #1
   d5a52:	601a      	strpl	r2, [r3, #0]
   d5a54:	4b22      	ldr	r3, [pc, #136]	; (d5ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d1      	lsls	r1, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b20      	ldr	r3, [pc, #128]	; (d5ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d2      	lsls	r2, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4b1e      	ldr	r3, [pc, #120]	; (d5ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5a6e:	681a      	ldr	r2, [r3, #0]
   d5a70:	07d0      	lsls	r0, r2, #31
   d5a72:	bf5c      	itt	pl
   d5a74:	2201      	movpl	r2, #1
   d5a76:	601a      	strpl	r2, [r3, #0]
   d5a78:	4b1c      	ldr	r3, [pc, #112]	; (d5aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5a7a:	681a      	ldr	r2, [r3, #0]
   d5a7c:	07d1      	lsls	r1, r2, #31
   d5a7e:	bf5c      	itt	pl
   d5a80:	2201      	movpl	r2, #1
   d5a82:	601a      	strpl	r2, [r3, #0]
   d5a84:	4b1a      	ldr	r3, [pc, #104]	; (d5af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5a86:	681a      	ldr	r2, [r3, #0]
   d5a88:	07d2      	lsls	r2, r2, #31
   d5a8a:	bf5c      	itt	pl
   d5a8c:	2201      	movpl	r2, #1
   d5a8e:	601a      	strpl	r2, [r3, #0]
   d5a90:	4b18      	ldr	r3, [pc, #96]	; (d5af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5a92:	681a      	ldr	r2, [r3, #0]
   d5a94:	07d0      	lsls	r0, r2, #31
   d5a96:	bf5c      	itt	pl
   d5a98:	2201      	movpl	r2, #1
   d5a9a:	601a      	strpl	r2, [r3, #0]
   d5a9c:	4b16      	ldr	r3, [pc, #88]	; (d5af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5a9e:	681a      	ldr	r2, [r3, #0]
   d5aa0:	07d1      	lsls	r1, r2, #31
   d5aa2:	bf5c      	itt	pl
   d5aa4:	2201      	movpl	r2, #1
   d5aa6:	601a      	strpl	r2, [r3, #0]
   d5aa8:	4b14      	ldr	r3, [pc, #80]	; (d5afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5aaa:	681a      	ldr	r2, [r3, #0]
   d5aac:	07d2      	lsls	r2, r2, #31
   d5aae:	bf5c      	itt	pl
   d5ab0:	2201      	movpl	r2, #1
   d5ab2:	601a      	strpl	r2, [r3, #0]
   d5ab4:	4b12      	ldr	r3, [pc, #72]	; (d5b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5ab6:	681a      	ldr	r2, [r3, #0]
   d5ab8:	07d0      	lsls	r0, r2, #31
   d5aba:	bf5c      	itt	pl
   d5abc:	2201      	movpl	r2, #1
   d5abe:	601a      	strpl	r2, [r3, #0]
   d5ac0:	4b10      	ldr	r3, [pc, #64]	; (d5b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5ac2:	681a      	ldr	r2, [r3, #0]
   d5ac4:	07d1      	lsls	r1, r2, #31
   d5ac6:	bf5c      	itt	pl
   d5ac8:	2201      	movpl	r2, #1
   d5aca:	601a      	strpl	r2, [r3, #0]
   d5acc:	4b0e      	ldr	r3, [pc, #56]	; (d5b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5ace:	681a      	ldr	r2, [r3, #0]
   d5ad0:	07d2      	lsls	r2, r2, #31
   d5ad2:	bf5c      	itt	pl
   d5ad4:	2201      	movpl	r2, #1
   d5ad6:	601a      	strpl	r2, [r3, #0]
   d5ad8:	4770      	bx	lr
   d5ada:	bf00      	nop
   d5adc:	2003e7cc 	.word	0x2003e7cc
   d5ae0:	2003e7c8 	.word	0x2003e7c8
   d5ae4:	2003e7c4 	.word	0x2003e7c4
   d5ae8:	2003e7c0 	.word	0x2003e7c0
   d5aec:	2003e7bc 	.word	0x2003e7bc
   d5af0:	2003e7b8 	.word	0x2003e7b8
   d5af4:	2003e7b4 	.word	0x2003e7b4
   d5af8:	2003e7b0 	.word	0x2003e7b0
   d5afc:	2003e7ac 	.word	0x2003e7ac
   d5b00:	2003e7a8 	.word	0x2003e7a8
   d5b04:	2003e7a4 	.word	0x2003e7a4
   d5b08:	2003e7a0 	.word	0x2003e7a0

000d5b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b0c:	4b18      	ldr	r3, [pc, #96]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b0e:	681a      	ldr	r2, [r3, #0]
   d5b10:	07d1      	lsls	r1, r2, #31
   d5b12:	bf5c      	itt	pl
   d5b14:	2201      	movpl	r2, #1
   d5b16:	601a      	strpl	r2, [r3, #0]
   d5b18:	4b16      	ldr	r3, [pc, #88]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b1a:	681a      	ldr	r2, [r3, #0]
   d5b1c:	07d2      	lsls	r2, r2, #31
   d5b1e:	bf5c      	itt	pl
   d5b20:	2201      	movpl	r2, #1
   d5b22:	601a      	strpl	r2, [r3, #0]
   d5b24:	4b14      	ldr	r3, [pc, #80]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b26:	681a      	ldr	r2, [r3, #0]
   d5b28:	07d0      	lsls	r0, r2, #31
   d5b2a:	bf5c      	itt	pl
   d5b2c:	2201      	movpl	r2, #1
   d5b2e:	601a      	strpl	r2, [r3, #0]
   d5b30:	4b12      	ldr	r3, [pc, #72]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b32:	681a      	ldr	r2, [r3, #0]
   d5b34:	07d1      	lsls	r1, r2, #31
   d5b36:	bf5c      	itt	pl
   d5b38:	2201      	movpl	r2, #1
   d5b3a:	601a      	strpl	r2, [r3, #0]
   d5b3c:	4b10      	ldr	r3, [pc, #64]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b3e:	681a      	ldr	r2, [r3, #0]
   d5b40:	07d2      	lsls	r2, r2, #31
   d5b42:	bf5c      	itt	pl
   d5b44:	2201      	movpl	r2, #1
   d5b46:	601a      	strpl	r2, [r3, #0]
   d5b48:	4b0e      	ldr	r3, [pc, #56]	; (d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b4a:	681a      	ldr	r2, [r3, #0]
   d5b4c:	07d0      	lsls	r0, r2, #31
   d5b4e:	bf5c      	itt	pl
   d5b50:	2201      	movpl	r2, #1
   d5b52:	601a      	strpl	r2, [r3, #0]
   d5b54:	4b0c      	ldr	r3, [pc, #48]	; (d5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b56:	681a      	ldr	r2, [r3, #0]
   d5b58:	07d1      	lsls	r1, r2, #31
   d5b5a:	bf5c      	itt	pl
   d5b5c:	2201      	movpl	r2, #1
   d5b5e:	601a      	strpl	r2, [r3, #0]
   d5b60:	4b0a      	ldr	r3, [pc, #40]	; (d5b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b62:	681a      	ldr	r2, [r3, #0]
   d5b64:	07d2      	lsls	r2, r2, #31
   d5b66:	bf5c      	itt	pl
   d5b68:	2201      	movpl	r2, #1
   d5b6a:	601a      	strpl	r2, [r3, #0]
   d5b6c:	4770      	bx	lr
   d5b6e:	bf00      	nop
   d5b70:	2003e7ec 	.word	0x2003e7ec
   d5b74:	2003e7e8 	.word	0x2003e7e8
   d5b78:	2003e7e4 	.word	0x2003e7e4
   d5b7c:	2003e7e0 	.word	0x2003e7e0
   d5b80:	2003e7dc 	.word	0x2003e7dc
   d5b84:	2003e7d8 	.word	0x2003e7d8
   d5b88:	2003e7d4 	.word	0x2003e7d4
   d5b8c:	2003e7d0 	.word	0x2003e7d0

000d5b90 <__aeabi_drsub>:
   d5b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5b94:	e002      	b.n	d5b9c <__adddf3>
   d5b96:	bf00      	nop

000d5b98 <__aeabi_dsub>:
   d5b98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5b9c <__adddf3>:
   d5b9c:	b530      	push	{r4, r5, lr}
   d5b9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5ba2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5ba6:	ea94 0f05 	teq	r4, r5
   d5baa:	bf08      	it	eq
   d5bac:	ea90 0f02 	teqeq	r0, r2
   d5bb0:	bf1f      	itttt	ne
   d5bb2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5bb6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5bba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5bbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5bc2:	f000 80e2 	beq.w	d5d8a <__adddf3+0x1ee>
   d5bc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5bca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5bce:	bfb8      	it	lt
   d5bd0:	426d      	neglt	r5, r5
   d5bd2:	dd0c      	ble.n	d5bee <__adddf3+0x52>
   d5bd4:	442c      	add	r4, r5
   d5bd6:	ea80 0202 	eor.w	r2, r0, r2
   d5bda:	ea81 0303 	eor.w	r3, r1, r3
   d5bde:	ea82 0000 	eor.w	r0, r2, r0
   d5be2:	ea83 0101 	eor.w	r1, r3, r1
   d5be6:	ea80 0202 	eor.w	r2, r0, r2
   d5bea:	ea81 0303 	eor.w	r3, r1, r3
   d5bee:	2d36      	cmp	r5, #54	; 0x36
   d5bf0:	bf88      	it	hi
   d5bf2:	bd30      	pophi	{r4, r5, pc}
   d5bf4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5bf8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5bfc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5c00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5c04:	d002      	beq.n	d5c0c <__adddf3+0x70>
   d5c06:	4240      	negs	r0, r0
   d5c08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5c0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5c10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5c14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5c18:	d002      	beq.n	d5c20 <__adddf3+0x84>
   d5c1a:	4252      	negs	r2, r2
   d5c1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5c20:	ea94 0f05 	teq	r4, r5
   d5c24:	f000 80a7 	beq.w	d5d76 <__adddf3+0x1da>
   d5c28:	f1a4 0401 	sub.w	r4, r4, #1
   d5c2c:	f1d5 0e20 	rsbs	lr, r5, #32
   d5c30:	db0d      	blt.n	d5c4e <__adddf3+0xb2>
   d5c32:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5c36:	fa22 f205 	lsr.w	r2, r2, r5
   d5c3a:	1880      	adds	r0, r0, r2
   d5c3c:	f141 0100 	adc.w	r1, r1, #0
   d5c40:	fa03 f20e 	lsl.w	r2, r3, lr
   d5c44:	1880      	adds	r0, r0, r2
   d5c46:	fa43 f305 	asr.w	r3, r3, r5
   d5c4a:	4159      	adcs	r1, r3
   d5c4c:	e00e      	b.n	d5c6c <__adddf3+0xd0>
   d5c4e:	f1a5 0520 	sub.w	r5, r5, #32
   d5c52:	f10e 0e20 	add.w	lr, lr, #32
   d5c56:	2a01      	cmp	r2, #1
   d5c58:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5c5c:	bf28      	it	cs
   d5c5e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5c62:	fa43 f305 	asr.w	r3, r3, r5
   d5c66:	18c0      	adds	r0, r0, r3
   d5c68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5c6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5c70:	d507      	bpl.n	d5c82 <__adddf3+0xe6>
   d5c72:	f04f 0e00 	mov.w	lr, #0
   d5c76:	f1dc 0c00 	rsbs	ip, ip, #0
   d5c7a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5c7e:	eb6e 0101 	sbc.w	r1, lr, r1
   d5c82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5c86:	d31b      	bcc.n	d5cc0 <__adddf3+0x124>
   d5c88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5c8c:	d30c      	bcc.n	d5ca8 <__adddf3+0x10c>
   d5c8e:	0849      	lsrs	r1, r1, #1
   d5c90:	ea5f 0030 	movs.w	r0, r0, rrx
   d5c94:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5c98:	f104 0401 	add.w	r4, r4, #1
   d5c9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5ca0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5ca4:	f080 809a 	bcs.w	d5ddc <__adddf3+0x240>
   d5ca8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5cac:	bf08      	it	eq
   d5cae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5cb2:	f150 0000 	adcs.w	r0, r0, #0
   d5cb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5cba:	ea41 0105 	orr.w	r1, r1, r5
   d5cbe:	bd30      	pop	{r4, r5, pc}
   d5cc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5cc4:	4140      	adcs	r0, r0
   d5cc6:	eb41 0101 	adc.w	r1, r1, r1
   d5cca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5cce:	f1a4 0401 	sub.w	r4, r4, #1
   d5cd2:	d1e9      	bne.n	d5ca8 <__adddf3+0x10c>
   d5cd4:	f091 0f00 	teq	r1, #0
   d5cd8:	bf04      	itt	eq
   d5cda:	4601      	moveq	r1, r0
   d5cdc:	2000      	moveq	r0, #0
   d5cde:	fab1 f381 	clz	r3, r1
   d5ce2:	bf08      	it	eq
   d5ce4:	3320      	addeq	r3, #32
   d5ce6:	f1a3 030b 	sub.w	r3, r3, #11
   d5cea:	f1b3 0220 	subs.w	r2, r3, #32
   d5cee:	da0c      	bge.n	d5d0a <__adddf3+0x16e>
   d5cf0:	320c      	adds	r2, #12
   d5cf2:	dd08      	ble.n	d5d06 <__adddf3+0x16a>
   d5cf4:	f102 0c14 	add.w	ip, r2, #20
   d5cf8:	f1c2 020c 	rsb	r2, r2, #12
   d5cfc:	fa01 f00c 	lsl.w	r0, r1, ip
   d5d00:	fa21 f102 	lsr.w	r1, r1, r2
   d5d04:	e00c      	b.n	d5d20 <__adddf3+0x184>
   d5d06:	f102 0214 	add.w	r2, r2, #20
   d5d0a:	bfd8      	it	le
   d5d0c:	f1c2 0c20 	rsble	ip, r2, #32
   d5d10:	fa01 f102 	lsl.w	r1, r1, r2
   d5d14:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5d18:	bfdc      	itt	le
   d5d1a:	ea41 010c 	orrle.w	r1, r1, ip
   d5d1e:	4090      	lslle	r0, r2
   d5d20:	1ae4      	subs	r4, r4, r3
   d5d22:	bfa2      	ittt	ge
   d5d24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5d28:	4329      	orrge	r1, r5
   d5d2a:	bd30      	popge	{r4, r5, pc}
   d5d2c:	ea6f 0404 	mvn.w	r4, r4
   d5d30:	3c1f      	subs	r4, #31
   d5d32:	da1c      	bge.n	d5d6e <__adddf3+0x1d2>
   d5d34:	340c      	adds	r4, #12
   d5d36:	dc0e      	bgt.n	d5d56 <__adddf3+0x1ba>
   d5d38:	f104 0414 	add.w	r4, r4, #20
   d5d3c:	f1c4 0220 	rsb	r2, r4, #32
   d5d40:	fa20 f004 	lsr.w	r0, r0, r4
   d5d44:	fa01 f302 	lsl.w	r3, r1, r2
   d5d48:	ea40 0003 	orr.w	r0, r0, r3
   d5d4c:	fa21 f304 	lsr.w	r3, r1, r4
   d5d50:	ea45 0103 	orr.w	r1, r5, r3
   d5d54:	bd30      	pop	{r4, r5, pc}
   d5d56:	f1c4 040c 	rsb	r4, r4, #12
   d5d5a:	f1c4 0220 	rsb	r2, r4, #32
   d5d5e:	fa20 f002 	lsr.w	r0, r0, r2
   d5d62:	fa01 f304 	lsl.w	r3, r1, r4
   d5d66:	ea40 0003 	orr.w	r0, r0, r3
   d5d6a:	4629      	mov	r1, r5
   d5d6c:	bd30      	pop	{r4, r5, pc}
   d5d6e:	fa21 f004 	lsr.w	r0, r1, r4
   d5d72:	4629      	mov	r1, r5
   d5d74:	bd30      	pop	{r4, r5, pc}
   d5d76:	f094 0f00 	teq	r4, #0
   d5d7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5d7e:	bf06      	itte	eq
   d5d80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5d84:	3401      	addeq	r4, #1
   d5d86:	3d01      	subne	r5, #1
   d5d88:	e74e      	b.n	d5c28 <__adddf3+0x8c>
   d5d8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5d8e:	bf18      	it	ne
   d5d90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5d94:	d029      	beq.n	d5dea <__adddf3+0x24e>
   d5d96:	ea94 0f05 	teq	r4, r5
   d5d9a:	bf08      	it	eq
   d5d9c:	ea90 0f02 	teqeq	r0, r2
   d5da0:	d005      	beq.n	d5dae <__adddf3+0x212>
   d5da2:	ea54 0c00 	orrs.w	ip, r4, r0
   d5da6:	bf04      	itt	eq
   d5da8:	4619      	moveq	r1, r3
   d5daa:	4610      	moveq	r0, r2
   d5dac:	bd30      	pop	{r4, r5, pc}
   d5dae:	ea91 0f03 	teq	r1, r3
   d5db2:	bf1e      	ittt	ne
   d5db4:	2100      	movne	r1, #0
   d5db6:	2000      	movne	r0, #0
   d5db8:	bd30      	popne	{r4, r5, pc}
   d5dba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5dbe:	d105      	bne.n	d5dcc <__adddf3+0x230>
   d5dc0:	0040      	lsls	r0, r0, #1
   d5dc2:	4149      	adcs	r1, r1
   d5dc4:	bf28      	it	cs
   d5dc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5dca:	bd30      	pop	{r4, r5, pc}
   d5dcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5dd0:	bf3c      	itt	cc
   d5dd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5dd6:	bd30      	popcc	{r4, r5, pc}
   d5dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5ddc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5de0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5de4:	f04f 0000 	mov.w	r0, #0
   d5de8:	bd30      	pop	{r4, r5, pc}
   d5dea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5dee:	bf1a      	itte	ne
   d5df0:	4619      	movne	r1, r3
   d5df2:	4610      	movne	r0, r2
   d5df4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5df8:	bf1c      	itt	ne
   d5dfa:	460b      	movne	r3, r1
   d5dfc:	4602      	movne	r2, r0
   d5dfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5e02:	bf06      	itte	eq
   d5e04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5e08:	ea91 0f03 	teqeq	r1, r3
   d5e0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5e10:	bd30      	pop	{r4, r5, pc}
   d5e12:	bf00      	nop

000d5e14 <__aeabi_ui2d>:
   d5e14:	f090 0f00 	teq	r0, #0
   d5e18:	bf04      	itt	eq
   d5e1a:	2100      	moveq	r1, #0
   d5e1c:	4770      	bxeq	lr
   d5e1e:	b530      	push	{r4, r5, lr}
   d5e20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e28:	f04f 0500 	mov.w	r5, #0
   d5e2c:	f04f 0100 	mov.w	r1, #0
   d5e30:	e750      	b.n	d5cd4 <__adddf3+0x138>
   d5e32:	bf00      	nop

000d5e34 <__aeabi_i2d>:
   d5e34:	f090 0f00 	teq	r0, #0
   d5e38:	bf04      	itt	eq
   d5e3a:	2100      	moveq	r1, #0
   d5e3c:	4770      	bxeq	lr
   d5e3e:	b530      	push	{r4, r5, lr}
   d5e40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5e4c:	bf48      	it	mi
   d5e4e:	4240      	negmi	r0, r0
   d5e50:	f04f 0100 	mov.w	r1, #0
   d5e54:	e73e      	b.n	d5cd4 <__adddf3+0x138>
   d5e56:	bf00      	nop

000d5e58 <__aeabi_f2d>:
   d5e58:	0042      	lsls	r2, r0, #1
   d5e5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5e5e:	ea4f 0131 	mov.w	r1, r1, rrx
   d5e62:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5e66:	bf1f      	itttt	ne
   d5e68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5e6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5e70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5e74:	4770      	bxne	lr
   d5e76:	f092 0f00 	teq	r2, #0
   d5e7a:	bf14      	ite	ne
   d5e7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5e80:	4770      	bxeq	lr
   d5e82:	b530      	push	{r4, r5, lr}
   d5e84:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5e88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5e90:	e720      	b.n	d5cd4 <__adddf3+0x138>
   d5e92:	bf00      	nop

000d5e94 <__aeabi_ul2d>:
   d5e94:	ea50 0201 	orrs.w	r2, r0, r1
   d5e98:	bf08      	it	eq
   d5e9a:	4770      	bxeq	lr
   d5e9c:	b530      	push	{r4, r5, lr}
   d5e9e:	f04f 0500 	mov.w	r5, #0
   d5ea2:	e00a      	b.n	d5eba <__aeabi_l2d+0x16>

000d5ea4 <__aeabi_l2d>:
   d5ea4:	ea50 0201 	orrs.w	r2, r0, r1
   d5ea8:	bf08      	it	eq
   d5eaa:	4770      	bxeq	lr
   d5eac:	b530      	push	{r4, r5, lr}
   d5eae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5eb2:	d502      	bpl.n	d5eba <__aeabi_l2d+0x16>
   d5eb4:	4240      	negs	r0, r0
   d5eb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5eba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ebe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ec2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5ec6:	f43f aedc 	beq.w	d5c82 <__adddf3+0xe6>
   d5eca:	f04f 0203 	mov.w	r2, #3
   d5ece:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ed2:	bf18      	it	ne
   d5ed4:	3203      	addne	r2, #3
   d5ed6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5eda:	bf18      	it	ne
   d5edc:	3203      	addne	r2, #3
   d5ede:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5ee2:	f1c2 0320 	rsb	r3, r2, #32
   d5ee6:	fa00 fc03 	lsl.w	ip, r0, r3
   d5eea:	fa20 f002 	lsr.w	r0, r0, r2
   d5eee:	fa01 fe03 	lsl.w	lr, r1, r3
   d5ef2:	ea40 000e 	orr.w	r0, r0, lr
   d5ef6:	fa21 f102 	lsr.w	r1, r1, r2
   d5efa:	4414      	add	r4, r2
   d5efc:	e6c1      	b.n	d5c82 <__adddf3+0xe6>
   d5efe:	bf00      	nop

000d5f00 <__aeabi_dmul>:
   d5f00:	b570      	push	{r4, r5, r6, lr}
   d5f02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5f06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5f0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5f0e:	bf1d      	ittte	ne
   d5f10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5f14:	ea94 0f0c 	teqne	r4, ip
   d5f18:	ea95 0f0c 	teqne	r5, ip
   d5f1c:	f000 f8de 	bleq	d60dc <__aeabi_dmul+0x1dc>
   d5f20:	442c      	add	r4, r5
   d5f22:	ea81 0603 	eor.w	r6, r1, r3
   d5f26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5f2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5f2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5f32:	bf18      	it	ne
   d5f34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5f38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5f40:	d038      	beq.n	d5fb4 <__aeabi_dmul+0xb4>
   d5f42:	fba0 ce02 	umull	ip, lr, r0, r2
   d5f46:	f04f 0500 	mov.w	r5, #0
   d5f4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5f4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5f52:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5f56:	f04f 0600 	mov.w	r6, #0
   d5f5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5f5e:	f09c 0f00 	teq	ip, #0
   d5f62:	bf18      	it	ne
   d5f64:	f04e 0e01 	orrne.w	lr, lr, #1
   d5f68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5f6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5f70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5f74:	d204      	bcs.n	d5f80 <__aeabi_dmul+0x80>
   d5f76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5f7a:	416d      	adcs	r5, r5
   d5f7c:	eb46 0606 	adc.w	r6, r6, r6
   d5f80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5f84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5f88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5f8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5f90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5f94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5f98:	bf88      	it	hi
   d5f9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5f9e:	d81e      	bhi.n	d5fde <__aeabi_dmul+0xde>
   d5fa0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5fa4:	bf08      	it	eq
   d5fa6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5faa:	f150 0000 	adcs.w	r0, r0, #0
   d5fae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fb2:	bd70      	pop	{r4, r5, r6, pc}
   d5fb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5fb8:	ea46 0101 	orr.w	r1, r6, r1
   d5fbc:	ea40 0002 	orr.w	r0, r0, r2
   d5fc0:	ea81 0103 	eor.w	r1, r1, r3
   d5fc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5fc8:	bfc2      	ittt	gt
   d5fca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5fce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5fd2:	bd70      	popgt	{r4, r5, r6, pc}
   d5fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fd8:	f04f 0e00 	mov.w	lr, #0
   d5fdc:	3c01      	subs	r4, #1
   d5fde:	f300 80ab 	bgt.w	d6138 <__aeabi_dmul+0x238>
   d5fe2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5fe6:	bfde      	ittt	le
   d5fe8:	2000      	movle	r0, #0
   d5fea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5fee:	bd70      	pople	{r4, r5, r6, pc}
   d5ff0:	f1c4 0400 	rsb	r4, r4, #0
   d5ff4:	3c20      	subs	r4, #32
   d5ff6:	da35      	bge.n	d6064 <__aeabi_dmul+0x164>
   d5ff8:	340c      	adds	r4, #12
   d5ffa:	dc1b      	bgt.n	d6034 <__aeabi_dmul+0x134>
   d5ffc:	f104 0414 	add.w	r4, r4, #20
   d6000:	f1c4 0520 	rsb	r5, r4, #32
   d6004:	fa00 f305 	lsl.w	r3, r0, r5
   d6008:	fa20 f004 	lsr.w	r0, r0, r4
   d600c:	fa01 f205 	lsl.w	r2, r1, r5
   d6010:	ea40 0002 	orr.w	r0, r0, r2
   d6014:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6018:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d601c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6020:	fa21 f604 	lsr.w	r6, r1, r4
   d6024:	eb42 0106 	adc.w	r1, r2, r6
   d6028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d602c:	bf08      	it	eq
   d602e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6032:	bd70      	pop	{r4, r5, r6, pc}
   d6034:	f1c4 040c 	rsb	r4, r4, #12
   d6038:	f1c4 0520 	rsb	r5, r4, #32
   d603c:	fa00 f304 	lsl.w	r3, r0, r4
   d6040:	fa20 f005 	lsr.w	r0, r0, r5
   d6044:	fa01 f204 	lsl.w	r2, r1, r4
   d6048:	ea40 0002 	orr.w	r0, r0, r2
   d604c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6050:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6054:	f141 0100 	adc.w	r1, r1, #0
   d6058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d605c:	bf08      	it	eq
   d605e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6062:	bd70      	pop	{r4, r5, r6, pc}
   d6064:	f1c4 0520 	rsb	r5, r4, #32
   d6068:	fa00 f205 	lsl.w	r2, r0, r5
   d606c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6070:	fa20 f304 	lsr.w	r3, r0, r4
   d6074:	fa01 f205 	lsl.w	r2, r1, r5
   d6078:	ea43 0302 	orr.w	r3, r3, r2
   d607c:	fa21 f004 	lsr.w	r0, r1, r4
   d6080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6084:	fa21 f204 	lsr.w	r2, r1, r4
   d6088:	ea20 0002 	bic.w	r0, r0, r2
   d608c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6090:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6094:	bf08      	it	eq
   d6096:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d609a:	bd70      	pop	{r4, r5, r6, pc}
   d609c:	f094 0f00 	teq	r4, #0
   d60a0:	d10f      	bne.n	d60c2 <__aeabi_dmul+0x1c2>
   d60a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d60a6:	0040      	lsls	r0, r0, #1
   d60a8:	eb41 0101 	adc.w	r1, r1, r1
   d60ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d60b0:	bf08      	it	eq
   d60b2:	3c01      	subeq	r4, #1
   d60b4:	d0f7      	beq.n	d60a6 <__aeabi_dmul+0x1a6>
   d60b6:	ea41 0106 	orr.w	r1, r1, r6
   d60ba:	f095 0f00 	teq	r5, #0
   d60be:	bf18      	it	ne
   d60c0:	4770      	bxne	lr
   d60c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d60c6:	0052      	lsls	r2, r2, #1
   d60c8:	eb43 0303 	adc.w	r3, r3, r3
   d60cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d60d0:	bf08      	it	eq
   d60d2:	3d01      	subeq	r5, #1
   d60d4:	d0f7      	beq.n	d60c6 <__aeabi_dmul+0x1c6>
   d60d6:	ea43 0306 	orr.w	r3, r3, r6
   d60da:	4770      	bx	lr
   d60dc:	ea94 0f0c 	teq	r4, ip
   d60e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d60e4:	bf18      	it	ne
   d60e6:	ea95 0f0c 	teqne	r5, ip
   d60ea:	d00c      	beq.n	d6106 <__aeabi_dmul+0x206>
   d60ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d60f0:	bf18      	it	ne
   d60f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d60f6:	d1d1      	bne.n	d609c <__aeabi_dmul+0x19c>
   d60f8:	ea81 0103 	eor.w	r1, r1, r3
   d60fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6100:	f04f 0000 	mov.w	r0, #0
   d6104:	bd70      	pop	{r4, r5, r6, pc}
   d6106:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d610a:	bf06      	itte	eq
   d610c:	4610      	moveq	r0, r2
   d610e:	4619      	moveq	r1, r3
   d6110:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6114:	d019      	beq.n	d614a <__aeabi_dmul+0x24a>
   d6116:	ea94 0f0c 	teq	r4, ip
   d611a:	d102      	bne.n	d6122 <__aeabi_dmul+0x222>
   d611c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6120:	d113      	bne.n	d614a <__aeabi_dmul+0x24a>
   d6122:	ea95 0f0c 	teq	r5, ip
   d6126:	d105      	bne.n	d6134 <__aeabi_dmul+0x234>
   d6128:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d612c:	bf1c      	itt	ne
   d612e:	4610      	movne	r0, r2
   d6130:	4619      	movne	r1, r3
   d6132:	d10a      	bne.n	d614a <__aeabi_dmul+0x24a>
   d6134:	ea81 0103 	eor.w	r1, r1, r3
   d6138:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d613c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6140:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6144:	f04f 0000 	mov.w	r0, #0
   d6148:	bd70      	pop	{r4, r5, r6, pc}
   d614a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d614e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6152:	bd70      	pop	{r4, r5, r6, pc}

000d6154 <__aeabi_ddiv>:
   d6154:	b570      	push	{r4, r5, r6, lr}
   d6156:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d615a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d615e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6162:	bf1d      	ittte	ne
   d6164:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6168:	ea94 0f0c 	teqne	r4, ip
   d616c:	ea95 0f0c 	teqne	r5, ip
   d6170:	f000 f8a7 	bleq	d62c2 <__aeabi_ddiv+0x16e>
   d6174:	eba4 0405 	sub.w	r4, r4, r5
   d6178:	ea81 0e03 	eor.w	lr, r1, r3
   d617c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6180:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6184:	f000 8088 	beq.w	d6298 <__aeabi_ddiv+0x144>
   d6188:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d618c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6190:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6194:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6198:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d619c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d61a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d61a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d61a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d61ac:	429d      	cmp	r5, r3
   d61ae:	bf08      	it	eq
   d61b0:	4296      	cmpeq	r6, r2
   d61b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d61b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d61ba:	d202      	bcs.n	d61c2 <__aeabi_ddiv+0x6e>
   d61bc:	085b      	lsrs	r3, r3, #1
   d61be:	ea4f 0232 	mov.w	r2, r2, rrx
   d61c2:	1ab6      	subs	r6, r6, r2
   d61c4:	eb65 0503 	sbc.w	r5, r5, r3
   d61c8:	085b      	lsrs	r3, r3, #1
   d61ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d61ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d61d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d61d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d61da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61de:	bf22      	ittt	cs
   d61e0:	1ab6      	subcs	r6, r6, r2
   d61e2:	4675      	movcs	r5, lr
   d61e4:	ea40 000c 	orrcs.w	r0, r0, ip
   d61e8:	085b      	lsrs	r3, r3, #1
   d61ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d61ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d61f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61f6:	bf22      	ittt	cs
   d61f8:	1ab6      	subcs	r6, r6, r2
   d61fa:	4675      	movcs	r5, lr
   d61fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6200:	085b      	lsrs	r3, r3, #1
   d6202:	ea4f 0232 	mov.w	r2, r2, rrx
   d6206:	ebb6 0e02 	subs.w	lr, r6, r2
   d620a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d620e:	bf22      	ittt	cs
   d6210:	1ab6      	subcs	r6, r6, r2
   d6212:	4675      	movcs	r5, lr
   d6214:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6218:	085b      	lsrs	r3, r3, #1
   d621a:	ea4f 0232 	mov.w	r2, r2, rrx
   d621e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6222:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6226:	bf22      	ittt	cs
   d6228:	1ab6      	subcs	r6, r6, r2
   d622a:	4675      	movcs	r5, lr
   d622c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6230:	ea55 0e06 	orrs.w	lr, r5, r6
   d6234:	d018      	beq.n	d6268 <__aeabi_ddiv+0x114>
   d6236:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d623a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d623e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6242:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6246:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d624a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d624e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6252:	d1c0      	bne.n	d61d6 <__aeabi_ddiv+0x82>
   d6254:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6258:	d10b      	bne.n	d6272 <__aeabi_ddiv+0x11e>
   d625a:	ea41 0100 	orr.w	r1, r1, r0
   d625e:	f04f 0000 	mov.w	r0, #0
   d6262:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6266:	e7b6      	b.n	d61d6 <__aeabi_ddiv+0x82>
   d6268:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d626c:	bf04      	itt	eq
   d626e:	4301      	orreq	r1, r0
   d6270:	2000      	moveq	r0, #0
   d6272:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6276:	bf88      	it	hi
   d6278:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d627c:	f63f aeaf 	bhi.w	d5fde <__aeabi_dmul+0xde>
   d6280:	ebb5 0c03 	subs.w	ip, r5, r3
   d6284:	bf04      	itt	eq
   d6286:	ebb6 0c02 	subseq.w	ip, r6, r2
   d628a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d628e:	f150 0000 	adcs.w	r0, r0, #0
   d6292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6296:	bd70      	pop	{r4, r5, r6, pc}
   d6298:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d629c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d62a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d62a4:	bfc2      	ittt	gt
   d62a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d62aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d62ae:	bd70      	popgt	{r4, r5, r6, pc}
   d62b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62b4:	f04f 0e00 	mov.w	lr, #0
   d62b8:	3c01      	subs	r4, #1
   d62ba:	e690      	b.n	d5fde <__aeabi_dmul+0xde>
   d62bc:	ea45 0e06 	orr.w	lr, r5, r6
   d62c0:	e68d      	b.n	d5fde <__aeabi_dmul+0xde>
   d62c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d62c6:	ea94 0f0c 	teq	r4, ip
   d62ca:	bf08      	it	eq
   d62cc:	ea95 0f0c 	teqeq	r5, ip
   d62d0:	f43f af3b 	beq.w	d614a <__aeabi_dmul+0x24a>
   d62d4:	ea94 0f0c 	teq	r4, ip
   d62d8:	d10a      	bne.n	d62f0 <__aeabi_ddiv+0x19c>
   d62da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d62de:	f47f af34 	bne.w	d614a <__aeabi_dmul+0x24a>
   d62e2:	ea95 0f0c 	teq	r5, ip
   d62e6:	f47f af25 	bne.w	d6134 <__aeabi_dmul+0x234>
   d62ea:	4610      	mov	r0, r2
   d62ec:	4619      	mov	r1, r3
   d62ee:	e72c      	b.n	d614a <__aeabi_dmul+0x24a>
   d62f0:	ea95 0f0c 	teq	r5, ip
   d62f4:	d106      	bne.n	d6304 <__aeabi_ddiv+0x1b0>
   d62f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d62fa:	f43f aefd 	beq.w	d60f8 <__aeabi_dmul+0x1f8>
   d62fe:	4610      	mov	r0, r2
   d6300:	4619      	mov	r1, r3
   d6302:	e722      	b.n	d614a <__aeabi_dmul+0x24a>
   d6304:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6308:	bf18      	it	ne
   d630a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d630e:	f47f aec5 	bne.w	d609c <__aeabi_dmul+0x19c>
   d6312:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6316:	f47f af0d 	bne.w	d6134 <__aeabi_dmul+0x234>
   d631a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d631e:	f47f aeeb 	bne.w	d60f8 <__aeabi_dmul+0x1f8>
   d6322:	e712      	b.n	d614a <__aeabi_dmul+0x24a>

000d6324 <__gedf2>:
   d6324:	f04f 3cff 	mov.w	ip, #4294967295
   d6328:	e006      	b.n	d6338 <__cmpdf2+0x4>
   d632a:	bf00      	nop

000d632c <__ledf2>:
   d632c:	f04f 0c01 	mov.w	ip, #1
   d6330:	e002      	b.n	d6338 <__cmpdf2+0x4>
   d6332:	bf00      	nop

000d6334 <__cmpdf2>:
   d6334:	f04f 0c01 	mov.w	ip, #1
   d6338:	f84d cd04 	str.w	ip, [sp, #-4]!
   d633c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6344:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6348:	bf18      	it	ne
   d634a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d634e:	d01b      	beq.n	d6388 <__cmpdf2+0x54>
   d6350:	b001      	add	sp, #4
   d6352:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6356:	bf0c      	ite	eq
   d6358:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d635c:	ea91 0f03 	teqne	r1, r3
   d6360:	bf02      	ittt	eq
   d6362:	ea90 0f02 	teqeq	r0, r2
   d6366:	2000      	moveq	r0, #0
   d6368:	4770      	bxeq	lr
   d636a:	f110 0f00 	cmn.w	r0, #0
   d636e:	ea91 0f03 	teq	r1, r3
   d6372:	bf58      	it	pl
   d6374:	4299      	cmppl	r1, r3
   d6376:	bf08      	it	eq
   d6378:	4290      	cmpeq	r0, r2
   d637a:	bf2c      	ite	cs
   d637c:	17d8      	asrcs	r0, r3, #31
   d637e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6382:	f040 0001 	orr.w	r0, r0, #1
   d6386:	4770      	bx	lr
   d6388:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d638c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6390:	d102      	bne.n	d6398 <__cmpdf2+0x64>
   d6392:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6396:	d107      	bne.n	d63a8 <__cmpdf2+0x74>
   d6398:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d639c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d63a0:	d1d6      	bne.n	d6350 <__cmpdf2+0x1c>
   d63a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d63a6:	d0d3      	beq.n	d6350 <__cmpdf2+0x1c>
   d63a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d63ac:	4770      	bx	lr
   d63ae:	bf00      	nop

000d63b0 <__aeabi_cdrcmple>:
   d63b0:	4684      	mov	ip, r0
   d63b2:	4610      	mov	r0, r2
   d63b4:	4662      	mov	r2, ip
   d63b6:	468c      	mov	ip, r1
   d63b8:	4619      	mov	r1, r3
   d63ba:	4663      	mov	r3, ip
   d63bc:	e000      	b.n	d63c0 <__aeabi_cdcmpeq>
   d63be:	bf00      	nop

000d63c0 <__aeabi_cdcmpeq>:
   d63c0:	b501      	push	{r0, lr}
   d63c2:	f7ff ffb7 	bl	d6334 <__cmpdf2>
   d63c6:	2800      	cmp	r0, #0
   d63c8:	bf48      	it	mi
   d63ca:	f110 0f00 	cmnmi.w	r0, #0
   d63ce:	bd01      	pop	{r0, pc}

000d63d0 <__aeabi_dcmpeq>:
   d63d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63d4:	f7ff fff4 	bl	d63c0 <__aeabi_cdcmpeq>
   d63d8:	bf0c      	ite	eq
   d63da:	2001      	moveq	r0, #1
   d63dc:	2000      	movne	r0, #0
   d63de:	f85d fb08 	ldr.w	pc, [sp], #8
   d63e2:	bf00      	nop

000d63e4 <__aeabi_dcmplt>:
   d63e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63e8:	f7ff ffea 	bl	d63c0 <__aeabi_cdcmpeq>
   d63ec:	bf34      	ite	cc
   d63ee:	2001      	movcc	r0, #1
   d63f0:	2000      	movcs	r0, #0
   d63f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d63f6:	bf00      	nop

000d63f8 <__aeabi_dcmple>:
   d63f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63fc:	f7ff ffe0 	bl	d63c0 <__aeabi_cdcmpeq>
   d6400:	bf94      	ite	ls
   d6402:	2001      	movls	r0, #1
   d6404:	2000      	movhi	r0, #0
   d6406:	f85d fb08 	ldr.w	pc, [sp], #8
   d640a:	bf00      	nop

000d640c <__aeabi_dcmpge>:
   d640c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6410:	f7ff ffce 	bl	d63b0 <__aeabi_cdrcmple>
   d6414:	bf94      	ite	ls
   d6416:	2001      	movls	r0, #1
   d6418:	2000      	movhi	r0, #0
   d641a:	f85d fb08 	ldr.w	pc, [sp], #8
   d641e:	bf00      	nop

000d6420 <__aeabi_dcmpgt>:
   d6420:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6424:	f7ff ffc4 	bl	d63b0 <__aeabi_cdrcmple>
   d6428:	bf34      	ite	cc
   d642a:	2001      	movcc	r0, #1
   d642c:	2000      	movcs	r0, #0
   d642e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6432:	bf00      	nop

000d6434 <__aeabi_dcmpun>:
   d6434:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6438:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d643c:	d102      	bne.n	d6444 <__aeabi_dcmpun+0x10>
   d643e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6442:	d10a      	bne.n	d645a <__aeabi_dcmpun+0x26>
   d6444:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6448:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d644c:	d102      	bne.n	d6454 <__aeabi_dcmpun+0x20>
   d644e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6452:	d102      	bne.n	d645a <__aeabi_dcmpun+0x26>
   d6454:	f04f 0000 	mov.w	r0, #0
   d6458:	4770      	bx	lr
   d645a:	f04f 0001 	mov.w	r0, #1
   d645e:	4770      	bx	lr

000d6460 <__aeabi_d2iz>:
   d6460:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6464:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6468:	d215      	bcs.n	d6496 <__aeabi_d2iz+0x36>
   d646a:	d511      	bpl.n	d6490 <__aeabi_d2iz+0x30>
   d646c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6470:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6474:	d912      	bls.n	d649c <__aeabi_d2iz+0x3c>
   d6476:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d647a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d647e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6482:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6486:	fa23 f002 	lsr.w	r0, r3, r2
   d648a:	bf18      	it	ne
   d648c:	4240      	negne	r0, r0
   d648e:	4770      	bx	lr
   d6490:	f04f 0000 	mov.w	r0, #0
   d6494:	4770      	bx	lr
   d6496:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d649a:	d105      	bne.n	d64a8 <__aeabi_d2iz+0x48>
   d649c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d64a0:	bf08      	it	eq
   d64a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d64a6:	4770      	bx	lr
   d64a8:	f04f 0000 	mov.w	r0, #0
   d64ac:	4770      	bx	lr
   d64ae:	bf00      	nop

000d64b0 <__aeabi_d2uiz>:
   d64b0:	004a      	lsls	r2, r1, #1
   d64b2:	d211      	bcs.n	d64d8 <__aeabi_d2uiz+0x28>
   d64b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d64b8:	d211      	bcs.n	d64de <__aeabi_d2uiz+0x2e>
   d64ba:	d50d      	bpl.n	d64d8 <__aeabi_d2uiz+0x28>
   d64bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d64c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d64c4:	d40e      	bmi.n	d64e4 <__aeabi_d2uiz+0x34>
   d64c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d64ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d64ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d64d2:	fa23 f002 	lsr.w	r0, r3, r2
   d64d6:	4770      	bx	lr
   d64d8:	f04f 0000 	mov.w	r0, #0
   d64dc:	4770      	bx	lr
   d64de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d64e2:	d102      	bne.n	d64ea <__aeabi_d2uiz+0x3a>
   d64e4:	f04f 30ff 	mov.w	r0, #4294967295
   d64e8:	4770      	bx	lr
   d64ea:	f04f 0000 	mov.w	r0, #0
   d64ee:	4770      	bx	lr

000d64f0 <__aeabi_d2f>:
   d64f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d64f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d64f8:	bf24      	itt	cs
   d64fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d64fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6502:	d90d      	bls.n	d6520 <__aeabi_d2f+0x30>
   d6504:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6508:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d650c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6510:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6514:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6518:	bf08      	it	eq
   d651a:	f020 0001 	biceq.w	r0, r0, #1
   d651e:	4770      	bx	lr
   d6520:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6524:	d121      	bne.n	d656a <__aeabi_d2f+0x7a>
   d6526:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d652a:	bfbc      	itt	lt
   d652c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6530:	4770      	bxlt	lr
   d6532:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6536:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d653a:	f1c2 0218 	rsb	r2, r2, #24
   d653e:	f1c2 0c20 	rsb	ip, r2, #32
   d6542:	fa10 f30c 	lsls.w	r3, r0, ip
   d6546:	fa20 f002 	lsr.w	r0, r0, r2
   d654a:	bf18      	it	ne
   d654c:	f040 0001 	orrne.w	r0, r0, #1
   d6550:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6554:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6558:	fa03 fc0c 	lsl.w	ip, r3, ip
   d655c:	ea40 000c 	orr.w	r0, r0, ip
   d6560:	fa23 f302 	lsr.w	r3, r3, r2
   d6564:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6568:	e7cc      	b.n	d6504 <__aeabi_d2f+0x14>
   d656a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d656e:	d107      	bne.n	d6580 <__aeabi_d2f+0x90>
   d6570:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6574:	bf1e      	ittt	ne
   d6576:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d657a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d657e:	4770      	bxne	lr
   d6580:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6584:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6588:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d658c:	4770      	bx	lr
   d658e:	bf00      	nop

000d6590 <__cxa_atexit>:
   d6590:	b510      	push	{r4, lr}
   d6592:	4c05      	ldr	r4, [pc, #20]	; (d65a8 <__cxa_atexit+0x18>)
   d6594:	4613      	mov	r3, r2
   d6596:	b12c      	cbz	r4, d65a4 <__cxa_atexit+0x14>
   d6598:	460a      	mov	r2, r1
   d659a:	4601      	mov	r1, r0
   d659c:	2002      	movs	r0, #2
   d659e:	f3af 8000 	nop.w
   d65a2:	bd10      	pop	{r4, pc}
   d65a4:	4620      	mov	r0, r4
   d65a6:	bd10      	pop	{r4, pc}
   d65a8:	00000000 	.word	0x00000000

000d65ac <memcpy>:
   d65ac:	b510      	push	{r4, lr}
   d65ae:	1e43      	subs	r3, r0, #1
   d65b0:	440a      	add	r2, r1
   d65b2:	4291      	cmp	r1, r2
   d65b4:	d004      	beq.n	d65c0 <memcpy+0x14>
   d65b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d65ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d65be:	e7f8      	b.n	d65b2 <memcpy+0x6>
   d65c0:	bd10      	pop	{r4, pc}

000d65c2 <memset>:
   d65c2:	4402      	add	r2, r0
   d65c4:	4603      	mov	r3, r0
   d65c6:	4293      	cmp	r3, r2
   d65c8:	d002      	beq.n	d65d0 <memset+0xe>
   d65ca:	f803 1b01 	strb.w	r1, [r3], #1
   d65ce:	e7fa      	b.n	d65c6 <memset+0x4>
   d65d0:	4770      	bx	lr
	...

000d65d4 <srand>:
   d65d4:	b538      	push	{r3, r4, r5, lr}
   d65d6:	4b12      	ldr	r3, [pc, #72]	; (d6620 <srand+0x4c>)
   d65d8:	681c      	ldr	r4, [r3, #0]
   d65da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d65dc:	4605      	mov	r5, r0
   d65de:	b9d3      	cbnz	r3, d6616 <srand+0x42>
   d65e0:	2018      	movs	r0, #24
   d65e2:	f7fe fb0d 	bl	d4c00 <malloc>
   d65e6:	f243 330e 	movw	r3, #13070	; 0x330e
   d65ea:	63a0      	str	r0, [r4, #56]	; 0x38
   d65ec:	8003      	strh	r3, [r0, #0]
   d65ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d65f2:	8043      	strh	r3, [r0, #2]
   d65f4:	f241 2334 	movw	r3, #4660	; 0x1234
   d65f8:	8083      	strh	r3, [r0, #4]
   d65fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d65fe:	80c3      	strh	r3, [r0, #6]
   d6600:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6604:	8103      	strh	r3, [r0, #8]
   d6606:	2305      	movs	r3, #5
   d6608:	8143      	strh	r3, [r0, #10]
   d660a:	230b      	movs	r3, #11
   d660c:	8183      	strh	r3, [r0, #12]
   d660e:	2201      	movs	r2, #1
   d6610:	2300      	movs	r3, #0
   d6612:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6618:	2200      	movs	r2, #0
   d661a:	611d      	str	r5, [r3, #16]
   d661c:	615a      	str	r2, [r3, #20]
   d661e:	bd38      	pop	{r3, r4, r5, pc}
   d6620:	2003e330 	.word	0x2003e330

000d6624 <strlen>:
   d6624:	4603      	mov	r3, r0
   d6626:	f813 2b01 	ldrb.w	r2, [r3], #1
   d662a:	2a00      	cmp	r2, #0
   d662c:	d1fb      	bne.n	d6626 <strlen+0x2>
   d662e:	1a18      	subs	r0, r3, r0
   d6630:	3801      	subs	r0, #1
   d6632:	4770      	bx	lr

000d6634 <dynalib_user>:
   d6634:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6644:	0000 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
   d6654:	2e2e 002e 414d 3358 3130 3530 7720 7361     ....MAX30105 was
   d6664:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
   d6674:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
   d6684:	6f70 6577 2e72 0020 6c50 6361 2065 6f79     power. .Place yo
   d6694:	7275 6920 646e 7865 6620 6e69 6567 2072     ur index finger 
   d66a4:	6e6f 7420 6568 7320 6e65 6f73 2072 6977     on the sensor wi
   d66b4:	6874 7320 6574 6461 2079 7270 7365 7573     th steady pressu
   d66c4:	6572 002e 5249 003d 202c 5042 3d4d 2c00     re..IR=., BPM=.,
   d66d4:	4120 6776 4220 4d50 003d 4e20 206f 6966      Avg BPM=. No fi
   d66e4:	676e 7265 003f                              nger?.

000d66ea <_ZL9FIRCoeffs>:
   d66ea:	00ac 0141 0243 039f 0550 0742 0956 0b64     ..A.C...P.B.V.d.
   d66fa:	0d3f 0eb8 0fac 1000 0000                    ?.........

000d6704 <_ZTVN5spark13EthernetClassE>:
	...
   d670c:	4c7f 000d 4c75 000d 4c6b 000d 4c61 000d     .L..uL..kL..aL..
   d671c:	4c55 000d 4c49 000d 4c3d 000d 4c35 000d     UL..IL..=L..5L..
   d672c:	4c2b 000d 4c21 000d 575d 000d 616e 006e     +L..!L..]W..nan.
   d673c:	766f 0066 6e69 0066 6162 6475 5300 7265     ovf.inf.baud.Ser
   d674c:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d675c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d676c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d677c:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d678c:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d679c:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d67ac:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d67bc:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d67cc:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d67dc:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d67ec:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d67fc:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d680c:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d681c:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d682c:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d683c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d684c <_ZTV9IPAddress>:
	...
   d6854:	5111 000d 5101 000d 5103 000d               .Q...Q...Q..

000d6860 <_ZTV9USBSerial>:
	...
   d6868:	51e9 000d 5239 000d 5247 000d 4d29 000d     .Q..9R..GR..)M..
   d6878:	5225 000d 51eb 000d 5201 000d 5233 000d     %R...Q...R..3R..
   d6888:	5217 000d 51e5 000d                         .R...Q..

000d6890 <_ZTV11USARTSerial>:
	...
   d6898:	52f5 000d 5345 000d 5353 000d 4d29 000d     .R..ES..SS..)M..
   d68a8:	5309 000d 532b 000d 5317 000d 533f 000d     .S..+S...S..?S..
   d68b8:	52f7 000d 52fb 000d                         .R...R..

000d68c0 <_ZTV7TwoWire>:
	...
   d68c8:	53f1 000d 543b 000d 5413 000d 53f3 000d     .S..;T...T...S..
   d68d8:	541b 000d 5423 000d 542b 000d 5433 000d     .T..#T..+T..3T..

000d68e8 <_ZTVN5spark9MeshClassE>:
	...
   d68f0:	555d 000d 5553 000d 5549 000d 553f 000d     ]U..SU..IU..?U..
   d6900:	5533 000d 5527 000d 551b 000d 5513 000d     3U..'U...U...U..
   d6910:	5509 000d 54ff 000d 575d 000d               .U...T..]W..

000d691c <_ZTVN5spark9WiFiClassE>:
	...
   d6924:	56d7 000d 56cd 000d 56c3 000d 5679 000d     .V...V...V..yV..
   d6934:	56b7 000d 56ab 000d 569f 000d 5697 000d     .V...V...V...V..
   d6944:	568d 000d 5683 000d 575d 000d               .V...V..]W..

000d6950 <_ZTVN5spark12NetworkClassE>:
	...
   d6958:	56f5 000d 56ff 000d 5709 000d 5713 000d     .V...V...W...W..
   d6968:	571d 000d 5729 000d 5735 000d 5741 000d     .W..)W..5W..AW..
   d6978:	5749 000d 5753 000d 575d 000d               IW..SW..]W..

000d6984 <_ZSt7nothrow>:
   d6984:	0000 0000                                   ....

000d6988 <__sf_fake_stdin>:
	...

000d69a8 <__sf_fake_stdout>:
	...

000d69c8 <__sf_fake_stderr>:
	...
   d69e8:	0043                                        C.

000d69ea <link_const_variable_data_end>:
	...

000d69ec <link_constructors_location>:
   d69ec:	000d4291 	.word	0x000d4291
   d69f0:	000d43f5 	.word	0x000d43f5
   d69f4:	000d48bf 	.word	0x000d48bf
   d69f8:	000d48c3 	.word	0x000d48c3
   d69fc:	000d4c89 	.word	0x000d4c89
   d6a00:	000d4cbd 	.word	0x000d4cbd
   d6a04:	000d4d01 	.word	0x000d4d01
   d6a08:	000d4f8d 	.word	0x000d4f8d
   d6a0c:	000d4f9d 	.word	0x000d4f9d
   d6a10:	000d4fd5 	.word	0x000d4fd5
   d6a14:	000d5629 	.word	0x000d5629
   d6a18:	000d56e1 	.word	0x000d56e1
   d6a1c:	000d5829 	.word	0x000d5829
   d6a20:	000d5901 	.word	0x000d5901
   d6a24:	000d5985 	.word	0x000d5985
   d6a28:	000d5a49 	.word	0x000d5a49
   d6a2c:	000d5b0d 	.word	0x000d5b0d
