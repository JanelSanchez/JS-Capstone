
c:/Users/Janel/Documents/IoT/JS-Capstone/HR_O2_Test/target/1.5.2/argon/HR_O2_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002a34  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6a50  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e2bc  000d6a54  0001e2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004c8  2003e328  2003e328  0002e328  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6ac0  000d6ac0  00026ac0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6ae8  000d6ae8  00026ae8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c88ad  00000000  00000000  00026aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f926  00000000  00000000  000ef399  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a0af  00000000  00000000  000fecbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002160  00000000  00000000  00118d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003e88  00000000  00000000  0011aece  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034ea9  00000000  00000000  0011ed56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000271fb  00000000  00000000  00153bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00102c6b  00000000  00000000  0017adfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c100  00000000  00000000  0027da68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 facd 	bl	d65cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fad2 	bl	d65e2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2bc 	.word	0x2003e2bc
   d4048:	000d6a54 	.word	0x000d6a54
   d404c:	2003e328 	.word	0x2003e328
   d4050:	2003e328 	.word	0x2003e328
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f835 	bl	d50c8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6a50 	.word	0x000d6a50
   d4080:	000d6a0c 	.word	0x000d6a0c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81c 	b.w	d40c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f85d 	bl	d4148 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bfdb 	b.w	d504c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bddb 	b.w	d4c50 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bdd9 	b.w	d4c50 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 fdcb 	bl	d4c50 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <setup>:

float beatsPerMinute;
int beatAvg;

void setup()
{
   d40c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
   d40c2:	f001 f901 	bl	d52c8 <_Z16_fetch_usbserialv>
   d40c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ca:	f001 f8f1 	bl	d52b0 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
   d40ce:	f001 f8fb 	bl	d52c8 <_Z16_fetch_usbserialv>
   d40d2:	4918      	ldr	r1, [pc, #96]	; (d4134 <setup+0x74>)
   d40d4:	f000 fe71 	bl	d4dba <_ZN5Print7printlnEPKc>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
   d40d8:	f001 fbda 	bl	d5890 <_Z19__fetch_global_Wirev>
   d40dc:	2357      	movs	r3, #87	; 0x57
   d40de:	4601      	mov	r1, r0
   d40e0:	4a15      	ldr	r2, [pc, #84]	; (d4138 <setup+0x78>)
   d40e2:	4816      	ldr	r0, [pc, #88]	; (d413c <setup+0x7c>)
   d40e4:	f000 fa9e 	bl	d4624 <_ZN8MAX301055beginER7TwoWiremh>
   d40e8:	b928      	cbnz	r0, d40f6 <setup+0x36>
  {
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
   d40ea:	f001 f8ed 	bl	d52c8 <_Z16_fetch_usbserialv>
   d40ee:	4914      	ldr	r1, [pc, #80]	; (d4140 <setup+0x80>)
   d40f0:	f000 fe63 	bl	d4dba <_ZN5Print7printlnEPKc>
   d40f4:	e7fe      	b.n	d40f4 <setup+0x34>
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");
   d40f6:	f001 f8e7 	bl	d52c8 <_Z16_fetch_usbserialv>
   d40fa:	4912      	ldr	r1, [pc, #72]	; (d4144 <setup+0x84>)
   d40fc:	f000 fe5d 	bl	d4dba <_ZN5Print7printlnEPKc>

  particleSensor.setup(); //Configure sensor with default settings
   d4100:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d4104:	f240 129b 	movw	r2, #411	; 0x19b
   d4108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d410c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d4110:	480a      	ldr	r0, [pc, #40]	; (d413c <setup+0x7c>)
   d4112:	2303      	movs	r3, #3
   d4114:	2204      	movs	r2, #4
   d4116:	211f      	movs	r1, #31
   d4118:	f000 fb43 	bl	d47a2 <_ZN8MAX301055setupEhhhiii>
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
   d411c:	210a      	movs	r1, #10
   d411e:	4807      	ldr	r0, [pc, #28]	; (d413c <setup+0x7c>)
   d4120:	f000 faaf 	bl	d4682 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
   d4124:	4805      	ldr	r0, [pc, #20]	; (d413c <setup+0x7c>)
   d4126:	2100      	movs	r1, #0
}
   d4128:	b005      	add	sp, #20
   d412a:	f85d eb04 	ldr.w	lr, [sp], #4
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");

  particleSensor.setup(); //Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
   d412e:	f000 bab2 	b.w	d4696 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
   d4132:	bf00      	nop
   d4134:	000d6668 	.word	0x000d6668
   d4138:	00061a80 	.word	0x00061a80
   d413c:	2003e33c 	.word	0x2003e33c
   d4140:	000d6678 	.word	0x000d6678
   d4144:	000d66ac 	.word	0x000d66ac

000d4148 <loop>:
}

void loop()
{
   d4148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  long irValue = particleSensor.getIR();
   d414c:	4847      	ldr	r0, [pc, #284]	; (d426c <loop+0x124>)
   d414e:	4f48      	ldr	r7, [pc, #288]	; (d4270 <loop+0x128>)
   d4150:	4e48      	ldr	r6, [pc, #288]	; (d4274 <loop+0x12c>)
   d4152:	f000 fa4f 	bl	d45f4 <_ZN8MAX301055getIREv>
   d4156:	4604      	mov	r4, r0
   d4158:	4605      	mov	r5, r0

  if (checkForBeat(irValue) == true)
   d415a:	f000 f903 	bl	d4364 <_Z12checkForBeatl>
   d415e:	2800      	cmp	r0, #0
   d4160:	d040      	beq.n	d41e4 <loop+0x9c>
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
   d4162:	f8df 9138 	ldr.w	r9, [pc, #312]	; d429c <loop+0x154>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4166:	f000 fbef 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>
   d416a:	f8d9 3000 	ldr.w	r3, [r9]
   d416e:	ebc3 0800 	rsb	r8, r3, r0
   d4172:	f000 fbe9 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>
    lastBeat = millis();
   d4176:	f8c9 0000 	str.w	r0, [r9]

    beatsPerMinute = 60 / (delta / 1000.0);
   d417a:	4640      	mov	r0, r8
   d417c:	f001 fe6a 	bl	d5e54 <__aeabi_i2d>
   d4180:	2200      	movs	r2, #0
   d4182:	4b3d      	ldr	r3, [pc, #244]	; (d4278 <loop+0x130>)
   d4184:	f001 fff6 	bl	d6174 <__aeabi_ddiv>
   d4188:	4602      	mov	r2, r0
   d418a:	460b      	mov	r3, r1
   d418c:	2000      	movs	r0, #0
   d418e:	493b      	ldr	r1, [pc, #236]	; (d427c <loop+0x134>)
   d4190:	f001 fff0 	bl	d6174 <__aeabi_ddiv>
   d4194:	f002 f9bc 	bl	d6510 <__aeabi_d2f>

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
   d4198:	ed9f 7a39 	vldr	s14, [pc, #228]	; d4280 <loop+0x138>
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
    lastBeat = millis();

    beatsPerMinute = 60 / (delta / 1000.0);
   d419c:	6038      	str	r0, [r7, #0]
   d419e:	ee07 0a90 	vmov	s15, r0

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
   d41a2:	eef4 7ac7 	vcmpe.f32	s15, s14
   d41a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41aa:	d51b      	bpl.n	d41e4 <loop+0x9c>
   d41ac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
   d41b0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d41b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41b8:	dd14      	ble.n	d41e4 <loop+0x9c>
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
   d41ba:	4832      	ldr	r0, [pc, #200]	; (d4284 <loop+0x13c>)
   d41bc:	4932      	ldr	r1, [pc, #200]	; (d4288 <loop+0x140>)
   d41be:	7803      	ldrb	r3, [r0, #0]
   d41c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d41c4:	ee17 2a90 	vmov	r2, s15
   d41c8:	54ca      	strb	r2, [r1, r3]
      rateSpot %= RATE_SIZE; //Wrap variable
   d41ca:	3301      	adds	r3, #1
   d41cc:	f003 0303 	and.w	r3, r3, #3

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
   d41d0:	784a      	ldrb	r2, [r1, #1]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
   d41d2:	7003      	strb	r3, [r0, #0]

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
   d41d4:	780b      	ldrb	r3, [r1, #0]
   d41d6:	4413      	add	r3, r2
   d41d8:	788a      	ldrb	r2, [r1, #2]
   d41da:	4413      	add	r3, r2
   d41dc:	78ca      	ldrb	r2, [r1, #3]
   d41de:	4413      	add	r3, r2
   d41e0:	109b      	asrs	r3, r3, #2
   d41e2:	6033      	str	r3, [r6, #0]
    }
  }

  Serial.print("IR=");
   d41e4:	f001 f870 	bl	d52c8 <_Z16_fetch_usbserialv>
   d41e8:	4928      	ldr	r1, [pc, #160]	; (d428c <loop+0x144>)
   d41ea:	f000 fdd3 	bl	d4d94 <_ZN5Print5printEPKc>
  Serial.print(irValue);
   d41ee:	f001 f86b 	bl	d52c8 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d41f2:	2c00      	cmp	r4, #0
   d41f4:	4680      	mov	r8, r0
   d41f6:	da03      	bge.n	d4200 <loop+0xb8>
            t = print('-');
   d41f8:	212d      	movs	r1, #45	; 0x2d
   d41fa:	f000 fdcf 	bl	d4d9c <_ZN5Print5printEc>
            val = -n;
   d41fe:	4264      	negs	r4, r4
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4200:	220a      	movs	r2, #10
   d4202:	4621      	mov	r1, r4
   d4204:	4640      	mov	r0, r8
   d4206:	f000 fde2 	bl	d4dce <_ZN5Print11printNumberEmh>
  Serial.print(", BPM=");
   d420a:	f001 f85d 	bl	d52c8 <_Z16_fetch_usbserialv>
   d420e:	4920      	ldr	r1, [pc, #128]	; (d4290 <loop+0x148>)
   d4210:	f000 fdc0 	bl	d4d94 <_ZN5Print5printEPKc>
  Serial.print(beatsPerMinute);
   d4214:	f001 f858 	bl	d52c8 <_Z16_fetch_usbserialv>
   d4218:	ed97 0a00 	vldr	s0, [r7]
   d421c:	2102      	movs	r1, #2
   d421e:	f000 feb5 	bl	d4f8c <_ZN5Print5printEfi>
  Serial.print(", Avg BPM=");
   d4222:	f001 f851 	bl	d52c8 <_Z16_fetch_usbserialv>
   d4226:	491b      	ldr	r1, [pc, #108]	; (d4294 <loop+0x14c>)
   d4228:	f000 fdb4 	bl	d4d94 <_ZN5Print5printEPKc>
  Serial.print(beatAvg);
   d422c:	f001 f84c 	bl	d52c8 <_Z16_fetch_usbserialv>
   d4230:	6834      	ldr	r4, [r6, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4232:	2c00      	cmp	r4, #0
   d4234:	4607      	mov	r7, r0
   d4236:	da04      	bge.n	d4242 <loop+0xfa>
            t = print('-');
   d4238:	212d      	movs	r1, #45	; 0x2d
   d423a:	f000 fdaf 	bl	d4d9c <_ZN5Print5printEc>
            val = -n;
   d423e:	4261      	negs	r1, r4
   d4240:	e000      	b.n	d4244 <loop+0xfc>
        } else {
            val = n;
   d4242:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4244:	220a      	movs	r2, #10
   d4246:	4638      	mov	r0, r7
   d4248:	f000 fdc1 	bl	d4dce <_ZN5Print11printNumberEmh>

  if (irValue < 50000)
   d424c:	f24c 334f 	movw	r3, #49999	; 0xc34f
   d4250:	429d      	cmp	r5, r3
   d4252:	dc04      	bgt.n	d425e <loop+0x116>
    Serial.print(" No finger?");
   d4254:	f001 f838 	bl	d52c8 <_Z16_fetch_usbserialv>
   d4258:	490f      	ldr	r1, [pc, #60]	; (d4298 <loop+0x150>)
   d425a:	f000 fd9b 	bl	d4d94 <_ZN5Print5printEPKc>

  Serial.println();
   d425e:	f001 f833 	bl	d52c8 <_Z16_fetch_usbserialv>
   d4262:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.print(beatAvg);

  if (irValue < 50000)
    Serial.print(" No finger?");

  Serial.println();
   d4266:	f000 bd9c 	b.w	d4da2 <_ZN5Print7printlnEv>
   d426a:	bf00      	nop
   d426c:	2003e33c 	.word	0x2003e33c
   d4270:	2003e380 	.word	0x2003e380
   d4274:	2003e32c 	.word	0x2003e32c
   d4278:	408f4000 	.word	0x408f4000
   d427c:	404e0000 	.word	0x404e0000
   d4280:	437f0000 	.word	0x437f0000
   d4284:	2003e384 	.word	0x2003e384
   d4288:	2003e37c 	.word	0x2003e37c
   d428c:	000d66e8 	.word	0x000d66e8
   d4290:	000d66ec 	.word	0x000d66ec
   d4294:	000d66f3 	.word	0x000d66f3
   d4298:	000d66fe 	.word	0x000d66fe
   d429c:	2003e378 	.word	0x2003e378

000d42a0 <_GLOBAL__sub_I_SystemMode>:
   d42a0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d42a2:	4c0c      	ldr	r4, [pc, #48]	; (d42d4 <_GLOBAL__sub_I_SystemMode+0x34>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42a4:	f000 fb40 	bl	d4928 <HAL_Pin_Map>
   d42a8:	2300      	movs	r3, #0
   d42aa:	6023      	str	r3, [r4, #0]
   d42ac:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d42ae:	71a3      	strb	r3, [r4, #6]
   d42b0:	8123      	strh	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d42b2:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d42b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d42b8:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d42ba:	f000 fc45 	bl	d4b48 <set_system_mode>
  -INT = Not connected

  The MAX30105 Breakout can handle 5V or 3.3V I2C logic. We recommend powering the board with 5V
  but it will also run at 3.3V.
*/
SYSTEM_MODE(SEMI_AUTOMATIC);
   d42be:	4620      	mov	r0, r4
   d42c0:	4a05      	ldr	r2, [pc, #20]	; (d42d8 <_GLOBAL__sub_I_SystemMode+0x38>)
   d42c2:	4906      	ldr	r1, [pc, #24]	; (d42dc <_GLOBAL__sub_I_SystemMode+0x3c>)
   d42c4:	f001 fb0a 	bl	d58dc <__aeabi_atexit>
#include <Wire.h>
#include "MAX30105.h"

#include "heartRate.h"

MAX30105 particleSensor;
   d42c8:	4805      	ldr	r0, [pc, #20]	; (d42e0 <_GLOBAL__sub_I_SystemMode+0x40>)

  if (irValue < 50000)
    Serial.print(" No finger?");

  Serial.println();
   d42ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <Wire.h>
#include "MAX30105.h"

#include "heartRate.h"

MAX30105 particleSensor;
   d42ce:	f000 b8b3 	b.w	d4438 <_ZN8MAX30105C1Ev>
   d42d2:	bf00      	nop
   d42d4:	2003e330 	.word	0x2003e330
   d42d8:	2003e328 	.word	0x2003e328
   d42dc:	000d40af 	.word	0x000d40af
   d42e0:	2003e33c 	.word	0x2003e33c

000d42e4 <_Z18averageDCEstimatorPlt>:
}

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
  *p += ((((long) x << 15) - *p) >> 4);
   d42e4:	6803      	ldr	r3, [r0, #0]
   d42e6:	ebc3 31c1 	rsb	r1, r3, r1, lsl #15
   d42ea:	eb03 1321 	add.w	r3, r3, r1, asr #4
   d42ee:	6003      	str	r3, [r0, #0]
  return (*p >> 15);
}
   d42f0:	f343 30cf 	sbfx	r0, r3, #15, #16
   d42f4:	4770      	bx	lr
	...

000d42f8 <_Z16lowPassFIRFilters>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
   d42f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  cbuf[offset] = din;
   d42fc:	4d16      	ldr	r5, [pc, #88]	; (d4358 <_Z16lowPassFIRFilters+0x60>)
   d42fe:	4917      	ldr	r1, [pc, #92]	; (d435c <_Z16lowPassFIRFilters+0x64>)
   d4300:	782b      	ldrb	r3, [r5, #0]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   d4302:	f8df c05c 	ldr.w	ip, [pc, #92]	; d4360 <_Z16lowPassFIRFilters+0x68>
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
   d4306:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
   d430a:	f1a3 020b 	sub.w	r2, r3, #11
   d430e:	f002 021f 	and.w	r2, r2, #31
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   d4312:	f1a3 0e16 	sub.w	lr, r3, #22
//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
   d4316:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
   d431a:	2200      	movs	r2, #0
   d431c:	0300      	lsls	r0, r0, #12

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   d431e:	eb0e 0402 	add.w	r4, lr, r2
   d4322:	1a9e      	subs	r6, r3, r2
   d4324:	f004 041f 	and.w	r4, r4, #31
   d4328:	f006 061f 	and.w	r6, r6, #31
   d432c:	f831 8014 	ldrh.w	r8, [r1, r4, lsl #1]
   d4330:	f831 4016 	ldrh.w	r4, [r1, r6, lsl #1]
   d4334:	f93c 7012 	ldrsh.w	r7, [ip, r2, lsl #1]
   d4338:	4444      	add	r4, r8
   d433a:	3201      	adds	r2, #1
   d433c:	b224      	sxth	r4, r4
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
   d433e:	2a0b      	cmp	r2, #11
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   d4340:	fb07 0004 	mla	r0, r7, r4, r0
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
   d4344:	d1eb      	bne.n	d431e <_Z16lowPassFIRFilters+0x26>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
  }

  offset++;
  offset %= 32; //Wrap condition
   d4346:	3301      	adds	r3, #1
   d4348:	f003 031f 	and.w	r3, r3, #31
   d434c:	702b      	strb	r3, [r5, #0]

  return(z >> 15);
}
   d434e:	f340 30cf 	sbfx	r0, r0, #15, #16
   d4352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4356:	bf00      	nop
   d4358:	2003e394 	.word	0x2003e394
   d435c:	2003e398 	.word	0x2003e398
   d4360:	000d670a 	.word	0x000d670a

000d4364 <_Z12checkForBeatl>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
   d4364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
   d4366:	4d29      	ldr	r5, [pc, #164]	; (d440c <_Z12checkForBeatl+0xa8>)
   d4368:	4c29      	ldr	r4, [pc, #164]	; (d4410 <_Z12checkForBeatl+0xac>)
   d436a:	882b      	ldrh	r3, [r5, #0]
   d436c:	8023      	strh	r3, [r4, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
   d436e:	b282      	uxth	r2, r0
   d4370:	4611      	mov	r1, r2
   d4372:	4828      	ldr	r0, [pc, #160]	; (d4414 <_Z12checkForBeatl+0xb0>)
   d4374:	f7ff ffb6 	bl	d42e4 <_Z18averageDCEstimatorPlt>
   d4378:	4b27      	ldr	r3, [pc, #156]	; (d4418 <_Z12checkForBeatl+0xb4>)
   d437a:	8018      	strh	r0, [r3, #0]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
   d437c:	1a10      	subs	r0, r2, r0
   d437e:	b200      	sxth	r0, r0
   d4380:	f7ff ffba 	bl	d42f8 <_Z16lowPassFIRFilters>

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
   d4384:	f9b4 2000 	ldrsh.w	r2, [r4]
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
   d4388:	8028      	strh	r0, [r5, #0]

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
   d438a:	2a00      	cmp	r2, #0
   d438c:	4c23      	ldr	r4, [pc, #140]	; (d441c <_Z12checkForBeatl+0xb8>)
   d438e:	4924      	ldr	r1, [pc, #144]	; (d4420 <_Z12checkForBeatl+0xbc>)
   d4390:	da1a      	bge.n	d43c8 <_Z12checkForBeatl+0x64>
   d4392:	0403      	lsls	r3, r0, #16
   d4394:	d418      	bmi.n	d43c8 <_Z12checkForBeatl+0x64>
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
   d4396:	4e23      	ldr	r6, [pc, #140]	; (d4424 <_Z12checkForBeatl+0xc0>)
   d4398:	4d23      	ldr	r5, [pc, #140]	; (d4428 <_Z12checkForBeatl+0xc4>)
   d439a:	f9b6 3000 	ldrsh.w	r3, [r6]
   d439e:	802b      	strh	r3, [r5, #0]
    IR_AC_Min = IR_AC_Signal_min;
   d43a0:	4d22      	ldr	r5, [pc, #136]	; (d442c <_Z12checkForBeatl+0xc8>)
   d43a2:	4f23      	ldr	r7, [pc, #140]	; (d4430 <_Z12checkForBeatl+0xcc>)
   d43a4:	f9b5 5000 	ldrsh.w	r5, [r5]
   d43a8:	803d      	strh	r5, [r7, #0]
    positiveEdge = 1;
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   d43aa:	1b5b      	subs	r3, r3, r5
   d43ac:	3b15      	subs	r3, #21
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
   d43ae:	2701      	movs	r7, #1
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   d43b0:	f240 35d2 	movw	r5, #978	; 0x3d2
   d43b4:	42ab      	cmp	r3, r5
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
   d43b6:	8027      	strh	r7, [r4, #0]
    negativeEdge = 0;
   d43b8:	f04f 0700 	mov.w	r7, #0
   d43bc:	800f      	strh	r7, [r1, #0]
    IR_AC_Signal_max = 0;
   d43be:	8037      	strh	r7, [r6, #0]

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   d43c0:	bf8c      	ite	hi
   d43c2:	2300      	movhi	r3, #0
   d43c4:	2301      	movls	r3, #1
   d43c6:	e000      	b.n	d43ca <_Z12checkForBeatl+0x66>
//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;
   d43c8:	2300      	movs	r3, #0
      beatDetected = true;
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
   d43ca:	2a00      	cmp	r2, #0
   d43cc:	dd07      	ble.n	d43de <_Z12checkForBeatl+0x7a>
   d43ce:	2800      	cmp	r0, #0
   d43d0:	dc05      	bgt.n	d43de <_Z12checkForBeatl+0x7a>
  {
    positiveEdge = 0;
    negativeEdge = 1;
   d43d2:	2601      	movs	r6, #1
   d43d4:	800e      	strh	r6, [r1, #0]
    IR_AC_Signal_min = 0;
   d43d6:	4e15      	ldr	r6, [pc, #84]	; (d442c <_Z12checkForBeatl+0xc8>)
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
  {
    positiveEdge = 0;
   d43d8:	2500      	movs	r5, #0
   d43da:	8025      	strh	r5, [r4, #0]
    negativeEdge = 1;
    IR_AC_Signal_min = 0;
   d43dc:	8035      	strh	r5, [r6, #0]
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
   d43de:	f9b4 4000 	ldrsh.w	r4, [r4]
   d43e2:	4290      	cmp	r0, r2
   d43e4:	bfd4      	ite	le
   d43e6:	2400      	movle	r4, #0
   d43e8:	f004 0401 	andgt.w	r4, r4, #1
   d43ec:	b10c      	cbz	r4, d43f2 <_Z12checkForBeatl+0x8e>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
   d43ee:	4c0d      	ldr	r4, [pc, #52]	; (d4424 <_Z12checkForBeatl+0xc0>)
   d43f0:	8020      	strh	r0, [r4, #0]
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
   d43f2:	f9b1 1000 	ldrsh.w	r1, [r1]
   d43f6:	4290      	cmp	r0, r2
   d43f8:	bfac      	ite	ge
   d43fa:	2200      	movge	r2, #0
   d43fc:	f001 0201 	andlt.w	r2, r1, #1
   d4400:	b10a      	cbz	r2, d4406 <_Z12checkForBeatl+0xa2>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
   d4402:	4a0a      	ldr	r2, [pc, #40]	; (d442c <_Z12checkForBeatl+0xc8>)
   d4404:	8010      	strh	r0, [r2, #0]
  }
  
  return(beatDetected);
}
   d4406:	4618      	mov	r0, r3
   d4408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d440a:	bf00      	nop
   d440c:	2003e390 	.word	0x2003e390
   d4410:	2003e392 	.word	0x2003e392
   d4414:	2003e38c 	.word	0x2003e38c
   d4418:	2003e3da 	.word	0x2003e3da
   d441c:	2003e3d8 	.word	0x2003e3d8
   d4420:	2003e396 	.word	0x2003e396
   d4424:	2003e388 	.word	0x2003e388
   d4428:	2003e2be 	.word	0x2003e2be
   d442c:	2003e386 	.word	0x2003e386
   d4430:	2003e2bc 	.word	0x2003e2bc

000d4434 <_GLOBAL__sub_I_IR_AC_Max>:
   d4434:	f000 ba78 	b.w	d4928 <HAL_Pin_Map>

000d4438 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
   d4438:	4770      	bx	lr

000d443a <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d443a:	b570      	push	{r4, r5, r6, lr}
   d443c:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d443e:	6800      	ldr	r0, [r0, #0]
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d4440:	4616      	mov	r6, r2
   d4442:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   d4444:	f001 f85d 	bl	d5502 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d4448:	6820      	ldr	r0, [r4, #0]
   d444a:	6803      	ldr	r3, [r0, #0]
   d444c:	4631      	mov	r1, r6
   d444e:	689b      	ldr	r3, [r3, #8]
   d4450:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   d4452:	2100      	movs	r1, #0
   d4454:	6820      	ldr	r0, [r4, #0]
   d4456:	f001 f85b 	bl	d5510 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
   d445a:	2201      	movs	r2, #1
   d445c:	4629      	mov	r1, r5
   d445e:	6820      	ldr	r0, [r4, #0]
   d4460:	f001 f84c 	bl	d54fc <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d4464:	6820      	ldr	r0, [r4, #0]
   d4466:	6803      	ldr	r3, [r0, #0]
   d4468:	691b      	ldr	r3, [r3, #16]
   d446a:	4798      	blx	r3
   d446c:	b120      	cbz	r0, d4478 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
   d446e:	6820      	ldr	r0, [r4, #0]
   d4470:	6803      	ldr	r3, [r0, #0]
   d4472:	695b      	ldr	r3, [r3, #20]
   d4474:	4798      	blx	r3
   d4476:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
   d4478:	bd70      	pop	{r4, r5, r6, pc}

000d447a <_ZN8MAX3010515getWritePointerEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t MAX30105::getWritePointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   d447a:	2204      	movs	r2, #4
   d447c:	7901      	ldrb	r1, [r0, #4]
   d447e:	f7ff bfdc 	b.w	d443a <_ZN8MAX3010513readRegister8Ehh>

000d4482 <_ZN8MAX3010514getReadPointerEv>:
}

//Read the FIFO Read Pointer
uint8_t MAX30105::getReadPointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   d4482:	2206      	movs	r2, #6
   d4484:	7901      	ldrb	r1, [r0, #4]
   d4486:	f7ff bfd8 	b.w	d443a <_ZN8MAX3010513readRegister8Ehh>

000d448a <_ZN8MAX301055checkEv>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105::check(void)
{
   d448a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d448e:	4604      	mov	r4, r0
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
   d4490:	f7ff fff7 	bl	d4482 <_ZN8MAX3010514getReadPointerEv>
   d4494:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
   d4496:	4620      	mov	r0, r4
   d4498:	f7ff ffef 	bl	d447a <_ZN8MAX3010515getWritePointerEv>

  int numberOfSamples = 0;

  //Do we have new data?
  if (readPointer != writePointer)
   d449c:	4285      	cmp	r5, r0
   d449e:	f000 808e 	beq.w	d45be <_ZN8MAX301055checkEv+0x134>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d44a2:	1b47      	subs	r7, r0, r5
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d44a4:	f04f 0157 	mov.w	r1, #87	; 0x57
   d44a8:	6820      	ldr	r0, [r4, #0]
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d44aa:	7966      	ldrb	r6, [r4, #5]
  //Do we have new data?
  if (readPointer != writePointer)
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d44ac:	bf48      	it	mi
   d44ae:	3720      	addmi	r7, #32
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d44b0:	f001 f82b 	bl	d550a <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   d44b4:	6820      	ldr	r0, [r4, #0]
   d44b6:	6803      	ldr	r3, [r0, #0]
   d44b8:	2107      	movs	r1, #7
   d44ba:	689b      	ldr	r3, [r3, #8]
   d44bc:	4798      	blx	r3
    _i2cPort->endTransmission();
   d44be:	6820      	ldr	r0, [r4, #0]
   d44c0:	f001 f82a 	bl	d5518 <_ZN7TwoWire15endTransmissionEv>
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d44c4:	437e      	muls	r6, r7
   d44c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d44ca:	f04f 0820 	mov.w	r8, #32

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
   d44ce:	f04f 0900 	mov.w	r9, #0
    _i2cPort->endTransmission();

    //We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
    //I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
    //Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
    while (bytesLeftToRead > 0)
   d44d2:	2e00      	cmp	r6, #0
   d44d4:	dd74      	ble.n	d45c0 <_ZN8MAX301055checkEv+0x136>
    {
      int toGet = bytesLeftToRead;
      if (toGet > I2C_BUFFER_LENGTH)
   d44d6:	2e20      	cmp	r6, #32
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d44d8:	bfc8      	it	gt
   d44da:	7965      	ldrbgt	r5, [r4, #5]
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d44dc:	6820      	ldr	r0, [r4, #0]
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d44de:	bfc9      	itett	gt
   d44e0:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
   d44e4:	4635      	movle	r5, r6
   d44e6:	fb98 f3f5 	sdivgt	r3, r8, r5
   d44ea:	435d      	mulgt	r5, r3
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d44ec:	462a      	mov	r2, r5
   d44ee:	2157      	movs	r1, #87	; 0x57
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
      }

      bytesLeftToRead -= toGet;
   d44f0:	1b76      	subs	r6, r6, r5

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d44f2:	f001 f803 	bl	d54fc <_ZN7TwoWire11requestFromEhj>
      
      while (toGet > 0)
   d44f6:	2d00      	cmp	r5, #0
   d44f8:	ddeb      	ble.n	d44d2 <_ZN8MAX301055checkEv+0x48>
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
   d44fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
   d44fe:	6820      	ldr	r0, [r4, #0]

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
   d4500:	f88d 9007 	strb.w	r9, [sp, #7]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
   d4504:	3301      	adds	r3, #1
   d4506:	f003 0303 	and.w	r3, r3, #3
   d450a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
   d450e:	6803      	ldr	r3, [r0, #0]
   d4510:	695b      	ldr	r3, [r3, #20]
   d4512:	4798      	blx	r3
   d4514:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   d4518:	6820      	ldr	r0, [r4, #0]
   d451a:	6803      	ldr	r3, [r0, #0]
   d451c:	695b      	ldr	r3, [r3, #20]
   d451e:	4798      	blx	r3
   d4520:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   d4524:	6820      	ldr	r0, [r4, #0]
   d4526:	6803      	ldr	r3, [r0, #0]
   d4528:	695b      	ldr	r3, [r3, #20]
   d452a:	4798      	blx	r3
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d452c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
        temp[1] = _i2cPort->read();
        temp[0] = _i2cPort->read();
   d4530:	f88d 0004 	strb.w	r0, [sp, #4]
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d4534:	9a01      	ldr	r2, [sp, #4]
   d4536:	3302      	adds	r3, #2
   d4538:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d453c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

        if (activeLEDs > 1)
   d4540:	7963      	ldrb	r3, [r4, #5]
   d4542:	2b01      	cmp	r3, #1
   d4544:	d919      	bls.n	d457a <_ZN8MAX301055checkEv+0xf0>
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
   d4546:	6820      	ldr	r0, [r4, #0]
   d4548:	6803      	ldr	r3, [r0, #0]
   d454a:	695b      	ldr	r3, [r3, #20]
   d454c:	4798      	blx	r3
   d454e:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d4552:	6820      	ldr	r0, [r4, #0]
   d4554:	6803      	ldr	r3, [r0, #0]
   d4556:	695b      	ldr	r3, [r3, #20]
   d4558:	4798      	blx	r3
   d455a:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d455e:	6820      	ldr	r0, [r4, #0]
   d4560:	6803      	ldr	r3, [r0, #0]
   d4562:	695b      	ldr	r3, [r3, #20]
   d4564:	4798      	blx	r3
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
   d4566:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
          temp[1] = _i2cPort->read();
          temp[0] = _i2cPort->read();
   d456a:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
   d456e:	9a01      	ldr	r2, [sp, #4]
   d4570:	3306      	adds	r3, #6
   d4572:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d4576:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        if (activeLEDs > 2)
   d457a:	7963      	ldrb	r3, [r4, #5]
   d457c:	2b02      	cmp	r3, #2
   d457e:	d919      	bls.n	d45b4 <_ZN8MAX301055checkEv+0x12a>
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
   d4580:	6820      	ldr	r0, [r4, #0]
   d4582:	6803      	ldr	r3, [r0, #0]
   d4584:	695b      	ldr	r3, [r3, #20]
   d4586:	4798      	blx	r3
   d4588:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d458c:	6820      	ldr	r0, [r4, #0]
   d458e:	6803      	ldr	r3, [r0, #0]
   d4590:	695b      	ldr	r3, [r3, #20]
   d4592:	4798      	blx	r3
   d4594:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d4598:	6820      	ldr	r0, [r4, #0]
   d459a:	6803      	ldr	r3, [r0, #0]
   d459c:	695b      	ldr	r3, [r3, #20]
   d459e:	4798      	blx	r3
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
   d45a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
          temp[1] = _i2cPort->read();
          temp[0] = _i2cPort->read();
   d45a4:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
   d45a8:	9a01      	ldr	r2, [sp, #4]
   d45aa:	330a      	adds	r3, #10
   d45ac:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d45b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        toGet -= activeLEDs * 3;
   d45b4:	7963      	ldrb	r3, [r4, #5]
   d45b6:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d45ba:	441d      	add	r5, r3
      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
   d45bc:	e79b      	b.n	d44f6 <_ZN8MAX301055checkEv+0x6c>
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
  byte writePointer = getWritePointer();

  int numberOfSamples = 0;
   d45be:	2700      	movs	r7, #0
    } //End while (bytesLeftToRead > 0)

  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
}
   d45c0:	b2b8      	uxth	r0, r7
   d45c2:	b003      	add	sp, #12
   d45c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d45c8 <_ZN8MAX301059safeCheckEh>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
   d45c8:	b570      	push	{r4, r5, r6, lr}
   d45ca:	4605      	mov	r5, r0
   d45cc:	460e      	mov	r6, r1
   d45ce:	f000 f9bb 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>
   d45d2:	4604      	mov	r4, r0
   d45d4:	f000 f9b8 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>
  uint32_t markTime = millis();
  
  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
   d45d8:	1b00      	subs	r0, r0, r4
   d45da:	42b0      	cmp	r0, r6
   d45dc:	d808      	bhi.n	d45f0 <_ZN8MAX301059safeCheckEh+0x28>

	if(check() == true) //We found new data!
   d45de:	4628      	mov	r0, r5
   d45e0:	f7ff ff53 	bl	d448a <_ZN8MAX301055checkEv>
   d45e4:	2801      	cmp	r0, #1
   d45e6:	d004      	beq.n	d45f2 <_ZN8MAX301059safeCheckEh+0x2a>
	  return(true);

	delay(1);
   d45e8:	2001      	movs	r0, #1
   d45ea:	f000 fcf1 	bl	d4fd0 <delay>
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
  uint32_t markTime = millis();
  
  while(1)
   d45ee:	e7f1      	b.n	d45d4 <_ZN8MAX301059safeCheckEh+0xc>
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
   d45f0:	2000      	movs	r0, #0
	if(check() == true) //We found new data!
	  return(true);

	delay(1);
  }
}
   d45f2:	bd70      	pop	{r4, r5, r6, pc}

000d45f4 <_ZN8MAX301055getIREv>:
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
   d45f4:	b510      	push	{r4, lr}
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d45f6:	21fa      	movs	r1, #250	; 0xfa
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
   d45f8:	4604      	mov	r4, r0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d45fa:	f7ff ffe5 	bl	d45c8 <_ZN8MAX301059safeCheckEh>
   d45fe:	b120      	cbz	r0, d460a <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   d4600:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d4604:	3306      	adds	r3, #6
   d4606:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  else
    return(0); //Sensor failed to find new data
}
   d460a:	bd10      	pop	{r4, pc}

000d460c <_ZN8MAX3010510readPartIDEv>:

//
// Device ID and Revision
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
   d460c:	22ff      	movs	r2, #255	; 0xff
   d460e:	7901      	ldrb	r1, [r0, #4]
   d4610:	f7ff bf13 	b.w	d443a <_ZN8MAX3010513readRegister8Ehh>

000d4614 <_ZN8MAX3010514readRevisionIDEv>:
}

void MAX30105::readRevisionID() {
   d4614:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d4616:	22fe      	movs	r2, #254	; 0xfe
   d4618:	7901      	ldrb	r1, [r0, #4]
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
}

void MAX30105::readRevisionID() {
   d461a:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d461c:	f7ff ff0d 	bl	d443a <_ZN8MAX3010513readRegister8Ehh>
   d4620:	71a0      	strb	r0, [r4, #6]
   d4622:	bd10      	pop	{r4, pc}

000d4624 <_ZN8MAX301055beginER7TwoWiremh>:

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d4624:	b570      	push	{r4, r5, r6, lr}
   d4626:	4604      	mov	r4, r0
   d4628:	4616      	mov	r6, r2
   d462a:	4608      	mov	r0, r1

  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d462c:	6021      	str	r1, [r4, #0]

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d462e:	461d      	mov	r5, r3

  _i2cPort = &wirePort; //Grab which port the user wants us to use

  _i2cPort->begin();
   d4630:	f000 ff30 	bl	d5494 <_ZN7TwoWire5beginEv>

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4634:	4631      	mov	r1, r6
   d4636:	6820      	ldr	r0, [r4, #0]
   d4638:	f000 ff28 	bl	d548c <_ZN7TwoWire8setSpeedEm>
  _i2cPort->setClock(i2cSpeed);

  _i2caddr = i2caddr;
   d463c:	7125      	strb	r5, [r4, #4]

  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
   d463e:	4620      	mov	r0, r4
   d4640:	f7ff ffe4 	bl	d460c <_ZN8MAX3010510readPartIDEv>
   d4644:	2815      	cmp	r0, #21
   d4646:	d104      	bne.n	d4652 <_ZN8MAX301055beginER7TwoWiremh+0x2e>
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
  }

  // Populate revision ID
  readRevisionID();
   d4648:	4620      	mov	r0, r4
   d464a:	f7ff ffe3 	bl	d4614 <_ZN8MAX3010514readRevisionIDEv>
  
  return true;
   d464e:	2001      	movs	r0, #1
   d4650:	bd70      	pop	{r4, r5, r6, pc}
  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
   d4652:	2000      	movs	r0, #0

  // Populate revision ID
  readRevisionID();
  
  return true;
}
   d4654:	bd70      	pop	{r4, r5, r6, pc}

000d4656 <_ZN8MAX3010514writeRegister8Ehhh>:

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d4656:	b570      	push	{r4, r5, r6, lr}
   d4658:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d465a:	6800      	ldr	r0, [r0, #0]

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d465c:	4616      	mov	r6, r2
   d465e:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   d4660:	f000 ff4f 	bl	d5502 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d4664:	6820      	ldr	r0, [r4, #0]
   d4666:	6803      	ldr	r3, [r0, #0]
   d4668:	4631      	mov	r1, r6
   d466a:	689b      	ldr	r3, [r3, #8]
   d466c:	4798      	blx	r3
  _i2cPort->write(value);
   d466e:	6820      	ldr	r0, [r4, #0]
   d4670:	6803      	ldr	r3, [r0, #0]
   d4672:	4629      	mov	r1, r5
   d4674:	689a      	ldr	r2, [r3, #8]
   d4676:	4790      	blx	r2
  _i2cPort->endTransmission();
   d4678:	6820      	ldr	r0, [r4, #0]
}
   d467a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
  _i2cPort->beginTransmission(address);
  _i2cPort->write(reg);
  _i2cPort->write(value);
  _i2cPort->endTransmission();
   d467e:	f000 bf4b 	b.w	d5518 <_ZN7TwoWire15endTransmissionEv>

000d4682 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
}

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   d4682:	460b      	mov	r3, r1
   d4684:	220c      	movs	r2, #12
   d4686:	7901      	ldrb	r1, [r0, #4]
   d4688:	f7ff bfe5 	b.w	d4656 <_ZN8MAX3010514writeRegister8Ehhh>

000d468c <_ZN8MAX3010519setPulseAmplitudeIREh>:
}

void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   d468c:	460b      	mov	r3, r1
   d468e:	220d      	movs	r2, #13
   d4690:	7901      	ldrb	r1, [r0, #4]
   d4692:	f7ff bfe0 	b.w	d4656 <_ZN8MAX3010514writeRegister8Ehhh>

000d4696 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
}

void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   d4696:	460b      	mov	r3, r1
   d4698:	220e      	movs	r2, #14
   d469a:	7901      	ldrb	r1, [r0, #4]
   d469c:	f7ff bfdb 	b.w	d4656 <_ZN8MAX3010514writeRegister8Ehhh>

000d46a0 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
}

void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   d46a0:	460b      	mov	r3, r1
   d46a2:	2210      	movs	r2, #16
   d46a4:	7901      	ldrb	r1, [r0, #4]
   d46a6:	f7ff bfd6 	b.w	d4656 <_ZN8MAX3010514writeRegister8Ehhh>

000d46aa <_ZN8MAX301059clearFIFOEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
}

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
   d46aa:	b510      	push	{r4, lr}
   d46ac:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   d46ae:	7901      	ldrb	r1, [r0, #4]
   d46b0:	2300      	movs	r3, #0
   d46b2:	2204      	movs	r2, #4
   d46b4:	f7ff ffcf 	bl	d4656 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   d46b8:	7921      	ldrb	r1, [r4, #4]
   d46ba:	4620      	mov	r0, r4
   d46bc:	2300      	movs	r3, #0
   d46be:	2205      	movs	r2, #5
   d46c0:	f7ff ffc9 	bl	d4656 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d46c4:	7921      	ldrb	r1, [r4, #4]
   d46c6:	4620      	mov	r0, r4
   d46c8:	2300      	movs	r3, #0
   d46ca:	2206      	movs	r2, #6
}
   d46cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d46d0:	f7ff bfc1 	b.w	d4656 <_ZN8MAX3010514writeRegister8Ehhh>

000d46d4 <_ZN8MAX301057bitMaskEhhh>:
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
   d46d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46d8:	460e      	mov	r6, r1
   d46da:	4615      	mov	r5, r2
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d46dc:	460a      	mov	r2, r1
   d46de:	7901      	ldrb	r1, [r0, #4]
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
   d46e0:	4604      	mov	r4, r0
   d46e2:	461f      	mov	r7, r3
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d46e4:	f7ff fea9 	bl	d443a <_ZN8MAX3010513readRegister8Ehh>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d46e8:	4028      	ands	r0, r5
   d46ea:	ea47 0300 	orr.w	r3, r7, r0
   d46ee:	4632      	mov	r2, r6
   d46f0:	7921      	ldrb	r1, [r4, #4]
   d46f2:	4620      	mov	r0, r4
}
   d46f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d46f8:	f7ff bfad 	b.w	d4656 <_ZN8MAX3010514writeRegister8Ehhh>

000d46fc <_ZN8MAX301059softResetEv>:
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
   d46fc:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d46fe:	22bf      	movs	r2, #191	; 0xbf
   d4700:	2340      	movs	r3, #64	; 0x40
   d4702:	2109      	movs	r1, #9
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
   d4704:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d4706:	f7ff ffe5 	bl	d46d4 <_ZN8MAX301057bitMaskEhhh>
   d470a:	f000 f91d 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>
   d470e:	4605      	mov	r5, r0
   d4710:	f000 f91a 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
   d4714:	1b40      	subs	r0, r0, r5
   d4716:	2863      	cmp	r0, #99	; 0x63
   d4718:	d80a      	bhi.n	d4730 <_ZN8MAX301059softResetEv+0x34>
  {
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   d471a:	2209      	movs	r2, #9
   d471c:	7921      	ldrb	r1, [r4, #4]
   d471e:	4620      	mov	r0, r4
   d4720:	f7ff fe8b 	bl	d443a <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   d4724:	0643      	lsls	r3, r0, #25
   d4726:	d503      	bpl.n	d4730 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   d4728:	2001      	movs	r0, #1
   d472a:	f000 fc51 	bl	d4fd0 <delay>
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
   d472e:	e7ef      	b.n	d4710 <_ZN8MAX301059softResetEv+0x14>
   d4730:	bd38      	pop	{r3, r4, r5, pc}

000d4732 <_ZN8MAX3010510setLEDModeEh>:
}

void MAX30105::setLEDMode(uint8_t mode) {
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   d4732:	460b      	mov	r3, r1
   d4734:	22f8      	movs	r2, #248	; 0xf8
   d4736:	2109      	movs	r1, #9
   d4738:	f7ff bfcc 	b.w	d46d4 <_ZN8MAX301057bitMaskEhhh>

000d473c <_ZN8MAX3010511setADCRangeEh>:
}

void MAX30105::setADCRange(uint8_t adcRange) {
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   d473c:	460b      	mov	r3, r1
   d473e:	229f      	movs	r2, #159	; 0x9f
   d4740:	210a      	movs	r1, #10
   d4742:	f7ff bfc7 	b.w	d46d4 <_ZN8MAX301057bitMaskEhhh>

000d4746 <_ZN8MAX3010513setSampleRateEh>:
}

void MAX30105::setSampleRate(uint8_t sampleRate) {
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   d4746:	460b      	mov	r3, r1
   d4748:	22e3      	movs	r2, #227	; 0xe3
   d474a:	210a      	movs	r1, #10
   d474c:	f7ff bfc2 	b.w	d46d4 <_ZN8MAX301057bitMaskEhhh>

000d4750 <_ZN8MAX3010513setPulseWidthEh>:
}

void MAX30105::setPulseWidth(uint8_t pulseWidth) {
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   d4750:	460b      	mov	r3, r1
   d4752:	22fc      	movs	r2, #252	; 0xfc
   d4754:	210a      	movs	r1, #10
   d4756:	f7ff bfbd 	b.w	d46d4 <_ZN8MAX301057bitMaskEhhh>

000d475a <_ZN8MAX3010514setFIFOAverageEh>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   d475a:	460b      	mov	r3, r1
   d475c:	221f      	movs	r2, #31
   d475e:	2108      	movs	r1, #8
   d4760:	f7ff bfb8 	b.w	d46d4 <_ZN8MAX301057bitMaskEhhh>

000d4764 <_ZN8MAX3010518enableFIFORolloverEv>:
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
}

//Enable roll over if FIFO over flows
void MAX30105::enableFIFORollover(void) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   d4764:	2310      	movs	r3, #16
   d4766:	22ef      	movs	r2, #239	; 0xef
   d4768:	2108      	movs	r1, #8
   d476a:	f7ff bfb3 	b.w	d46d4 <_ZN8MAX301057bitMaskEhhh>

000d476e <_ZN8MAX3010510enableSlotEhh>:
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {

  uint8_t originalContents;

  switch (slotNumber) {
   d476e:	3901      	subs	r1, #1

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   d4770:	4613      	mov	r3, r2

  uint8_t originalContents;

  switch (slotNumber) {
   d4772:	2903      	cmp	r1, #3
   d4774:	d814      	bhi.n	d47a0 <_ZN8MAX3010510enableSlotEhh+0x32>
   d4776:	e8df f001 	tbb	[pc, r1]
   d477a:	0402      	.short	0x0402
   d477c:	0c0a      	.short	0x0c0a
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   d477e:	22f8      	movs	r2, #248	; 0xf8
   d4780:	e003      	b.n	d478a <_ZN8MAX3010510enableSlotEhh+0x1c>
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d4782:	011b      	lsls	r3, r3, #4
   d4784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d4788:	228f      	movs	r2, #143	; 0x8f
   d478a:	2111      	movs	r1, #17
   d478c:	e006      	b.n	d479c <_ZN8MAX3010510enableSlotEhh+0x2e>
      break;
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   d478e:	22f8      	movs	r2, #248	; 0xf8
   d4790:	e003      	b.n	d479a <_ZN8MAX3010510enableSlotEhh+0x2c>
      break;
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   d4792:	011b      	lsls	r3, r3, #4
   d4794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d4798:	228f      	movs	r2, #143	; 0x8f
   d479a:	2112      	movs	r1, #18
   d479c:	f7ff bf9a 	b.w	d46d4 <_ZN8MAX301057bitMaskEhhh>
   d47a0:	4770      	bx	lr

000d47a2 <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   d47a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d47a6:	4616      	mov	r6, r2
   d47a8:	ad08      	add	r5, sp, #32
   d47aa:	4604      	mov	r4, r0
   d47ac:	4688      	mov	r8, r1
   d47ae:	461f      	mov	r7, r3
   d47b0:	e895 0620 	ldmia.w	r5, {r5, r9, sl}
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   d47b4:	f7ff ffa2 	bl	d46fc <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   d47b8:	2e01      	cmp	r6, #1
   d47ba:	d101      	bne.n	d47c0 <_ZN8MAX301055setupEhhhiii+0x1e>
   d47bc:	2100      	movs	r1, #0
   d47be:	e012      	b.n	d47e6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   d47c0:	2e02      	cmp	r6, #2
   d47c2:	d101      	bne.n	d47c8 <_ZN8MAX301055setupEhhhiii+0x26>
   d47c4:	2120      	movs	r1, #32
   d47c6:	e00e      	b.n	d47e6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   d47c8:	2e04      	cmp	r6, #4
   d47ca:	d101      	bne.n	d47d0 <_ZN8MAX301055setupEhhhiii+0x2e>
   d47cc:	2140      	movs	r1, #64	; 0x40
   d47ce:	e00a      	b.n	d47e6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   d47d0:	2e08      	cmp	r6, #8
   d47d2:	d101      	bne.n	d47d8 <_ZN8MAX301055setupEhhhiii+0x36>
   d47d4:	2160      	movs	r1, #96	; 0x60
   d47d6:	e006      	b.n	d47e6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   d47d8:	2e10      	cmp	r6, #16
   d47da:	d101      	bne.n	d47e0 <_ZN8MAX301055setupEhhhiii+0x3e>
   d47dc:	2180      	movs	r1, #128	; 0x80
   d47de:	e002      	b.n	d47e6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   d47e0:	2e20      	cmp	r6, #32
   d47e2:	d1f3      	bne.n	d47cc <_ZN8MAX301055setupEhhhiii+0x2a>
   d47e4:	21a0      	movs	r1, #160	; 0xa0
   d47e6:	4620      	mov	r0, r4
   d47e8:	f7ff ffb7 	bl	d475a <_ZN8MAX3010514setFIFOAverageEh>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   d47ec:	4620      	mov	r0, r4
   d47ee:	f7ff ffb9 	bl	d4764 <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   d47f2:	2f03      	cmp	r7, #3
   d47f4:	d101      	bne.n	d47fa <_ZN8MAX301055setupEhhhiii+0x58>
   d47f6:	2107      	movs	r1, #7
   d47f8:	e003      	b.n	d4802 <_ZN8MAX301055setupEhhhiii+0x60>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   d47fa:	2f02      	cmp	r7, #2
   d47fc:	bf0c      	ite	eq
   d47fe:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   d4800:	2102      	movne	r1, #2
   d4802:	4620      	mov	r0, r4
   d4804:	f7ff ff95 	bl	d4732 <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d4808:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   d480c:	7167      	strb	r7, [r4, #5]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d480e:	da01      	bge.n	d4814 <_ZN8MAX301055setupEhhhiii+0x72>
   d4810:	2100      	movs	r1, #0
   d4812:	e00b      	b.n	d482c <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   d4814:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   d4818:	da01      	bge.n	d481e <_ZN8MAX301055setupEhhhiii+0x7c>
   d481a:	2120      	movs	r1, #32
   d481c:	e006      	b.n	d482c <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   d481e:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   d4822:	da01      	bge.n	d4828 <_ZN8MAX301055setupEhhhiii+0x86>
   d4824:	2140      	movs	r1, #64	; 0x40
   d4826:	e001      	b.n	d482c <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   d4828:	d1f2      	bne.n	d4810 <_ZN8MAX301055setupEhhhiii+0x6e>
   d482a:	2160      	movs	r1, #96	; 0x60
   d482c:	4620      	mov	r0, r4
   d482e:	f7ff ff85 	bl	d473c <_ZN8MAX3010511setADCRangeEh>
  else setADCRange(MAX30105_ADCRANGE_2048);

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   d4832:	2d63      	cmp	r5, #99	; 0x63
   d4834:	dc01      	bgt.n	d483a <_ZN8MAX301055setupEhhhiii+0x98>
   d4836:	2100      	movs	r1, #0
   d4838:	e01e      	b.n	d4878 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   d483a:	2dc7      	cmp	r5, #199	; 0xc7
   d483c:	dc01      	bgt.n	d4842 <_ZN8MAX301055setupEhhhiii+0xa0>
   d483e:	2104      	movs	r1, #4
   d4840:	e01a      	b.n	d4878 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   d4842:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   d4846:	da01      	bge.n	d484c <_ZN8MAX301055setupEhhhiii+0xaa>
   d4848:	2108      	movs	r1, #8
   d484a:	e015      	b.n	d4878 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   d484c:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
   d4850:	da01      	bge.n	d4856 <_ZN8MAX301055setupEhhhiii+0xb4>
   d4852:	210c      	movs	r1, #12
   d4854:	e010      	b.n	d4878 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   d4856:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   d485a:	da01      	bge.n	d4860 <_ZN8MAX301055setupEhhhiii+0xbe>
   d485c:	2110      	movs	r1, #16
   d485e:	e00b      	b.n	d4878 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   d4860:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
   d4864:	da01      	bge.n	d486a <_ZN8MAX301055setupEhhhiii+0xc8>
   d4866:	2114      	movs	r1, #20
   d4868:	e006      	b.n	d4878 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   d486a:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
   d486e:	da01      	bge.n	d4874 <_ZN8MAX301055setupEhhhiii+0xd2>
   d4870:	2118      	movs	r1, #24
   d4872:	e001      	b.n	d4878 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   d4874:	d1df      	bne.n	d4836 <_ZN8MAX301055setupEhhhiii+0x94>
   d4876:	211c      	movs	r1, #28
   d4878:	4620      	mov	r0, r4
   d487a:	f7ff ff64 	bl	d4746 <_ZN8MAX3010513setSampleRateEh>
  else setSampleRate(MAX30105_SAMPLERATE_50);

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   d487e:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   d4882:	dc01      	bgt.n	d4888 <_ZN8MAX301055setupEhhhiii+0xe6>
   d4884:	2100      	movs	r1, #0
   d4886:	e00e      	b.n	d48a6 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   d4888:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   d488c:	dc01      	bgt.n	d4892 <_ZN8MAX301055setupEhhhiii+0xf0>
   d488e:	2101      	movs	r1, #1
   d4890:	e009      	b.n	d48a6 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   d4892:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   d4896:	dc01      	bgt.n	d489c <_ZN8MAX301055setupEhhhiii+0xfa>
   d4898:	2102      	movs	r1, #2
   d489a:	e004      	b.n	d48a6 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   d489c:	f240 139b 	movw	r3, #411	; 0x19b
   d48a0:	4599      	cmp	r9, r3
   d48a2:	d1ef      	bne.n	d4884 <_ZN8MAX301055setupEhhhiii+0xe2>
   d48a4:	2103      	movs	r1, #3
   d48a6:	4620      	mov	r0, r4
   d48a8:	f7ff ff52 	bl	d4750 <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
   d48ac:	4641      	mov	r1, r8
   d48ae:	4620      	mov	r0, r4
   d48b0:	f7ff fee7 	bl	d4682 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   d48b4:	4641      	mov	r1, r8
   d48b6:	4620      	mov	r0, r4
   d48b8:	f7ff fee8 	bl	d468c <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   d48bc:	4641      	mov	r1, r8
   d48be:	4620      	mov	r0, r4
   d48c0:	f7ff fee9 	bl	d4696 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   d48c4:	4641      	mov	r1, r8
   d48c6:	4620      	mov	r0, r4
   d48c8:	f7ff feea 	bl	d46a0 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
   d48cc:	2201      	movs	r2, #1
   d48ce:	4611      	mov	r1, r2
   d48d0:	4620      	mov	r0, r4
   d48d2:	f7ff ff4c 	bl	d476e <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   d48d6:	2f01      	cmp	r7, #1
   d48d8:	d90c      	bls.n	d48f4 <_ZN8MAX301055setupEhhhiii+0x152>
  switch (slotNumber) {
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d48da:	2320      	movs	r3, #32
   d48dc:	228f      	movs	r2, #143	; 0x8f
   d48de:	2111      	movs	r1, #17
   d48e0:	4620      	mov	r0, r4
   d48e2:	f7ff fef7 	bl	d46d4 <_ZN8MAX301057bitMaskEhhh>

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   d48e6:	2f02      	cmp	r7, #2
   d48e8:	d004      	beq.n	d48f4 <_ZN8MAX301055setupEhhhiii+0x152>
   d48ea:	2203      	movs	r2, #3
   d48ec:	4611      	mov	r1, r2
   d48ee:	4620      	mov	r0, r4
   d48f0:	f7ff ff3d 	bl	d476e <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d48f4:	4620      	mov	r0, r4
}
   d48f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d48fa:	f7ff bed6 	b.w	d46aa <_ZN8MAX301059clearFIFOEv>

000d48fe <_GLOBAL__sub_I__ZN8MAX30105C2Ev>:
   d48fe:	f000 b813 	b.w	d4928 <HAL_Pin_Map>

000d4902 <_GLOBAL__sub_I__Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
   d4902:	f000 b811 	b.w	d4928 <HAL_Pin_Map>
	...

000d4908 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <netdb_freeaddrinfo+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	689b      	ldr	r3, [r3, #8]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030268 	.word	0x00030268

000d4918 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <netdb_getaddrinfo+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	68db      	ldr	r3, [r3, #12]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030268 	.word	0x00030268

000d4928 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_Pin_Map+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	681b      	ldr	r3, [r3, #0]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	0003022c 	.word	0x0003022c

000d4938 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_RNG_GetRandomNumber+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	685b      	ldr	r3, [r3, #4]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030218 	.word	0x00030218

000d4948 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	695b      	ldr	r3, [r3, #20]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030218 	.word	0x00030218

000d4958 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <os_thread_is_current+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	689b      	ldr	r3, [r3, #8]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030248 	.word	0x00030248

000d4968 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <os_thread_join+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	691b      	ldr	r3, [r3, #16]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030248 	.word	0x00030248

000d4978 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <os_thread_cleanup+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	695b      	ldr	r3, [r3, #20]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030248 	.word	0x00030248

000d4988 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <os_mutex_recursive_create+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030248 	.word	0x00030248

000d4998 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <os_mutex_recursive_destroy+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030248 	.word	0x00030248

000d49a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <inet_inet_ntop+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	695b      	ldr	r3, [r3, #20]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030264 	.word	0x00030264

000d49b8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <HAL_USART_Init+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	681b      	ldr	r3, [r3, #0]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003023c 	.word	0x0003023c

000d49c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <HAL_USART_Write_Data+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	68db      	ldr	r3, [r3, #12]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003023c 	.word	0x0003023c

000d49d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <HAL_USART_Available_Data+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	691b      	ldr	r3, [r3, #16]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003023c 	.word	0x0003023c

000d49e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <HAL_USART_Read_Data+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	695b      	ldr	r3, [r3, #20]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003023c 	.word	0x0003023c

000d49f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <HAL_USART_Peek_Data+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	699b      	ldr	r3, [r3, #24]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003023c 	.word	0x0003023c

000d4a08 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <HAL_USART_Flush_Data+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	69db      	ldr	r3, [r3, #28]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	0003023c 	.word	0x0003023c

000d4a18 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <HAL_USART_Available_Data_For_Write+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003023c 	.word	0x0003023c

000d4a28 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <HAL_I2C_Set_Speed+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	681b      	ldr	r3, [r3, #0]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030228 	.word	0x00030228

000d4a38 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <HAL_I2C_Begin+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	68db      	ldr	r3, [r3, #12]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030228 	.word	0x00030228

000d4a48 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <HAL_I2C_Begin_Transmission+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	699b      	ldr	r3, [r3, #24]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030228 	.word	0x00030228

000d4a58 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <HAL_I2C_End_Transmission+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	69db      	ldr	r3, [r3, #28]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	00030228 	.word	0x00030228

000d4a68 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <HAL_I2C_Write_Data+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	6a1b      	ldr	r3, [r3, #32]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	00030228 	.word	0x00030228

000d4a78 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <HAL_I2C_Available_Data+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	00030228 	.word	0x00030228

000d4a88 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <HAL_I2C_Read_Data+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	00030228 	.word	0x00030228

000d4a98 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <HAL_I2C_Peek_Data+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	00030228 	.word	0x00030228

000d4aa8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <HAL_I2C_Flush_Data+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	00030228 	.word	0x00030228

000d4ab8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <HAL_I2C_Init+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	00030228 	.word	0x00030228

000d4ac8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <HAL_I2C_Request_Data_Ex+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	00030228 	.word	0x00030228

000d4ad8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <HAL_USB_USART_Init+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	681b      	ldr	r3, [r3, #0]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	0003024c 	.word	0x0003024c

000d4ae8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <HAL_USB_USART_Begin+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	685b      	ldr	r3, [r3, #4]
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	0003024c 	.word	0x0003024c

000d4af8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <HAL_USB_USART_Available_Data+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	691b      	ldr	r3, [r3, #16]
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	0003024c 	.word	0x0003024c

000d4b08 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	695b      	ldr	r3, [r3, #20]
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	0003024c 	.word	0x0003024c

000d4b18 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <HAL_USB_USART_Receive_Data+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	699b      	ldr	r3, [r3, #24]
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	0003024c 	.word	0x0003024c

000d4b28 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <HAL_USB_USART_Send_Data+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	69db      	ldr	r3, [r3, #28]
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	0003024c 	.word	0x0003024c

000d4b38 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <HAL_USB_USART_Flush_Data+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	6a1b      	ldr	r3, [r3, #32]
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	0003024c 	.word	0x0003024c

000d4b48 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <set_system_mode+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	685b      	ldr	r3, [r3, #4]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	00030220 	.word	0x00030220

000d4b58 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <system_delay_ms+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	695b      	ldr	r3, [r3, #20]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	00030220 	.word	0x00030220

000d4b68 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b03      	ldr	r3, [pc, #12]	; (d4b78 <system_ctrl_set_app_request_handler+0x10>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b72:	9301      	str	r3, [sp, #4]
   d4b74:	bd08      	pop	{r3, pc}
   d4b76:	0000      	.short	0x0000
   d4b78:	00030220 	.word	0x00030220

000d4b7c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b03      	ldr	r3, [pc, #12]	; (d4b8c <system_ctrl_set_result+0x10>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b86:	9301      	str	r3, [sp, #4]
   d4b88:	bd08      	pop	{r3, pc}
   d4b8a:	0000      	.short	0x0000
   d4b8c:	00030220 	.word	0x00030220

000d4b90 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <network_connect+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	685b      	ldr	r3, [r3, #4]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030240 	.word	0x00030240

000d4ba0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <network_connecting+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	689b      	ldr	r3, [r3, #8]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030240 	.word	0x00030240

000d4bb0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <network_disconnect+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	68db      	ldr	r3, [r3, #12]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030240 	.word	0x00030240

000d4bc0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <network_ready+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	691b      	ldr	r3, [r3, #16]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030240 	.word	0x00030240

000d4bd0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <network_on+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	695b      	ldr	r3, [r3, #20]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030240 	.word	0x00030240

000d4be0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <network_off+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	699b      	ldr	r3, [r3, #24]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030240 	.word	0x00030240

000d4bf0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <network_listen+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	69db      	ldr	r3, [r3, #28]
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030240 	.word	0x00030240

000d4c00 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <network_listening+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	6a1b      	ldr	r3, [r3, #32]
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030240 	.word	0x00030240

000d4c10 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <network_set_listen_timeout+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030240 	.word	0x00030240

000d4c20 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <network_get_listen_timeout+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	00030240 	.word	0x00030240

000d4c30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030244 	.word	0x00030244

000d4c40 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <malloc+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	681b      	ldr	r3, [r3, #0]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	0003021c 	.word	0x0003021c

000d4c50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <free+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	685b      	ldr	r3, [r3, #4]
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	0003021c 	.word	0x0003021c

000d4c60 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c60:	2200      	movs	r2, #0
   d4c62:	4611      	mov	r1, r2
   d4c64:	6840      	ldr	r0, [r0, #4]
   d4c66:	f7ff bfcb 	b.w	d4c00 <network_listening>

000d4c6a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c6a:	2200      	movs	r2, #0
   d4c6c:	4611      	mov	r1, r2
   d4c6e:	6840      	ldr	r0, [r0, #4]
   d4c70:	f7ff bfd6 	b.w	d4c20 <network_get_listen_timeout>

000d4c74 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c74:	2200      	movs	r2, #0
   d4c76:	6840      	ldr	r0, [r0, #4]
   d4c78:	f7ff bfca 	b.w	d4c10 <network_set_listen_timeout>

000d4c7c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c7c:	2200      	movs	r2, #0
   d4c7e:	f081 0101 	eor.w	r1, r1, #1
   d4c82:	6840      	ldr	r0, [r0, #4]
   d4c84:	f7ff bfb4 	b.w	d4bf0 <network_listen>

000d4c88 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4c88:	2300      	movs	r3, #0
   d4c8a:	461a      	mov	r2, r3
   d4c8c:	4619      	mov	r1, r3
   d4c8e:	6840      	ldr	r0, [r0, #4]
   d4c90:	f7ff bfa6 	b.w	d4be0 <network_off>

000d4c94 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c94:	2300      	movs	r3, #0
   d4c96:	461a      	mov	r2, r3
   d4c98:	4619      	mov	r1, r3
   d4c9a:	6840      	ldr	r0, [r0, #4]
   d4c9c:	f7ff bf98 	b.w	d4bd0 <network_on>

000d4ca0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ca0:	2200      	movs	r2, #0
   d4ca2:	4611      	mov	r1, r2
   d4ca4:	6840      	ldr	r0, [r0, #4]
   d4ca6:	f7ff bf8b 	b.w	d4bc0 <network_ready>

000d4caa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4caa:	2200      	movs	r2, #0
   d4cac:	4611      	mov	r1, r2
   d4cae:	6840      	ldr	r0, [r0, #4]
   d4cb0:	f7ff bf76 	b.w	d4ba0 <network_connecting>

000d4cb4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cb4:	2200      	movs	r2, #0
   d4cb6:	2102      	movs	r1, #2
   d4cb8:	6840      	ldr	r0, [r0, #4]
   d4cba:	f7ff bf79 	b.w	d4bb0 <network_disconnect>

000d4cbe <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4cbe:	2300      	movs	r3, #0
   d4cc0:	461a      	mov	r2, r3
   d4cc2:	6840      	ldr	r0, [r0, #4]
   d4cc4:	f7ff bf64 	b.w	d4b90 <network_connect>

000d4cc8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cc8:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4cca:	2203      	movs	r2, #3
   d4ccc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4cce:	4a02      	ldr	r2, [pc, #8]	; (d4cd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4cd0:	601a      	str	r2, [r3, #0]
   d4cd2:	4770      	bx	lr
   d4cd4:	2003e3dc 	.word	0x2003e3dc
   d4cd8:	000d672c 	.word	0x000d672c

000d4cdc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4cdc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4cde:	4c09      	ldr	r4, [pc, #36]	; (d4d04 <_GLOBAL__sub_I_System+0x28>)
   d4ce0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ce6:	6020      	str	r0, [r4, #0]
   d4ce8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cea:	71a0      	strb	r0, [r4, #6]
   d4cec:	8120      	strh	r0, [r4, #8]
   d4cee:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4cf0:	f7ff ff2a 	bl	d4b48 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	4a04      	ldr	r2, [pc, #16]	; (d4d08 <_GLOBAL__sub_I_System+0x2c>)
   d4cf8:	4904      	ldr	r1, [pc, #16]	; (d4d0c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4cfe:	f000 bded 	b.w	d58dc <__aeabi_atexit>
   d4d02:	bf00      	nop
   d4d04:	2003e3e4 	.word	0x2003e3e4
   d4d08:	2003e328 	.word	0x2003e328
   d4d0c:	000d40af 	.word	0x000d40af

000d4d10 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d10:	b510      	push	{r4, lr}
   d4d12:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d14:	6800      	ldr	r0, [r0, #0]
   d4d16:	b108      	cbz	r0, d4d1c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d18:	f7ff fe3e 	bl	d4998 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4d1c:	4620      	mov	r0, r4
   d4d1e:	bd10      	pop	{r4, pc}

000d4d20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d20:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d22:	4c06      	ldr	r4, [pc, #24]	; (d4d3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d24:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4d26:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d28:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d2a:	f7ff fe2d 	bl	d4988 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d2e:	4620      	mov	r0, r4
   d4d30:	4a03      	ldr	r2, [pc, #12]	; (d4d40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d32:	4904      	ldr	r1, [pc, #16]	; (d4d44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d38:	f000 bdd0 	b.w	d58dc <__aeabi_atexit>
   d4d3c:	2003e3f0 	.word	0x2003e3f0
   d4d40:	2003e328 	.word	0x2003e328
   d4d44:	000d4d11 	.word	0x000d4d11

000d4d48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d4a:	4606      	mov	r6, r0
   d4d4c:	460d      	mov	r5, r1
   d4d4e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4d50:	2400      	movs	r4, #0
  while (size--) {
   d4d52:	42bd      	cmp	r5, r7
   d4d54:	d00c      	beq.n	d4d70 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d56:	6833      	ldr	r3, [r6, #0]
   d4d58:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d5c:	689b      	ldr	r3, [r3, #8]
   d4d5e:	4630      	mov	r0, r6
   d4d60:	4798      	blx	r3
     if (chunk>=0)
   d4d62:	2800      	cmp	r0, #0
   d4d64:	db01      	blt.n	d4d6a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d66:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4d68:	e7f3      	b.n	d4d52 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d6a:	2c00      	cmp	r4, #0
   d4d6c:	bf08      	it	eq
   d4d6e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d70:	4620      	mov	r0, r4
   d4d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d74 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d74:	b570      	push	{r4, r5, r6, lr}
   d4d76:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4d78:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4d7a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4d7c:	b149      	cbz	r1, d4d92 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4d7e:	f001 fc61 	bl	d6644 <strlen>
   d4d82:	682b      	ldr	r3, [r5, #0]
   d4d84:	4602      	mov	r2, r0
   d4d86:	4621      	mov	r1, r4
   d4d88:	4628      	mov	r0, r5
   d4d8a:	68db      	ldr	r3, [r3, #12]
    }
   d4d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d90:	4718      	bx	r3
    }
   d4d92:	bd70      	pop	{r4, r5, r6, pc}

000d4d94 <_ZN5Print5printEPKc>:
   d4d94:	b508      	push	{r3, lr}
   d4d96:	f7ff ffed 	bl	d4d74 <_ZN5Print5writeEPKc>
   d4d9a:	bd08      	pop	{r3, pc}

000d4d9c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4d9c:	6803      	ldr	r3, [r0, #0]
   d4d9e:	689b      	ldr	r3, [r3, #8]
   d4da0:	4718      	bx	r3

000d4da2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4da2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4da4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4da6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4da8:	f7ff fff8 	bl	d4d9c <_ZN5Print5printEc>
  n += print('\n');
   d4dac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4dae:	4604      	mov	r4, r0
  n += print('\n');
   d4db0:	4628      	mov	r0, r5
   d4db2:	f7ff fff3 	bl	d4d9c <_ZN5Print5printEc>
  return n;
}
   d4db6:	4420      	add	r0, r4
   d4db8:	bd38      	pop	{r3, r4, r5, pc}

000d4dba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4dba:	b538      	push	{r3, r4, r5, lr}
   d4dbc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dbe:	f7ff ffd9 	bl	d4d74 <_ZN5Print5writeEPKc>
   d4dc2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4dc4:	4628      	mov	r0, r5
   d4dc6:	f7ff ffec 	bl	d4da2 <_ZN5Print7printlnEv>
  return n;
}
   d4dca:	4420      	add	r0, r4
   d4dcc:	bd38      	pop	{r3, r4, r5, pc}

000d4dce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4dce:	b530      	push	{r4, r5, lr}
   d4dd0:	b08b      	sub	sp, #44	; 0x2c
   d4dd2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4dd4:	2100      	movs	r1, #0
   d4dd6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4dda:	2a01      	cmp	r2, #1
   d4ddc:	bf98      	it	ls
   d4dde:	220a      	movls	r2, #10
   d4de0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4de4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4de8:	fb05 3312 	mls	r3, r5, r2, r3
   d4dec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4df0:	2b09      	cmp	r3, #9
   d4df2:	bf94      	ite	ls
   d4df4:	3330      	addls	r3, #48	; 0x30
   d4df6:	3337      	addhi	r3, #55	; 0x37
   d4df8:	b2db      	uxtb	r3, r3
   d4dfa:	4621      	mov	r1, r4
   d4dfc:	f804 3901 	strb.w	r3, [r4], #-1
   d4e00:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4e02:	2d00      	cmp	r5, #0
   d4e04:	d1ee      	bne.n	d4de4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4e06:	f7ff ffb5 	bl	d4d74 <_ZN5Print5writeEPKc>
}
   d4e0a:	b00b      	add	sp, #44	; 0x2c
   d4e0c:	bd30      	pop	{r4, r5, pc}
	...

000d4e10 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4e14:	ec57 6b10 	vmov	r6, r7, d0
   d4e18:	4682      	mov	sl, r0
   d4e1a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4e1c:	ee10 2a10 	vmov	r2, s0
   d4e20:	463b      	mov	r3, r7
   d4e22:	ee10 0a10 	vmov	r0, s0
   d4e26:	4639      	mov	r1, r7
   d4e28:	f001 fb14 	bl	d6454 <__aeabi_dcmpun>
   d4e2c:	b108      	cbz	r0, d4e32 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e2e:	494e      	ldr	r1, [pc, #312]	; (d4f68 <_ZN5Print10printFloatEdh+0x158>)
   d4e30:	e012      	b.n	d4e58 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4e32:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4e36:	f04f 32ff 	mov.w	r2, #4294967295
   d4e3a:	4b4c      	ldr	r3, [pc, #304]	; (d4f6c <_ZN5Print10printFloatEdh+0x15c>)
   d4e3c:	4630      	mov	r0, r6
   d4e3e:	4649      	mov	r1, r9
   d4e40:	f001 fb08 	bl	d6454 <__aeabi_dcmpun>
   d4e44:	b968      	cbnz	r0, d4e62 <_ZN5Print10printFloatEdh+0x52>
   d4e46:	f04f 32ff 	mov.w	r2, #4294967295
   d4e4a:	4b48      	ldr	r3, [pc, #288]	; (d4f6c <_ZN5Print10printFloatEdh+0x15c>)
   d4e4c:	4630      	mov	r0, r6
   d4e4e:	4649      	mov	r1, r9
   d4e50:	f001 fae2 	bl	d6418 <__aeabi_dcmple>
   d4e54:	b928      	cbnz	r0, d4e62 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e56:	4946      	ldr	r1, [pc, #280]	; (d4f70 <_ZN5Print10printFloatEdh+0x160>)
   d4e58:	4650      	mov	r0, sl
   d4e5a:	f7ff ff8b 	bl	d4d74 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4e62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4e66:	4b43      	ldr	r3, [pc, #268]	; (d4f74 <_ZN5Print10printFloatEdh+0x164>)
   d4e68:	4630      	mov	r0, r6
   d4e6a:	4639      	mov	r1, r7
   d4e6c:	f001 fae8 	bl	d6440 <__aeabi_dcmpgt>
   d4e70:	b108      	cbz	r0, d4e76 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e72:	4941      	ldr	r1, [pc, #260]	; (d4f78 <_ZN5Print10printFloatEdh+0x168>)
   d4e74:	e7f0      	b.n	d4e58 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4e76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4e7a:	4b40      	ldr	r3, [pc, #256]	; (d4f7c <_ZN5Print10printFloatEdh+0x16c>)
   d4e7c:	4630      	mov	r0, r6
   d4e7e:	4639      	mov	r1, r7
   d4e80:	f001 fac0 	bl	d6404 <__aeabi_dcmplt>
   d4e84:	2800      	cmp	r0, #0
   d4e86:	d1f4      	bne.n	d4e72 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4e88:	2200      	movs	r2, #0
   d4e8a:	2300      	movs	r3, #0
   d4e8c:	4630      	mov	r0, r6
   d4e8e:	4639      	mov	r1, r7
   d4e90:	f001 fab8 	bl	d6404 <__aeabi_dcmplt>
   d4e94:	b140      	cbz	r0, d4ea8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4e96:	212d      	movs	r1, #45	; 0x2d
   d4e98:	4650      	mov	r0, sl
   d4e9a:	f7ff ff7f 	bl	d4d9c <_ZN5Print5printEc>
     number = -number;
   d4e9e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4ea2:	4604      	mov	r4, r0
     number = -number;
   d4ea4:	461f      	mov	r7, r3
   d4ea6:	e000      	b.n	d4eaa <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4ea8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4eaa:	4935      	ldr	r1, [pc, #212]	; (d4f80 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4eac:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4eb0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4eb2:	fa5f f388 	uxtb.w	r3, r8
   d4eb6:	429d      	cmp	r5, r3
   d4eb8:	d906      	bls.n	d4ec8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4eba:	2200      	movs	r2, #0
   d4ebc:	4b31      	ldr	r3, [pc, #196]	; (d4f84 <_ZN5Print10printFloatEdh+0x174>)
   d4ebe:	f001 f959 	bl	d6174 <__aeabi_ddiv>
   d4ec2:	f108 0801 	add.w	r8, r8, #1
   d4ec6:	e7f4      	b.n	d4eb2 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4ec8:	4632      	mov	r2, r6
   d4eca:	463b      	mov	r3, r7
   d4ecc:	f000 fe76 	bl	d5bbc <__adddf3>
   d4ed0:	460f      	mov	r7, r1
   d4ed2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4ed4:	f001 fafc 	bl	d64d0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4ed8:	220a      	movs	r2, #10
   d4eda:	4601      	mov	r1, r0
   d4edc:	4680      	mov	r8, r0
   d4ede:	4650      	mov	r0, sl
   d4ee0:	f7ff ff75 	bl	d4dce <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4ee4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4ee6:	b3e5      	cbz	r5, d4f62 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4ee8:	4640      	mov	r0, r8
   d4eea:	f000 ffa3 	bl	d5e34 <__aeabi_ui2d>
   d4eee:	4602      	mov	r2, r0
   d4ef0:	460b      	mov	r3, r1
   d4ef2:	4630      	mov	r0, r6
   d4ef4:	4639      	mov	r1, r7
   d4ef6:	f000 fe5f 	bl	d5bb8 <__aeabi_dsub>
   d4efa:	4606      	mov	r6, r0
   d4efc:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4efe:	4650      	mov	r0, sl
   d4f00:	4921      	ldr	r1, [pc, #132]	; (d4f88 <_ZN5Print10printFloatEdh+0x178>)
   d4f02:	f7ff ff37 	bl	d4d74 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4f06:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4f08:	2200      	movs	r2, #0
   d4f0a:	4b1e      	ldr	r3, [pc, #120]	; (d4f84 <_ZN5Print10printFloatEdh+0x174>)
   d4f0c:	4630      	mov	r0, r6
   d4f0e:	4639      	mov	r1, r7
   d4f10:	f001 f806 	bl	d5f20 <__aeabi_dmul>
   d4f14:	4606      	mov	r6, r0
   d4f16:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d4f18:	f001 fab2 	bl	d6480 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4f1c:	f1b0 0900 	subs.w	r9, r0, #0
   d4f20:	da07      	bge.n	d4f32 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d4f22:	212d      	movs	r1, #45	; 0x2d
   d4f24:	4650      	mov	r0, sl
   d4f26:	f7ff ff39 	bl	d4d9c <_ZN5Print5printEc>
            val = -n;
   d4f2a:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4f2e:	4680      	mov	r8, r0
   d4f30:	e002      	b.n	d4f38 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d4f32:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4f34:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4f38:	220a      	movs	r2, #10
   d4f3a:	4650      	mov	r0, sl
   d4f3c:	f7ff ff47 	bl	d4dce <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d4f40:	4440      	add	r0, r8
   d4f42:	4404      	add	r4, r0
    remainder -= toPrint;
   d4f44:	4648      	mov	r0, r9
   d4f46:	f000 ff85 	bl	d5e54 <__aeabi_i2d>
   d4f4a:	4602      	mov	r2, r0
   d4f4c:	460b      	mov	r3, r1
   d4f4e:	4630      	mov	r0, r6
   d4f50:	4639      	mov	r1, r7
   d4f52:	f000 fe31 	bl	d5bb8 <__aeabi_dsub>
   d4f56:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4f58:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4f5c:	4606      	mov	r6, r0
   d4f5e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4f60:	d1d2      	bne.n	d4f08 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4f62:	4620      	mov	r0, r4
   d4f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f68:	000d6758 	.word	0x000d6758
   d4f6c:	7fefffff 	.word	0x7fefffff
   d4f70:	000d6760 	.word	0x000d6760
   d4f74:	41efffff 	.word	0x41efffff
   d4f78:	000d675c 	.word	0x000d675c
   d4f7c:	c1efffff 	.word	0xc1efffff
   d4f80:	3fe00000 	.word	0x3fe00000
   d4f84:	40240000 	.word	0x40240000
   d4f88:	000d6676 	.word	0x000d6676

000d4f8c <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d4f8c:	b538      	push	{r3, r4, r5, lr}
   d4f8e:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d4f90:	ee10 0a10 	vmov	r0, s0
   d4f94:	b2cd      	uxtb	r5, r1
   d4f96:	f000 ff6f 	bl	d5e78 <__aeabi_f2d>
   d4f9a:	ec41 0b10 	vmov	d0, r0, r1
   d4f9e:	4629      	mov	r1, r5
   d4fa0:	4620      	mov	r0, r4
}
   d4fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d4fa6:	f7ff bf33 	b.w	d4e10 <_ZN5Print10printFloatEdh>
	...

000d4fac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4fac:	4b01      	ldr	r3, [pc, #4]	; (d4fb4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4fae:	4a02      	ldr	r2, [pc, #8]	; (d4fb8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4fb0:	601a      	str	r2, [r3, #0]
   d4fb2:	4770      	bx	lr
   d4fb4:	2003e3f4 	.word	0x2003e3f4
   d4fb8:	000d67d7 	.word	0x000d67d7

000d4fbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4fbc:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4fbe:	681a      	ldr	r2, [r3, #0]
   d4fc0:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4fc2:	601a      	str	r2, [r3, #0]
   d4fc4:	4770      	bx	lr
   d4fc6:	bf00      	nop
   d4fc8:	2003e2c0 	.word	0x2003e2c0
   d4fcc:	2003e3f8 	.word	0x2003e3f8

000d4fd0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4fd0:	2100      	movs	r1, #0
   d4fd2:	f7ff bdc1 	b.w	d4b58 <system_delay_ms>

000d4fd6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4fd6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4fd8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4fda:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4fdc:	b113      	cbz	r3, d4fe4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4fde:	2203      	movs	r2, #3
   d4fe0:	4601      	mov	r1, r0
   d4fe2:	4798      	blx	r3
    }
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	bd10      	pop	{r4, pc}

000d4fe8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4fe8:	b510      	push	{r4, lr}
   d4fea:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fec:	f7ff fff3 	bl	d4fd6 <_ZNSt14_Function_baseD1Ev>
   d4ff0:	4620      	mov	r0, r4
   d4ff2:	bd10      	pop	{r4, pc}

000d4ff4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ff4:	4803      	ldr	r0, [pc, #12]	; (d5004 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4ff6:	4a04      	ldr	r2, [pc, #16]	; (d5008 <_GLOBAL__sub_I_RGB+0x14>)
   d4ff8:	4904      	ldr	r1, [pc, #16]	; (d500c <_GLOBAL__sub_I_RGB+0x18>)
   d4ffa:	2300      	movs	r3, #0
   d4ffc:	6083      	str	r3, [r0, #8]
   d4ffe:	f000 bc6d 	b.w	d58dc <__aeabi_atexit>
   d5002:	bf00      	nop
   d5004:	2003e3fc 	.word	0x2003e3fc
   d5008:	2003e328 	.word	0x2003e328
   d500c:	000d4fe9 	.word	0x000d4fe9

000d5010 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5010:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5012:	4b0c      	ldr	r3, [pc, #48]	; (d5044 <serialEventRun+0x34>)
   d5014:	b133      	cbz	r3, d5024 <serialEventRun+0x14>
   d5016:	f000 f957 	bl	d52c8 <_Z16_fetch_usbserialv>
   d501a:	6803      	ldr	r3, [r0, #0]
   d501c:	691b      	ldr	r3, [r3, #16]
   d501e:	4798      	blx	r3
   d5020:	2800      	cmp	r0, #0
   d5022:	dc09      	bgt.n	d5038 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5024:	4b08      	ldr	r3, [pc, #32]	; (d5048 <serialEventRun+0x38>)
   d5026:	b163      	cbz	r3, d5042 <serialEventRun+0x32>
   d5028:	f000 f9cc 	bl	d53c4 <_Z22__fetch_global_Serial1v>
   d502c:	6803      	ldr	r3, [r0, #0]
   d502e:	691b      	ldr	r3, [r3, #16]
   d5030:	4798      	blx	r3
   d5032:	2800      	cmp	r0, #0
   d5034:	dc03      	bgt.n	d503e <serialEventRun+0x2e>
   d5036:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5038:	f3af 8000 	nop.w
   d503c:	e7f2      	b.n	d5024 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d503e:	f3af 8000 	nop.w
   d5042:	bd08      	pop	{r3, pc}
	...

000d504c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d504c:	b508      	push	{r3, lr}
	serialEventRun();
   d504e:	f7ff ffdf 	bl	d5010 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5052:	f7ff fc79 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5056:	4b01      	ldr	r3, [pc, #4]	; (d505c <_post_loop+0x10>)
   d5058:	6018      	str	r0, [r3, #0]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	2003e730 	.word	0x2003e730

000d5060 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5060:	4802      	ldr	r0, [pc, #8]	; (d506c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5062:	4a03      	ldr	r2, [pc, #12]	; (d5070 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5064:	4903      	ldr	r1, [pc, #12]	; (d5074 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5066:	1a12      	subs	r2, r2, r0
   d5068:	f001 bab0 	b.w	d65cc <memcpy>
   d506c:	2003f400 	.word	0x2003f400
   d5070:	2003f404 	.word	0x2003f404
   d5074:	000d6a50 	.word	0x000d6a50

000d5078 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5078:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d507a:	2300      	movs	r3, #0
   d507c:	9300      	str	r3, [sp, #0]
   d507e:	461a      	mov	r2, r3
   d5080:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5084:	f7ff fd7a 	bl	d4b7c <system_ctrl_set_result>
}
   d5088:	b003      	add	sp, #12
   d508a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5090 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5090:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5092:	8843      	ldrh	r3, [r0, #2]
   d5094:	2b0a      	cmp	r3, #10
   d5096:	d008      	beq.n	d50aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5098:	2b50      	cmp	r3, #80	; 0x50
   d509a:	d109      	bne.n	d50b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d509c:	4b09      	ldr	r3, [pc, #36]	; (d50c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d509e:	681b      	ldr	r3, [r3, #0]
   d50a0:	b13b      	cbz	r3, d50b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d50a2:	b003      	add	sp, #12
   d50a4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d50a8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d50aa:	f7ff ffe5 	bl	d5078 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d50ae:	e006      	b.n	d50be <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d50b0:	2300      	movs	r3, #0
   d50b2:	9300      	str	r3, [sp, #0]
   d50b4:	461a      	mov	r2, r3
   d50b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d50ba:	f7ff fd5f 	bl	d4b7c <system_ctrl_set_result>
        break;
    }
}
   d50be:	b003      	add	sp, #12
   d50c0:	f85d fb04 	ldr.w	pc, [sp], #4
   d50c4:	2003e40c 	.word	0x2003e40c

000d50c8 <module_user_init_hook>:

void module_user_init_hook()
{
   d50c8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d50ca:	4c10      	ldr	r4, [pc, #64]	; (d510c <module_user_init_hook+0x44>)
   d50cc:	4d10      	ldr	r5, [pc, #64]	; (d5110 <module_user_init_hook+0x48>)
   d50ce:	6823      	ldr	r3, [r4, #0]
   d50d0:	42ab      	cmp	r3, r5
   d50d2:	4b10      	ldr	r3, [pc, #64]	; (d5114 <module_user_init_hook+0x4c>)
   d50d4:	bf0c      	ite	eq
   d50d6:	2201      	moveq	r2, #1
   d50d8:	2200      	movne	r2, #0
   d50da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d50dc:	d002      	beq.n	d50e4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d50de:	f7ff ffbf 	bl	d5060 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d50e2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d50e4:	f7ff fc28 	bl	d4938 <HAL_RNG_GetRandomNumber>
   d50e8:	4604      	mov	r4, r0
    srand(seed);
   d50ea:	f001 fa83 	bl	d65f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d50ee:	4b0a      	ldr	r3, [pc, #40]	; (d5118 <module_user_init_hook+0x50>)
   d50f0:	b113      	cbz	r3, d50f8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d50f2:	4620      	mov	r0, r4
   d50f4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d50f8:	2100      	movs	r1, #0
   d50fa:	4807      	ldr	r0, [pc, #28]	; (d5118 <module_user_init_hook+0x50>)
   d50fc:	f7ff fd98 	bl	d4c30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5100:	2100      	movs	r1, #0
   d5102:	4806      	ldr	r0, [pc, #24]	; (d511c <module_user_init_hook+0x54>)
}
   d5104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5108:	f7ff bd2e 	b.w	d4b68 <system_ctrl_set_app_request_handler>
   d510c:	2003f400 	.word	0x2003f400
   d5110:	9a271c1e 	.word	0x9a271c1e
   d5114:	2003e410 	.word	0x2003e410
   d5118:	00000000 	.word	0x00000000
   d511c:	000d5091 	.word	0x000d5091

000d5120 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5120:	4770      	bx	lr

000d5122 <_ZN9IPAddressD0Ev>:
   d5122:	b510      	push	{r4, lr}
   d5124:	2118      	movs	r1, #24
   d5126:	4604      	mov	r4, r0
   d5128:	f000 fbe6 	bl	d58f8 <_ZdlPvj>
   d512c:	4620      	mov	r0, r4
   d512e:	bd10      	pop	{r4, pc}

000d5130 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5130:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5132:	7d03      	ldrb	r3, [r0, #20]
   d5134:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5136:	b08d      	sub	sp, #52	; 0x34
   d5138:	460e      	mov	r6, r1
   d513a:	f100 0704 	add.w	r7, r0, #4
   d513e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5142:	d002      	beq.n	d514a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5144:	f100 0508 	add.w	r5, r0, #8
   d5148:	e018      	b.n	d517c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d514a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d514c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d514e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5152:	232f      	movs	r3, #47	; 0x2f
   d5154:	462a      	mov	r2, r5
   d5156:	200a      	movs	r0, #10
   d5158:	f7ff fc26 	bl	d49a8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d515c:	4628      	mov	r0, r5
   d515e:	f001 fa71 	bl	d6644 <strlen>
   d5162:	6833      	ldr	r3, [r6, #0]
   d5164:	4602      	mov	r2, r0
   d5166:	68db      	ldr	r3, [r3, #12]
   d5168:	4629      	mov	r1, r5
   d516a:	4630      	mov	r0, r6
   d516c:	4798      	blx	r3
   d516e:	e00f      	b.n	d5190 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5170:	b124      	cbz	r4, d517c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5172:	212e      	movs	r1, #46	; 0x2e
   d5174:	4630      	mov	r0, r6
   d5176:	f7ff fe11 	bl	d4d9c <_ZN5Print5printEc>
   d517a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d517c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5180:	220a      	movs	r2, #10
   d5182:	4630      	mov	r0, r6
   d5184:	f7ff fe23 	bl	d4dce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5188:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d518a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d518c:	d1f0      	bne.n	d5170 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d518e:	4620      	mov	r0, r4
    }
    return n;
}
   d5190:	b00d      	add	sp, #52	; 0x34
   d5192:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5194 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5194:	b510      	push	{r4, lr}
   d5196:	4b05      	ldr	r3, [pc, #20]	; (d51ac <_ZN9IPAddressC1Ev+0x18>)
   d5198:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d519a:	2211      	movs	r2, #17
   d519c:	f840 3b04 	str.w	r3, [r0], #4
   d51a0:	2100      	movs	r1, #0
   d51a2:	f001 fa1e 	bl	d65e2 <memset>
{
    clear();
}
   d51a6:	4620      	mov	r0, r4
   d51a8:	bd10      	pop	{r4, pc}
   d51aa:	bf00      	nop
   d51ac:	000d6874 	.word	0x000d6874

000d51b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d51b0:	4603      	mov	r3, r0
   d51b2:	4a07      	ldr	r2, [pc, #28]	; (d51d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d51b4:	b510      	push	{r4, lr}
   d51b6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d51ba:	f101 0210 	add.w	r2, r1, #16
   d51be:	f851 4b04 	ldr.w	r4, [r1], #4
   d51c2:	f843 4b04 	str.w	r4, [r3], #4
   d51c6:	4291      	cmp	r1, r2
   d51c8:	d1f9      	bne.n	d51be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d51ca:	780a      	ldrb	r2, [r1, #0]
   d51cc:	701a      	strb	r2, [r3, #0]
}
   d51ce:	bd10      	pop	{r4, pc}
   d51d0:	000d6874 	.word	0x000d6874

000d51d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d51d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d51d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d51da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d51de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d51e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d51e6:	2304      	movs	r3, #4
   d51e8:	6041      	str	r1, [r0, #4]
   d51ea:	7503      	strb	r3, [r0, #20]
   d51ec:	bd10      	pop	{r4, pc}

000d51ee <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d51ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d51f0:	780d      	ldrb	r5, [r1, #0]
   d51f2:	788b      	ldrb	r3, [r1, #2]
   d51f4:	784a      	ldrb	r2, [r1, #1]
   d51f6:	78c9      	ldrb	r1, [r1, #3]
   d51f8:	9100      	str	r1, [sp, #0]
   d51fa:	4629      	mov	r1, r5
   d51fc:	f7ff ffea 	bl	d51d4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5200:	b003      	add	sp, #12
   d5202:	bd30      	pop	{r4, r5, pc}

000d5204 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5204:	7441      	strb	r1, [r0, #17]
   d5206:	4770      	bx	lr

000d5208 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5208:	4770      	bx	lr

000d520a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d520a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d520c:	2100      	movs	r1, #0
   d520e:	7c00      	ldrb	r0, [r0, #16]
   d5210:	f7ff fc82 	bl	d4b18 <HAL_USB_USART_Receive_Data>
}
   d5214:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5218:	bf28      	it	cs
   d521a:	f04f 30ff 	movcs.w	r0, #4294967295
   d521e:	bd08      	pop	{r3, pc}

000d5220 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5220:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5222:	2101      	movs	r1, #1
   d5224:	7c00      	ldrb	r0, [r0, #16]
   d5226:	f7ff fc77 	bl	d4b18 <HAL_USB_USART_Receive_Data>
}
   d522a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d522e:	bf28      	it	cs
   d5230:	f04f 30ff 	movcs.w	r0, #4294967295
   d5234:	bd08      	pop	{r3, pc}

000d5236 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5236:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5238:	7c00      	ldrb	r0, [r0, #16]
   d523a:	f7ff fc65 	bl	d4b08 <HAL_USB_USART_Available_Data_For_Write>
}
   d523e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5242:	bd08      	pop	{r3, pc}

000d5244 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5244:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5246:	7c00      	ldrb	r0, [r0, #16]
   d5248:	f7ff fc56 	bl	d4af8 <HAL_USB_USART_Available_Data>
}
   d524c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5250:	bd08      	pop	{r3, pc}

000d5252 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5252:	7c00      	ldrb	r0, [r0, #16]
   d5254:	f7ff bc70 	b.w	d4b38 <HAL_USB_USART_Flush_Data>

000d5258 <_ZN9USBSerialD0Ev>:
   d5258:	b510      	push	{r4, lr}
   d525a:	2114      	movs	r1, #20
   d525c:	4604      	mov	r4, r0
   d525e:	f000 fb4b 	bl	d58f8 <_ZdlPvj>
   d5262:	4620      	mov	r0, r4
   d5264:	bd10      	pop	{r4, pc}

000d5266 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5266:	b538      	push	{r3, r4, r5, lr}
   d5268:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d526a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d526c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d526e:	f7ff fc4b 	bl	d4b08 <HAL_USB_USART_Available_Data_For_Write>
   d5272:	2800      	cmp	r0, #0
   d5274:	dc01      	bgt.n	d527a <_ZN9USBSerial5writeEh+0x14>
   d5276:	7c60      	ldrb	r0, [r4, #17]
   d5278:	b128      	cbz	r0, d5286 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d527a:	4629      	mov	r1, r5
   d527c:	7c20      	ldrb	r0, [r4, #16]
   d527e:	f7ff fc53 	bl	d4b28 <HAL_USB_USART_Send_Data>
   d5282:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5286:	bd38      	pop	{r3, r4, r5, pc}

000d5288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5288:	b510      	push	{r4, lr}
   d528a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d528c:	2300      	movs	r3, #0
   d528e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5294:	60a3      	str	r3, [r4, #8]
   d5296:	4b05      	ldr	r3, [pc, #20]	; (d52ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5298:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d529a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d529c:	4608      	mov	r0, r1
{
  _serial = serial;
   d529e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d52a0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d52a2:	4611      	mov	r1, r2
   d52a4:	f7ff fc18 	bl	d4ad8 <HAL_USB_USART_Init>
}
   d52a8:	4620      	mov	r0, r4
   d52aa:	bd10      	pop	{r4, pc}
   d52ac:	000d6888 	.word	0x000d6888

000d52b0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d52b0:	2200      	movs	r2, #0
   d52b2:	7c00      	ldrb	r0, [r0, #16]
   d52b4:	f7ff bc18 	b.w	d4ae8 <HAL_USB_USART_Begin>

000d52b8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d52b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d52ba:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d52bc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d52be:	2100      	movs	r1, #0
   d52c0:	f001 f98f 	bl	d65e2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d52c4:	4620      	mov	r0, r4
   d52c6:	bd10      	pop	{r4, pc}

000d52c8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d52c8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52ca:	4d0e      	ldr	r5, [pc, #56]	; (d5304 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d52cc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d52ce:	a801      	add	r0, sp, #4
   d52d0:	f7ff fff2 	bl	d52b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52d4:	6829      	ldr	r1, [r5, #0]
   d52d6:	f011 0401 	ands.w	r4, r1, #1
   d52da:	d110      	bne.n	d52fe <_Z16_fetch_usbserialv+0x36>
   d52dc:	4628      	mov	r0, r5
   d52de:	f7fe fede 	bl	d409e <__cxa_guard_acquire>
   d52e2:	b160      	cbz	r0, d52fe <_Z16_fetch_usbserialv+0x36>
   d52e4:	aa01      	add	r2, sp, #4
   d52e6:	4621      	mov	r1, r4
   d52e8:	4807      	ldr	r0, [pc, #28]	; (d5308 <_Z16_fetch_usbserialv+0x40>)
   d52ea:	f7ff ffcd 	bl	d5288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d52ee:	4628      	mov	r0, r5
   d52f0:	f7fe feda 	bl	d40a8 <__cxa_guard_release>
   d52f4:	4a05      	ldr	r2, [pc, #20]	; (d530c <_Z16_fetch_usbserialv+0x44>)
   d52f6:	4906      	ldr	r1, [pc, #24]	; (d5310 <_Z16_fetch_usbserialv+0x48>)
   d52f8:	4803      	ldr	r0, [pc, #12]	; (d5308 <_Z16_fetch_usbserialv+0x40>)
   d52fa:	f000 faef 	bl	d58dc <__aeabi_atexit>
	return _usbserial;
}
   d52fe:	4802      	ldr	r0, [pc, #8]	; (d5308 <_Z16_fetch_usbserialv+0x40>)
   d5300:	b007      	add	sp, #28
   d5302:	bd30      	pop	{r4, r5, pc}
   d5304:	2003e414 	.word	0x2003e414
   d5308:	2003e418 	.word	0x2003e418
   d530c:	2003e328 	.word	0x2003e328
   d5310:	000d5209 	.word	0x000d5209

000d5314 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5314:	4770      	bx	lr

000d5316 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5316:	7441      	strb	r1, [r0, #17]
   d5318:	4770      	bx	lr

000d531a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d531a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d531c:	7c00      	ldrb	r0, [r0, #16]
   d531e:	f7ff fb7b 	bl	d4a18 <HAL_USART_Available_Data_For_Write>
}
   d5322:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5326:	bd08      	pop	{r3, pc}

000d5328 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5328:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d532a:	7c00      	ldrb	r0, [r0, #16]
   d532c:	f7ff fb54 	bl	d49d8 <HAL_USART_Available_Data>
}
   d5330:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5334:	bd08      	pop	{r3, pc}

000d5336 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5336:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5338:	7c00      	ldrb	r0, [r0, #16]
   d533a:	f7ff fb5d 	bl	d49f8 <HAL_USART_Peek_Data>
}
   d533e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5342:	bf28      	it	cs
   d5344:	f04f 30ff 	movcs.w	r0, #4294967295
   d5348:	bd08      	pop	{r3, pc}

000d534a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d534a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d534c:	7c00      	ldrb	r0, [r0, #16]
   d534e:	f7ff fb4b 	bl	d49e8 <HAL_USART_Read_Data>
}
   d5352:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5356:	bf28      	it	cs
   d5358:	f04f 30ff 	movcs.w	r0, #4294967295
   d535c:	bd08      	pop	{r3, pc}

000d535e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d535e:	7c00      	ldrb	r0, [r0, #16]
   d5360:	f7ff bb52 	b.w	d4a08 <HAL_USART_Flush_Data>

000d5364 <_ZN11USARTSerialD0Ev>:
   d5364:	b510      	push	{r4, lr}
   d5366:	2114      	movs	r1, #20
   d5368:	4604      	mov	r4, r0
   d536a:	f000 fac5 	bl	d58f8 <_ZdlPvj>
   d536e:	4620      	mov	r0, r4
   d5370:	bd10      	pop	{r4, pc}

000d5372 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5372:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5374:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5376:	4604      	mov	r4, r0
   d5378:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d537a:	b925      	cbnz	r5, d5386 <_ZN11USARTSerial5writeEh+0x14>
   d537c:	7c00      	ldrb	r0, [r0, #16]
   d537e:	f7ff fb4b 	bl	d4a18 <HAL_USART_Available_Data_For_Write>
   d5382:	2800      	cmp	r0, #0
   d5384:	dd05      	ble.n	d5392 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5386:	4631      	mov	r1, r6
   d5388:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d538a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d538e:	f7ff bb1b 	b.w	d49c8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5392:	4628      	mov	r0, r5
   d5394:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5398 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5398:	b510      	push	{r4, lr}
   d539a:	4604      	mov	r4, r0
   d539c:	4608      	mov	r0, r1
   d539e:	4611      	mov	r1, r2
   d53a0:	2200      	movs	r2, #0
   d53a2:	6062      	str	r2, [r4, #4]
   d53a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d53a8:	60a2      	str	r2, [r4, #8]
   d53aa:	4a05      	ldr	r2, [pc, #20]	; (d53c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d53ac:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d53ae:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d53b0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d53b2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d53b4:	461a      	mov	r2, r3
   d53b6:	f7ff faff 	bl	d49b8 <HAL_USART_Init>
}
   d53ba:	4620      	mov	r0, r4
   d53bc:	bd10      	pop	{r4, pc}
   d53be:	bf00      	nop
   d53c0:	000d68b8 	.word	0x000d68b8

000d53c4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d53c4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d53c6:	4d0c      	ldr	r5, [pc, #48]	; (d53f8 <_Z22__fetch_global_Serial1v+0x34>)
   d53c8:	6829      	ldr	r1, [r5, #0]
   d53ca:	f011 0401 	ands.w	r4, r1, #1
   d53ce:	d111      	bne.n	d53f4 <_Z22__fetch_global_Serial1v+0x30>
   d53d0:	4628      	mov	r0, r5
   d53d2:	f7fe fe64 	bl	d409e <__cxa_guard_acquire>
   d53d6:	b168      	cbz	r0, d53f4 <_Z22__fetch_global_Serial1v+0x30>
   d53d8:	4a08      	ldr	r2, [pc, #32]	; (d53fc <_Z22__fetch_global_Serial1v+0x38>)
   d53da:	4b09      	ldr	r3, [pc, #36]	; (d5400 <_Z22__fetch_global_Serial1v+0x3c>)
   d53dc:	4809      	ldr	r0, [pc, #36]	; (d5404 <_Z22__fetch_global_Serial1v+0x40>)
   d53de:	4621      	mov	r1, r4
   d53e0:	f7ff ffda 	bl	d5398 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d53e4:	4628      	mov	r0, r5
   d53e6:	f7fe fe5f 	bl	d40a8 <__cxa_guard_release>
   d53ea:	4a07      	ldr	r2, [pc, #28]	; (d5408 <_Z22__fetch_global_Serial1v+0x44>)
   d53ec:	4907      	ldr	r1, [pc, #28]	; (d540c <_Z22__fetch_global_Serial1v+0x48>)
   d53ee:	4805      	ldr	r0, [pc, #20]	; (d5404 <_Z22__fetch_global_Serial1v+0x40>)
   d53f0:	f000 fa74 	bl	d58dc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d53f4:	4803      	ldr	r0, [pc, #12]	; (d5404 <_Z22__fetch_global_Serial1v+0x40>)
   d53f6:	bd38      	pop	{r3, r4, r5, pc}
   d53f8:	2003e4c4 	.word	0x2003e4c4
   d53fc:	2003e4c8 	.word	0x2003e4c8
   d5400:	2003e440 	.word	0x2003e440
   d5404:	2003e42c 	.word	0x2003e42c
   d5408:	2003e328 	.word	0x2003e328
   d540c:	000d5315 	.word	0x000d5315

000d5410 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5410:	4770      	bx	lr

000d5412 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5414:	4606      	mov	r6, r0
   d5416:	4615      	mov	r5, r2
   d5418:	460c      	mov	r4, r1
   d541a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d541c:	42bc      	cmp	r4, r7
   d541e:	d006      	beq.n	d542e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5420:	6833      	ldr	r3, [r6, #0]
   d5422:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5426:	689b      	ldr	r3, [r3, #8]
   d5428:	4630      	mov	r0, r6
   d542a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d542c:	e7f6      	b.n	d541c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d542e:	4628      	mov	r0, r5
   d5430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5432 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5432:	2200      	movs	r2, #0
   d5434:	7c00      	ldrb	r0, [r0, #16]
   d5436:	f7ff bb17 	b.w	d4a68 <HAL_I2C_Write_Data>

000d543a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d543a:	2100      	movs	r1, #0
   d543c:	7c00      	ldrb	r0, [r0, #16]
   d543e:	f7ff bb1b 	b.w	d4a78 <HAL_I2C_Available_Data>

000d5442 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5442:	2100      	movs	r1, #0
   d5444:	7c00      	ldrb	r0, [r0, #16]
   d5446:	f7ff bb1f 	b.w	d4a88 <HAL_I2C_Read_Data>

000d544a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d544a:	2100      	movs	r1, #0
   d544c:	7c00      	ldrb	r0, [r0, #16]
   d544e:	f7ff bb23 	b.w	d4a98 <HAL_I2C_Peek_Data>

000d5452 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5452:	2100      	movs	r1, #0
   d5454:	7c00      	ldrb	r0, [r0, #16]
   d5456:	f7ff bb27 	b.w	d4aa8 <HAL_I2C_Flush_Data>

000d545a <_ZN7TwoWireD0Ev>:
   d545a:	b510      	push	{r4, lr}
   d545c:	2114      	movs	r1, #20
   d545e:	4604      	mov	r4, r0
   d5460:	f000 fa4a 	bl	d58f8 <_ZdlPvj>
   d5464:	4620      	mov	r0, r4
   d5466:	bd10      	pop	{r4, pc}

000d5468 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5468:	b510      	push	{r4, lr}
   d546a:	4604      	mov	r4, r0
   d546c:	2300      	movs	r3, #0
   d546e:	6063      	str	r3, [r4, #4]
   d5470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5474:	60a3      	str	r3, [r4, #8]
   d5476:	4b04      	ldr	r3, [pc, #16]	; (d5488 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5478:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d547a:	4608      	mov	r0, r1
   d547c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d547e:	4611      	mov	r1, r2
   d5480:	f7ff fb1a 	bl	d4ab8 <HAL_I2C_Init>
}
   d5484:	4620      	mov	r0, r4
   d5486:	bd10      	pop	{r4, pc}
   d5488:	000d68e8 	.word	0x000d68e8

000d548c <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d548c:	2200      	movs	r2, #0
   d548e:	7c00      	ldrb	r0, [r0, #16]
   d5490:	f7ff baca 	b.w	d4a28 <HAL_I2C_Set_Speed>

000d5494 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5494:	2300      	movs	r3, #0
   d5496:	461a      	mov	r2, r3
   d5498:	4619      	mov	r1, r3
   d549a:	7c00      	ldrb	r0, [r0, #16]
   d549c:	f7ff bacc 	b.w	d4a38 <HAL_I2C_Begin>

000d54a0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d54a0:	b570      	push	{r4, r5, r6, lr}
   d54a2:	460c      	mov	r4, r1
   d54a4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d54a6:	2514      	movs	r5, #20
   d54a8:	4606      	mov	r6, r0
   d54aa:	462a      	mov	r2, r5
   d54ac:	2100      	movs	r1, #0
   d54ae:	a801      	add	r0, sp, #4
   d54b0:	f001 f897 	bl	d65e2 <memset>
   d54b4:	7823      	ldrb	r3, [r4, #0]
   d54b6:	f88d 3008 	strb.w	r3, [sp, #8]
   d54ba:	6863      	ldr	r3, [r4, #4]
   d54bc:	9303      	str	r3, [sp, #12]
   d54be:	68e3      	ldr	r3, [r4, #12]
   d54c0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d54c2:	2200      	movs	r2, #0
   d54c4:	7a23      	ldrb	r3, [r4, #8]
   d54c6:	7c30      	ldrb	r0, [r6, #16]
   d54c8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d54cc:	a901      	add	r1, sp, #4
   d54ce:	9305      	str	r3, [sp, #20]
   d54d0:	f7ff fafa 	bl	d4ac8 <HAL_I2C_Request_Data_Ex>
}
   d54d4:	b006      	add	sp, #24
   d54d6:	bd70      	pop	{r4, r5, r6, pc}

000d54d8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d54d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d54da:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d54dc:	f88d 1000 	strb.w	r1, [sp]
   d54e0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d54e4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d54e6:	bf18      	it	ne
   d54e8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d54ea:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d54ec:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d54ee:	f88d 3008 	strb.w	r3, [sp, #8]
   d54f2:	f7ff ffd5 	bl	d54a0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d54f6:	b005      	add	sp, #20
   d54f8:	f85d fb04 	ldr.w	pc, [sp], #4

000d54fc <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d54fc:	2301      	movs	r3, #1
   d54fe:	f7ff bfeb 	b.w	d54d8 <_ZN7TwoWire11requestFromEhjh>

000d5502 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5502:	2200      	movs	r2, #0
   d5504:	7c00      	ldrb	r0, [r0, #16]
   d5506:	f7ff ba9f 	b.w	d4a48 <HAL_I2C_Begin_Transmission>

000d550a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d550a:	b2c9      	uxtb	r1, r1
   d550c:	f7ff bff9 	b.w	d5502 <_ZN7TwoWire17beginTransmissionEh>

000d5510 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5510:	2200      	movs	r2, #0
   d5512:	7c00      	ldrb	r0, [r0, #16]
   d5514:	f7ff baa0 	b.w	d4a58 <HAL_I2C_End_Transmission>

000d5518 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5518:	2101      	movs	r1, #1
   d551a:	f7ff bff9 	b.w	d5510 <_ZN7TwoWire15endTransmissionEh>

000d551e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d551e:	2200      	movs	r2, #0
   d5520:	4611      	mov	r1, r2
   d5522:	6840      	ldr	r0, [r0, #4]
   d5524:	f7ff bb6c 	b.w	d4c00 <network_listening>

000d5528 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5528:	2200      	movs	r2, #0
   d552a:	4611      	mov	r1, r2
   d552c:	6840      	ldr	r0, [r0, #4]
   d552e:	f7ff bb77 	b.w	d4c20 <network_get_listen_timeout>

000d5532 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5532:	2200      	movs	r2, #0
   d5534:	6840      	ldr	r0, [r0, #4]
   d5536:	f7ff bb6b 	b.w	d4c10 <network_set_listen_timeout>

000d553a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d553a:	2200      	movs	r2, #0
   d553c:	f081 0101 	eor.w	r1, r1, #1
   d5540:	6840      	ldr	r0, [r0, #4]
   d5542:	f7ff bb55 	b.w	d4bf0 <network_listen>

000d5546 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5546:	2300      	movs	r3, #0
   d5548:	461a      	mov	r2, r3
   d554a:	2101      	movs	r1, #1
   d554c:	6840      	ldr	r0, [r0, #4]
   d554e:	f7ff bb47 	b.w	d4be0 <network_off>

000d5552 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5552:	2300      	movs	r3, #0
   d5554:	461a      	mov	r2, r3
   d5556:	4619      	mov	r1, r3
   d5558:	6840      	ldr	r0, [r0, #4]
   d555a:	f7ff bb39 	b.w	d4bd0 <network_on>

000d555e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d555e:	2200      	movs	r2, #0
   d5560:	4611      	mov	r1, r2
   d5562:	6840      	ldr	r0, [r0, #4]
   d5564:	f7ff bb2c 	b.w	d4bc0 <network_ready>

000d5568 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5568:	2200      	movs	r2, #0
   d556a:	4611      	mov	r1, r2
   d556c:	6840      	ldr	r0, [r0, #4]
   d556e:	f7ff bb17 	b.w	d4ba0 <network_connecting>

000d5572 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5572:	2200      	movs	r2, #0
   d5574:	2102      	movs	r1, #2
   d5576:	6840      	ldr	r0, [r0, #4]
   d5578:	f7ff bb1a 	b.w	d4bb0 <network_disconnect>

000d557c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d557c:	2300      	movs	r3, #0
   d557e:	461a      	mov	r2, r3
   d5580:	6840      	ldr	r0, [r0, #4]
   d5582:	f7ff bb05 	b.w	d4b90 <network_connect>

000d5586 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5586:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5588:	4605      	mov	r5, r0
   d558a:	b188      	cbz	r0, d55b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d558c:	6804      	ldr	r4, [r0, #0]
   d558e:	b14c      	cbz	r4, d55a4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5590:	68a3      	ldr	r3, [r4, #8]
   d5592:	b11b      	cbz	r3, d559c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5594:	2203      	movs	r2, #3
   d5596:	4621      	mov	r1, r4
   d5598:	4620      	mov	r0, r4
   d559a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d559c:	2110      	movs	r1, #16
   d559e:	4620      	mov	r0, r4
   d55a0:	f000 f9aa 	bl	d58f8 <_ZdlPvj>
   d55a4:	4628      	mov	r0, r5
   d55a6:	2114      	movs	r1, #20
      }
   d55a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55ac:	f000 b9a4 	b.w	d58f8 <_ZdlPvj>
   d55b0:	bd38      	pop	{r3, r4, r5, pc}

000d55b2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d55b2:	b110      	cbz	r0, d55ba <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d55b4:	6803      	ldr	r3, [r0, #0]
   d55b6:	685b      	ldr	r3, [r3, #4]
   d55b8:	4718      	bx	r3
   d55ba:	4770      	bx	lr

000d55bc <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d55bc:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d55be:	6803      	ldr	r3, [r0, #0]
   d55c0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d55c2:	b1bb      	cbz	r3, d55f4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d55c4:	6858      	ldr	r0, [r3, #4]
   d55c6:	f7ff f9c7 	bl	d4958 <os_thread_is_current>
   d55ca:	b978      	cbnz	r0, d55ec <_ZN6ThreadD1Ev+0x30>
   d55cc:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d55ce:	7c5a      	ldrb	r2, [r3, #17]
   d55d0:	b912      	cbnz	r2, d55d8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d55d2:	6858      	ldr	r0, [r3, #4]
   d55d4:	f7ff f9c8 	bl	d4968 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d55d8:	6823      	ldr	r3, [r4, #0]
   d55da:	6858      	ldr	r0, [r3, #4]
   d55dc:	f7ff f9cc 	bl	d4978 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55e0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d55e2:	2300      	movs	r3, #0
   d55e4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d55e6:	b128      	cbz	r0, d55f4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d55e8:	f7ff ffcd 	bl	d5586 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55ec:	6820      	ldr	r0, [r4, #0]
   d55ee:	b108      	cbz	r0, d55f4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d55f0:	f7ff ffc9 	bl	d5586 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d55f4:	4620      	mov	r0, r4
   d55f6:	bd10      	pop	{r4, pc}

000d55f8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d55f8:	b538      	push	{r3, r4, r5, lr}
   d55fa:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55fc:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5600:	b108      	cbz	r0, d5606 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5602:	f7fe fd4a 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5606:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d560a:	b108      	cbz	r0, d5610 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d560c:	f7ff f9c4 	bl	d4998 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5610:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5614:	b135      	cbz	r5, d5624 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5616:	4628      	mov	r0, r5
   d5618:	f7ff ffd0 	bl	d55bc <_ZN6ThreadD1Ev>
   d561c:	2104      	movs	r1, #4
   d561e:	4628      	mov	r0, r5
   d5620:	f000 f96a 	bl	d58f8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5624:	6820      	ldr	r0, [r4, #0]
   d5626:	b108      	cbz	r0, d562c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5628:	f7ff ffc3 	bl	d55b2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d562c:	4620      	mov	r0, r4
   d562e:	bd38      	pop	{r3, r4, r5, pc}

000d5630 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5630:	b510      	push	{r4, lr}
   d5632:	4b04      	ldr	r3, [pc, #16]	; (d5644 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5634:	4604      	mov	r4, r0
   d5636:	f840 3b08 	str.w	r3, [r0], #8
   d563a:	f7ff ffdd 	bl	d55f8 <_ZN5spark11MeshPublishD1Ev>
   d563e:	4620      	mov	r0, r4
   d5640:	bd10      	pop	{r4, pc}
   d5642:	bf00      	nop
   d5644:	000d6910 	.word	0x000d6910

000d5648 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5648:	b538      	push	{r3, r4, r5, lr}
   d564a:	4c0e      	ldr	r4, [pc, #56]	; (d5684 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d564c:	4b0e      	ldr	r3, [pc, #56]	; (d5688 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d564e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5650:	2500      	movs	r5, #0
   d5652:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5654:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5658:	6063      	str	r3, [r4, #4]
   d565a:	60a5      	str	r5, [r4, #8]
   d565c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5660:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5664:	f7ff f990 	bl	d4988 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5668:	4b08      	ldr	r3, [pc, #32]	; (d568c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d566a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d566e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5672:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5674:	4620      	mov	r0, r4
   d5676:	4a06      	ldr	r2, [pc, #24]	; (d5690 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5678:	4906      	ldr	r1, [pc, #24]	; (d5694 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d567a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d567e:	f000 b92d 	b.w	d58dc <__aeabi_atexit>
   d5682:	bf00      	nop
   d5684:	2003e54c 	.word	0x2003e54c
   d5688:	000d6978 	.word	0x000d6978
   d568c:	000d6910 	.word	0x000d6910
   d5690:	2003e328 	.word	0x2003e328
   d5694:	000d5631 	.word	0x000d5631

000d5698 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5698:	2200      	movs	r2, #0
   d569a:	4611      	mov	r1, r2
   d569c:	6840      	ldr	r0, [r0, #4]
   d569e:	f7ff ba8f 	b.w	d4bc0 <network_ready>

000d56a2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56a2:	2200      	movs	r2, #0
   d56a4:	4611      	mov	r1, r2
   d56a6:	6840      	ldr	r0, [r0, #4]
   d56a8:	f7ff baaa 	b.w	d4c00 <network_listening>

000d56ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d56ac:	2200      	movs	r2, #0
   d56ae:	4611      	mov	r1, r2
   d56b0:	6840      	ldr	r0, [r0, #4]
   d56b2:	f7ff bab5 	b.w	d4c20 <network_get_listen_timeout>

000d56b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56b6:	2200      	movs	r2, #0
   d56b8:	6840      	ldr	r0, [r0, #4]
   d56ba:	f7ff baa9 	b.w	d4c10 <network_set_listen_timeout>

000d56be <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56be:	2200      	movs	r2, #0
   d56c0:	f081 0101 	eor.w	r1, r1, #1
   d56c4:	6840      	ldr	r0, [r0, #4]
   d56c6:	f7ff ba93 	b.w	d4bf0 <network_listen>

000d56ca <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d56ca:	2300      	movs	r3, #0
   d56cc:	461a      	mov	r2, r3
   d56ce:	4619      	mov	r1, r3
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	f7ff ba85 	b.w	d4be0 <network_off>

000d56d6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d56d6:	2300      	movs	r3, #0
   d56d8:	461a      	mov	r2, r3
   d56da:	4619      	mov	r1, r3
   d56dc:	6840      	ldr	r0, [r0, #4]
   d56de:	f7ff ba77 	b.w	d4bd0 <network_on>

000d56e2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56e2:	2200      	movs	r2, #0
   d56e4:	4611      	mov	r1, r2
   d56e6:	6840      	ldr	r0, [r0, #4]
   d56e8:	f7ff ba5a 	b.w	d4ba0 <network_connecting>

000d56ec <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56ec:	2200      	movs	r2, #0
   d56ee:	2102      	movs	r1, #2
   d56f0:	6840      	ldr	r0, [r0, #4]
   d56f2:	f7ff ba5d 	b.w	d4bb0 <network_disconnect>

000d56f6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56f6:	2300      	movs	r3, #0
   d56f8:	461a      	mov	r2, r3
   d56fa:	6840      	ldr	r0, [r0, #4]
   d56fc:	f7ff ba48 	b.w	d4b90 <network_connect>

000d5700 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5700:	4b02      	ldr	r3, [pc, #8]	; (d570c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5702:	2204      	movs	r2, #4
   d5704:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5706:	4a02      	ldr	r2, [pc, #8]	; (d5710 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5708:	601a      	str	r2, [r3, #0]
   d570a:	4770      	bx	lr
   d570c:	2003e720 	.word	0x2003e720
   d5710:	000d6944 	.word	0x000d6944

000d5714 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5714:	2300      	movs	r3, #0
   d5716:	461a      	mov	r2, r3
   d5718:	6840      	ldr	r0, [r0, #4]
   d571a:	f7ff ba39 	b.w	d4b90 <network_connect>

000d571e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d571e:	2200      	movs	r2, #0
   d5720:	2102      	movs	r1, #2
   d5722:	6840      	ldr	r0, [r0, #4]
   d5724:	f7ff ba44 	b.w	d4bb0 <network_disconnect>

000d5728 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5728:	2200      	movs	r2, #0
   d572a:	4611      	mov	r1, r2
   d572c:	6840      	ldr	r0, [r0, #4]
   d572e:	f7ff ba37 	b.w	d4ba0 <network_connecting>

000d5732 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5732:	2200      	movs	r2, #0
   d5734:	4611      	mov	r1, r2
   d5736:	6840      	ldr	r0, [r0, #4]
   d5738:	f7ff ba42 	b.w	d4bc0 <network_ready>

000d573c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d573c:	2300      	movs	r3, #0
   d573e:	461a      	mov	r2, r3
   d5740:	4619      	mov	r1, r3
   d5742:	6840      	ldr	r0, [r0, #4]
   d5744:	f7ff ba44 	b.w	d4bd0 <network_on>

000d5748 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5748:	2300      	movs	r3, #0
   d574a:	461a      	mov	r2, r3
   d574c:	4619      	mov	r1, r3
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	f7ff ba46 	b.w	d4be0 <network_off>

000d5754 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5754:	2200      	movs	r2, #0
   d5756:	f081 0101 	eor.w	r1, r1, #1
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	f7ff ba48 	b.w	d4bf0 <network_listen>

000d5760 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5760:	2200      	movs	r2, #0
   d5762:	6840      	ldr	r0, [r0, #4]
   d5764:	f7ff ba54 	b.w	d4c10 <network_set_listen_timeout>

000d5768 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5768:	2200      	movs	r2, #0
   d576a:	4611      	mov	r1, r2
   d576c:	6840      	ldr	r0, [r0, #4]
   d576e:	f7ff ba57 	b.w	d4c20 <network_get_listen_timeout>

000d5772 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5772:	2200      	movs	r2, #0
   d5774:	4611      	mov	r1, r2
   d5776:	6840      	ldr	r0, [r0, #4]
   d5778:	f7ff ba42 	b.w	d4c00 <network_listening>

000d577c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d577c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5780:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5782:	b095      	sub	sp, #84	; 0x54
   d5784:	4616      	mov	r6, r2
   d5786:	460d      	mov	r5, r1
   d5788:	4607      	mov	r7, r0
    IPAddress addr;
   d578a:	f7ff fd03 	bl	d5194 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d578e:	4621      	mov	r1, r4
   d5790:	2220      	movs	r2, #32
   d5792:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5794:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5796:	f000 ff24 	bl	d65e2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d579a:	2340      	movs	r3, #64	; 0x40
   d579c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d579e:	4621      	mov	r1, r4
   d57a0:	466b      	mov	r3, sp
   d57a2:	aa0c      	add	r2, sp, #48	; 0x30
   d57a4:	4630      	mov	r0, r6
   d57a6:	f7ff f8b7 	bl	d4918 <netdb_getaddrinfo>
    if (!r) {
   d57aa:	4604      	mov	r4, r0
   d57ac:	2800      	cmp	r0, #0
   d57ae:	d144      	bne.n	d583a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57b0:	4602      	mov	r2, r0
   d57b2:	2101      	movs	r1, #1
   d57b4:	6868      	ldr	r0, [r5, #4]
   d57b6:	f7ff fa03 	bl	d4bc0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57ba:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57bc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57be:	4622      	mov	r2, r4
   d57c0:	6868      	ldr	r0, [r5, #4]
   d57c2:	f7ff f9fd 	bl	d4bc0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57c6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57c8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d57ca:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57cc:	2e00      	cmp	r6, #0
   d57ce:	d034      	beq.n	d583a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d57d0:	2900      	cmp	r1, #0
   d57d2:	d132      	bne.n	d583a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d57d4:	6873      	ldr	r3, [r6, #4]
   d57d6:	2b02      	cmp	r3, #2
   d57d8:	d002      	beq.n	d57e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d57da:	2b0a      	cmp	r3, #10
   d57dc:	d009      	beq.n	d57f2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d57de:	e02a      	b.n	d5836 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d57e0:	f1b8 0f00 	cmp.w	r8, #0
   d57e4:	d027      	beq.n	d5836 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57e6:	6971      	ldr	r1, [r6, #20]
   d57e8:	4638      	mov	r0, r7
   d57ea:	3104      	adds	r1, #4
   d57ec:	f7ff fcff 	bl	d51ee <_ZN9IPAddressaSEPKh>
   d57f0:	e020      	b.n	d5834 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d57f2:	f1b9 0f00 	cmp.w	r9, #0
   d57f6:	d01e      	beq.n	d5836 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d57f8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d57fa:	2211      	movs	r2, #17
   d57fc:	a801      	add	r0, sp, #4
   d57fe:	f000 fef0 	bl	d65e2 <memset>
                    a.v = 6;
   d5802:	2306      	movs	r3, #6
   d5804:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5808:	ad01      	add	r5, sp, #4
   d580a:	f104 0308 	add.w	r3, r4, #8
   d580e:	3418      	adds	r4, #24
   d5810:	6818      	ldr	r0, [r3, #0]
   d5812:	6859      	ldr	r1, [r3, #4]
   d5814:	462a      	mov	r2, r5
   d5816:	c203      	stmia	r2!, {r0, r1}
   d5818:	3308      	adds	r3, #8
   d581a:	42a3      	cmp	r3, r4
   d581c:	4615      	mov	r5, r2
   d581e:	d1f7      	bne.n	d5810 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5820:	a901      	add	r1, sp, #4
   d5822:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5824:	ad07      	add	r5, sp, #28
   d5826:	f7ff fcc3 	bl	d51b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d582a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d582c:	1d3c      	adds	r4, r7, #4
   d582e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5830:	682b      	ldr	r3, [r5, #0]
   d5832:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5834:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5836:	69f6      	ldr	r6, [r6, #28]
   d5838:	e7c8      	b.n	d57cc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d583a:	9800      	ldr	r0, [sp, #0]
   d583c:	f7ff f864 	bl	d4908 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5840:	4638      	mov	r0, r7
   d5842:	b015      	add	sp, #84	; 0x54
   d5844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5848 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5848:	4b02      	ldr	r3, [pc, #8]	; (d5854 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d584a:	4a03      	ldr	r2, [pc, #12]	; (d5858 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d584c:	601a      	str	r2, [r3, #0]
   d584e:	2200      	movs	r2, #0
   d5850:	605a      	str	r2, [r3, #4]
   d5852:	4770      	bx	lr
   d5854:	2003e728 	.word	0x2003e728
   d5858:	000d6978 	.word	0x000d6978

000d585c <_Z17acquireWireBufferv>:
   d585c:	b570      	push	{r4, r5, r6, lr}
   d585e:	4604      	mov	r4, r0
   d5860:	2514      	movs	r5, #20
   d5862:	462a      	mov	r2, r5
   d5864:	4e09      	ldr	r6, [pc, #36]	; (d588c <_Z17acquireWireBufferv+0x30>)
   d5866:	2100      	movs	r1, #0
   d5868:	f000 febb 	bl	d65e2 <memset>
   d586c:	8025      	strh	r5, [r4, #0]
   d586e:	2520      	movs	r5, #32
   d5870:	4631      	mov	r1, r6
   d5872:	60a5      	str	r5, [r4, #8]
   d5874:	6125      	str	r5, [r4, #16]
   d5876:	4628      	mov	r0, r5
   d5878:	f000 f840 	bl	d58fc <_ZnajRKSt9nothrow_t>
   d587c:	4631      	mov	r1, r6
   d587e:	6060      	str	r0, [r4, #4]
   d5880:	4628      	mov	r0, r5
   d5882:	f000 f83b 	bl	d58fc <_ZnajRKSt9nothrow_t>
   d5886:	60e0      	str	r0, [r4, #12]
   d5888:	4620      	mov	r0, r4
   d588a:	bd70      	pop	{r4, r5, r6, pc}
   d588c:	000d69a4 	.word	0x000d69a4

000d5890 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5890:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5892:	4d0e      	ldr	r5, [pc, #56]	; (d58cc <_Z19__fetch_global_Wirev+0x3c>)
   d5894:	6829      	ldr	r1, [r5, #0]
   d5896:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d589a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d589c:	d113      	bne.n	d58c6 <_Z19__fetch_global_Wirev+0x36>
   d589e:	4628      	mov	r0, r5
   d58a0:	f7fe fbfd 	bl	d409e <__cxa_guard_acquire>
   d58a4:	b178      	cbz	r0, d58c6 <_Z19__fetch_global_Wirev+0x36>
   d58a6:	a801      	add	r0, sp, #4
   d58a8:	f7ff ffd8 	bl	d585c <_Z17acquireWireBufferv>
   d58ac:	aa01      	add	r2, sp, #4
   d58ae:	4621      	mov	r1, r4
   d58b0:	4807      	ldr	r0, [pc, #28]	; (d58d0 <_Z19__fetch_global_Wirev+0x40>)
   d58b2:	f7ff fdd9 	bl	d5468 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d58b6:	4628      	mov	r0, r5
   d58b8:	f7fe fbf6 	bl	d40a8 <__cxa_guard_release>
   d58bc:	4a05      	ldr	r2, [pc, #20]	; (d58d4 <_Z19__fetch_global_Wirev+0x44>)
   d58be:	4906      	ldr	r1, [pc, #24]	; (d58d8 <_Z19__fetch_global_Wirev+0x48>)
   d58c0:	4803      	ldr	r0, [pc, #12]	; (d58d0 <_Z19__fetch_global_Wirev+0x40>)
   d58c2:	f000 f80b 	bl	d58dc <__aeabi_atexit>
	return wire;
}
   d58c6:	4802      	ldr	r0, [pc, #8]	; (d58d0 <_Z19__fetch_global_Wirev+0x40>)
   d58c8:	b007      	add	sp, #28
   d58ca:	bd30      	pop	{r4, r5, pc}
   d58cc:	2003e734 	.word	0x2003e734
   d58d0:	2003e738 	.word	0x2003e738
   d58d4:	2003e328 	.word	0x2003e328
   d58d8:	000d5411 	.word	0x000d5411

000d58dc <__aeabi_atexit>:
   d58dc:	460b      	mov	r3, r1
   d58de:	4601      	mov	r1, r0
   d58e0:	4618      	mov	r0, r3
   d58e2:	f000 be65 	b.w	d65b0 <__cxa_atexit>
	...

000d58e8 <_ZSt15get_new_handlerv>:
   d58e8:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <_ZSt15get_new_handlerv+0xc>)
   d58ea:	6818      	ldr	r0, [r3, #0]
   d58ec:	f3bf 8f5f 	dmb	sy
   d58f0:	4770      	bx	lr
   d58f2:	bf00      	nop
   d58f4:	2003e74c 	.word	0x2003e74c

000d58f8 <_ZdlPvj>:
   d58f8:	f7fe bbcd 	b.w	d4096 <_ZdlPv>

000d58fc <_ZnajRKSt9nothrow_t>:
   d58fc:	f000 b800 	b.w	d5900 <_ZnwjRKSt9nothrow_t>

000d5900 <_ZnwjRKSt9nothrow_t>:
   d5900:	b510      	push	{r4, lr}
   d5902:	2800      	cmp	r0, #0
   d5904:	bf14      	ite	ne
   d5906:	4604      	movne	r4, r0
   d5908:	2401      	moveq	r4, #1
   d590a:	4620      	mov	r0, r4
   d590c:	f7ff f998 	bl	d4c40 <malloc>
   d5910:	b920      	cbnz	r0, d591c <_ZnwjRKSt9nothrow_t+0x1c>
   d5912:	f7ff ffe9 	bl	d58e8 <_ZSt15get_new_handlerv>
   d5916:	b108      	cbz	r0, d591c <_ZnwjRKSt9nothrow_t+0x1c>
   d5918:	4780      	blx	r0
   d591a:	e7f6      	b.n	d590a <_ZnwjRKSt9nothrow_t+0xa>
   d591c:	bd10      	pop	{r4, pc}
	...

000d5920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5920:	4b18      	ldr	r3, [pc, #96]	; (d5984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5922:	681a      	ldr	r2, [r3, #0]
   d5924:	07d1      	lsls	r1, r2, #31
   d5926:	bf5c      	itt	pl
   d5928:	2201      	movpl	r2, #1
   d592a:	601a      	strpl	r2, [r3, #0]
   d592c:	4b16      	ldr	r3, [pc, #88]	; (d5988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d592e:	681a      	ldr	r2, [r3, #0]
   d5930:	07d2      	lsls	r2, r2, #31
   d5932:	bf5c      	itt	pl
   d5934:	2201      	movpl	r2, #1
   d5936:	601a      	strpl	r2, [r3, #0]
   d5938:	4b14      	ldr	r3, [pc, #80]	; (d598c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d593a:	681a      	ldr	r2, [r3, #0]
   d593c:	07d0      	lsls	r0, r2, #31
   d593e:	bf5c      	itt	pl
   d5940:	2201      	movpl	r2, #1
   d5942:	601a      	strpl	r2, [r3, #0]
   d5944:	4b12      	ldr	r3, [pc, #72]	; (d5990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5946:	681a      	ldr	r2, [r3, #0]
   d5948:	07d1      	lsls	r1, r2, #31
   d594a:	bf5c      	itt	pl
   d594c:	2201      	movpl	r2, #1
   d594e:	601a      	strpl	r2, [r3, #0]
   d5950:	4b10      	ldr	r3, [pc, #64]	; (d5994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5952:	681a      	ldr	r2, [r3, #0]
   d5954:	07d2      	lsls	r2, r2, #31
   d5956:	bf5c      	itt	pl
   d5958:	2201      	movpl	r2, #1
   d595a:	601a      	strpl	r2, [r3, #0]
   d595c:	4b0e      	ldr	r3, [pc, #56]	; (d5998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d595e:	681a      	ldr	r2, [r3, #0]
   d5960:	07d0      	lsls	r0, r2, #31
   d5962:	bf5c      	itt	pl
   d5964:	2201      	movpl	r2, #1
   d5966:	601a      	strpl	r2, [r3, #0]
   d5968:	4b0c      	ldr	r3, [pc, #48]	; (d599c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d596a:	681a      	ldr	r2, [r3, #0]
   d596c:	07d1      	lsls	r1, r2, #31
   d596e:	bf5c      	itt	pl
   d5970:	2201      	movpl	r2, #1
   d5972:	601a      	strpl	r2, [r3, #0]
   d5974:	4b0a      	ldr	r3, [pc, #40]	; (d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5976:	681a      	ldr	r2, [r3, #0]
   d5978:	07d2      	lsls	r2, r2, #31
   d597a:	bf5c      	itt	pl
   d597c:	2201      	movpl	r2, #1
   d597e:	601a      	strpl	r2, [r3, #0]
   d5980:	4770      	bx	lr
   d5982:	bf00      	nop
   d5984:	2003e76c 	.word	0x2003e76c
   d5988:	2003e768 	.word	0x2003e768
   d598c:	2003e764 	.word	0x2003e764
   d5990:	2003e760 	.word	0x2003e760
   d5994:	2003e75c 	.word	0x2003e75c
   d5998:	2003e758 	.word	0x2003e758
   d599c:	2003e754 	.word	0x2003e754
   d59a0:	2003e750 	.word	0x2003e750

000d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d59a4:	4b24      	ldr	r3, [pc, #144]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d59a6:	681a      	ldr	r2, [r3, #0]
   d59a8:	07d0      	lsls	r0, r2, #31
   d59aa:	bf5c      	itt	pl
   d59ac:	2201      	movpl	r2, #1
   d59ae:	601a      	strpl	r2, [r3, #0]
   d59b0:	4b22      	ldr	r3, [pc, #136]	; (d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d59b2:	681a      	ldr	r2, [r3, #0]
   d59b4:	07d1      	lsls	r1, r2, #31
   d59b6:	bf5c      	itt	pl
   d59b8:	2201      	movpl	r2, #1
   d59ba:	601a      	strpl	r2, [r3, #0]
   d59bc:	4b20      	ldr	r3, [pc, #128]	; (d5a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d59be:	681a      	ldr	r2, [r3, #0]
   d59c0:	07d2      	lsls	r2, r2, #31
   d59c2:	bf5c      	itt	pl
   d59c4:	2201      	movpl	r2, #1
   d59c6:	601a      	strpl	r2, [r3, #0]
   d59c8:	4b1e      	ldr	r3, [pc, #120]	; (d5a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d59ca:	681a      	ldr	r2, [r3, #0]
   d59cc:	07d0      	lsls	r0, r2, #31
   d59ce:	bf5c      	itt	pl
   d59d0:	2201      	movpl	r2, #1
   d59d2:	601a      	strpl	r2, [r3, #0]
   d59d4:	4b1c      	ldr	r3, [pc, #112]	; (d5a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d59d6:	681a      	ldr	r2, [r3, #0]
   d59d8:	07d1      	lsls	r1, r2, #31
   d59da:	bf5c      	itt	pl
   d59dc:	2201      	movpl	r2, #1
   d59de:	601a      	strpl	r2, [r3, #0]
   d59e0:	4b1a      	ldr	r3, [pc, #104]	; (d5a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d59e2:	681a      	ldr	r2, [r3, #0]
   d59e4:	07d2      	lsls	r2, r2, #31
   d59e6:	bf5c      	itt	pl
   d59e8:	2201      	movpl	r2, #1
   d59ea:	601a      	strpl	r2, [r3, #0]
   d59ec:	4b18      	ldr	r3, [pc, #96]	; (d5a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d59ee:	681a      	ldr	r2, [r3, #0]
   d59f0:	07d0      	lsls	r0, r2, #31
   d59f2:	bf5c      	itt	pl
   d59f4:	2201      	movpl	r2, #1
   d59f6:	601a      	strpl	r2, [r3, #0]
   d59f8:	4b16      	ldr	r3, [pc, #88]	; (d5a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59fa:	681a      	ldr	r2, [r3, #0]
   d59fc:	07d1      	lsls	r1, r2, #31
   d59fe:	bf5c      	itt	pl
   d5a00:	2201      	movpl	r2, #1
   d5a02:	601a      	strpl	r2, [r3, #0]
   d5a04:	4b14      	ldr	r3, [pc, #80]	; (d5a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5a06:	681a      	ldr	r2, [r3, #0]
   d5a08:	07d2      	lsls	r2, r2, #31
   d5a0a:	bf5c      	itt	pl
   d5a0c:	2201      	movpl	r2, #1
   d5a0e:	601a      	strpl	r2, [r3, #0]
   d5a10:	4b12      	ldr	r3, [pc, #72]	; (d5a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5a12:	681a      	ldr	r2, [r3, #0]
   d5a14:	07d0      	lsls	r0, r2, #31
   d5a16:	bf5c      	itt	pl
   d5a18:	2201      	movpl	r2, #1
   d5a1a:	601a      	strpl	r2, [r3, #0]
   d5a1c:	4b10      	ldr	r3, [pc, #64]	; (d5a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5a1e:	681a      	ldr	r2, [r3, #0]
   d5a20:	07d1      	lsls	r1, r2, #31
   d5a22:	bf5c      	itt	pl
   d5a24:	2201      	movpl	r2, #1
   d5a26:	601a      	strpl	r2, [r3, #0]
   d5a28:	4b0e      	ldr	r3, [pc, #56]	; (d5a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5a2a:	681a      	ldr	r2, [r3, #0]
   d5a2c:	07d2      	lsls	r2, r2, #31
   d5a2e:	bf5c      	itt	pl
   d5a30:	2201      	movpl	r2, #1
   d5a32:	601a      	strpl	r2, [r3, #0]
   d5a34:	4770      	bx	lr
   d5a36:	bf00      	nop
   d5a38:	2003e79c 	.word	0x2003e79c
   d5a3c:	2003e798 	.word	0x2003e798
   d5a40:	2003e794 	.word	0x2003e794
   d5a44:	2003e790 	.word	0x2003e790
   d5a48:	2003e78c 	.word	0x2003e78c
   d5a4c:	2003e788 	.word	0x2003e788
   d5a50:	2003e784 	.word	0x2003e784
   d5a54:	2003e780 	.word	0x2003e780
   d5a58:	2003e77c 	.word	0x2003e77c
   d5a5c:	2003e778 	.word	0x2003e778
   d5a60:	2003e774 	.word	0x2003e774
   d5a64:	2003e770 	.word	0x2003e770

000d5a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5a68:	4b24      	ldr	r3, [pc, #144]	; (d5afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d0      	lsls	r0, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b22      	ldr	r3, [pc, #136]	; (d5b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d1      	lsls	r1, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b20      	ldr	r3, [pc, #128]	; (d5b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d2      	lsls	r2, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b1e      	ldr	r3, [pc, #120]	; (d5b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d0      	lsls	r0, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b1c      	ldr	r3, [pc, #112]	; (d5b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d1      	lsls	r1, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4b1a      	ldr	r3, [pc, #104]	; (d5b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d2      	lsls	r2, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4b18      	ldr	r3, [pc, #96]	; (d5b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5ab2:	681a      	ldr	r2, [r3, #0]
   d5ab4:	07d0      	lsls	r0, r2, #31
   d5ab6:	bf5c      	itt	pl
   d5ab8:	2201      	movpl	r2, #1
   d5aba:	601a      	strpl	r2, [r3, #0]
   d5abc:	4b16      	ldr	r3, [pc, #88]	; (d5b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5abe:	681a      	ldr	r2, [r3, #0]
   d5ac0:	07d1      	lsls	r1, r2, #31
   d5ac2:	bf5c      	itt	pl
   d5ac4:	2201      	movpl	r2, #1
   d5ac6:	601a      	strpl	r2, [r3, #0]
   d5ac8:	4b14      	ldr	r3, [pc, #80]	; (d5b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5aca:	681a      	ldr	r2, [r3, #0]
   d5acc:	07d2      	lsls	r2, r2, #31
   d5ace:	bf5c      	itt	pl
   d5ad0:	2201      	movpl	r2, #1
   d5ad2:	601a      	strpl	r2, [r3, #0]
   d5ad4:	4b12      	ldr	r3, [pc, #72]	; (d5b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d0      	lsls	r0, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4b10      	ldr	r3, [pc, #64]	; (d5b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5ae2:	681a      	ldr	r2, [r3, #0]
   d5ae4:	07d1      	lsls	r1, r2, #31
   d5ae6:	bf5c      	itt	pl
   d5ae8:	2201      	movpl	r2, #1
   d5aea:	601a      	strpl	r2, [r3, #0]
   d5aec:	4b0e      	ldr	r3, [pc, #56]	; (d5b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5aee:	681a      	ldr	r2, [r3, #0]
   d5af0:	07d2      	lsls	r2, r2, #31
   d5af2:	bf5c      	itt	pl
   d5af4:	2201      	movpl	r2, #1
   d5af6:	601a      	strpl	r2, [r3, #0]
   d5af8:	4770      	bx	lr
   d5afa:	bf00      	nop
   d5afc:	2003e7cc 	.word	0x2003e7cc
   d5b00:	2003e7c8 	.word	0x2003e7c8
   d5b04:	2003e7c4 	.word	0x2003e7c4
   d5b08:	2003e7c0 	.word	0x2003e7c0
   d5b0c:	2003e7bc 	.word	0x2003e7bc
   d5b10:	2003e7b8 	.word	0x2003e7b8
   d5b14:	2003e7b4 	.word	0x2003e7b4
   d5b18:	2003e7b0 	.word	0x2003e7b0
   d5b1c:	2003e7ac 	.word	0x2003e7ac
   d5b20:	2003e7a8 	.word	0x2003e7a8
   d5b24:	2003e7a4 	.word	0x2003e7a4
   d5b28:	2003e7a0 	.word	0x2003e7a0

000d5b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b2c:	4b18      	ldr	r3, [pc, #96]	; (d5b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d1      	lsls	r1, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b16      	ldr	r3, [pc, #88]	; (d5b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d2      	lsls	r2, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b14      	ldr	r3, [pc, #80]	; (d5b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d0      	lsls	r0, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b12      	ldr	r3, [pc, #72]	; (d5b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d1      	lsls	r1, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b10      	ldr	r3, [pc, #64]	; (d5ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d2      	lsls	r2, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4b0e      	ldr	r3, [pc, #56]	; (d5ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b6a:	681a      	ldr	r2, [r3, #0]
   d5b6c:	07d0      	lsls	r0, r2, #31
   d5b6e:	bf5c      	itt	pl
   d5b70:	2201      	movpl	r2, #1
   d5b72:	601a      	strpl	r2, [r3, #0]
   d5b74:	4b0c      	ldr	r3, [pc, #48]	; (d5ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b76:	681a      	ldr	r2, [r3, #0]
   d5b78:	07d1      	lsls	r1, r2, #31
   d5b7a:	bf5c      	itt	pl
   d5b7c:	2201      	movpl	r2, #1
   d5b7e:	601a      	strpl	r2, [r3, #0]
   d5b80:	4b0a      	ldr	r3, [pc, #40]	; (d5bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b82:	681a      	ldr	r2, [r3, #0]
   d5b84:	07d2      	lsls	r2, r2, #31
   d5b86:	bf5c      	itt	pl
   d5b88:	2201      	movpl	r2, #1
   d5b8a:	601a      	strpl	r2, [r3, #0]
   d5b8c:	4770      	bx	lr
   d5b8e:	bf00      	nop
   d5b90:	2003e7ec 	.word	0x2003e7ec
   d5b94:	2003e7e8 	.word	0x2003e7e8
   d5b98:	2003e7e4 	.word	0x2003e7e4
   d5b9c:	2003e7e0 	.word	0x2003e7e0
   d5ba0:	2003e7dc 	.word	0x2003e7dc
   d5ba4:	2003e7d8 	.word	0x2003e7d8
   d5ba8:	2003e7d4 	.word	0x2003e7d4
   d5bac:	2003e7d0 	.word	0x2003e7d0

000d5bb0 <__aeabi_drsub>:
   d5bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5bb4:	e002      	b.n	d5bbc <__adddf3>
   d5bb6:	bf00      	nop

000d5bb8 <__aeabi_dsub>:
   d5bb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5bbc <__adddf3>:
   d5bbc:	b530      	push	{r4, r5, lr}
   d5bbe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5bc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5bc6:	ea94 0f05 	teq	r4, r5
   d5bca:	bf08      	it	eq
   d5bcc:	ea90 0f02 	teqeq	r0, r2
   d5bd0:	bf1f      	itttt	ne
   d5bd2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5bd6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5bda:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5bde:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5be2:	f000 80e2 	beq.w	d5daa <__adddf3+0x1ee>
   d5be6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5bea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5bee:	bfb8      	it	lt
   d5bf0:	426d      	neglt	r5, r5
   d5bf2:	dd0c      	ble.n	d5c0e <__adddf3+0x52>
   d5bf4:	442c      	add	r4, r5
   d5bf6:	ea80 0202 	eor.w	r2, r0, r2
   d5bfa:	ea81 0303 	eor.w	r3, r1, r3
   d5bfe:	ea82 0000 	eor.w	r0, r2, r0
   d5c02:	ea83 0101 	eor.w	r1, r3, r1
   d5c06:	ea80 0202 	eor.w	r2, r0, r2
   d5c0a:	ea81 0303 	eor.w	r3, r1, r3
   d5c0e:	2d36      	cmp	r5, #54	; 0x36
   d5c10:	bf88      	it	hi
   d5c12:	bd30      	pophi	{r4, r5, pc}
   d5c14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5c18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5c1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5c20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5c24:	d002      	beq.n	d5c2c <__adddf3+0x70>
   d5c26:	4240      	negs	r0, r0
   d5c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5c2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5c30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5c34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5c38:	d002      	beq.n	d5c40 <__adddf3+0x84>
   d5c3a:	4252      	negs	r2, r2
   d5c3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5c40:	ea94 0f05 	teq	r4, r5
   d5c44:	f000 80a7 	beq.w	d5d96 <__adddf3+0x1da>
   d5c48:	f1a4 0401 	sub.w	r4, r4, #1
   d5c4c:	f1d5 0e20 	rsbs	lr, r5, #32
   d5c50:	db0d      	blt.n	d5c6e <__adddf3+0xb2>
   d5c52:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5c56:	fa22 f205 	lsr.w	r2, r2, r5
   d5c5a:	1880      	adds	r0, r0, r2
   d5c5c:	f141 0100 	adc.w	r1, r1, #0
   d5c60:	fa03 f20e 	lsl.w	r2, r3, lr
   d5c64:	1880      	adds	r0, r0, r2
   d5c66:	fa43 f305 	asr.w	r3, r3, r5
   d5c6a:	4159      	adcs	r1, r3
   d5c6c:	e00e      	b.n	d5c8c <__adddf3+0xd0>
   d5c6e:	f1a5 0520 	sub.w	r5, r5, #32
   d5c72:	f10e 0e20 	add.w	lr, lr, #32
   d5c76:	2a01      	cmp	r2, #1
   d5c78:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5c7c:	bf28      	it	cs
   d5c7e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5c82:	fa43 f305 	asr.w	r3, r3, r5
   d5c86:	18c0      	adds	r0, r0, r3
   d5c88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5c8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5c90:	d507      	bpl.n	d5ca2 <__adddf3+0xe6>
   d5c92:	f04f 0e00 	mov.w	lr, #0
   d5c96:	f1dc 0c00 	rsbs	ip, ip, #0
   d5c9a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5c9e:	eb6e 0101 	sbc.w	r1, lr, r1
   d5ca2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5ca6:	d31b      	bcc.n	d5ce0 <__adddf3+0x124>
   d5ca8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5cac:	d30c      	bcc.n	d5cc8 <__adddf3+0x10c>
   d5cae:	0849      	lsrs	r1, r1, #1
   d5cb0:	ea5f 0030 	movs.w	r0, r0, rrx
   d5cb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5cb8:	f104 0401 	add.w	r4, r4, #1
   d5cbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5cc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5cc4:	f080 809a 	bcs.w	d5dfc <__adddf3+0x240>
   d5cc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5ccc:	bf08      	it	eq
   d5cce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5cd2:	f150 0000 	adcs.w	r0, r0, #0
   d5cd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5cda:	ea41 0105 	orr.w	r1, r1, r5
   d5cde:	bd30      	pop	{r4, r5, pc}
   d5ce0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5ce4:	4140      	adcs	r0, r0
   d5ce6:	eb41 0101 	adc.w	r1, r1, r1
   d5cea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5cee:	f1a4 0401 	sub.w	r4, r4, #1
   d5cf2:	d1e9      	bne.n	d5cc8 <__adddf3+0x10c>
   d5cf4:	f091 0f00 	teq	r1, #0
   d5cf8:	bf04      	itt	eq
   d5cfa:	4601      	moveq	r1, r0
   d5cfc:	2000      	moveq	r0, #0
   d5cfe:	fab1 f381 	clz	r3, r1
   d5d02:	bf08      	it	eq
   d5d04:	3320      	addeq	r3, #32
   d5d06:	f1a3 030b 	sub.w	r3, r3, #11
   d5d0a:	f1b3 0220 	subs.w	r2, r3, #32
   d5d0e:	da0c      	bge.n	d5d2a <__adddf3+0x16e>
   d5d10:	320c      	adds	r2, #12
   d5d12:	dd08      	ble.n	d5d26 <__adddf3+0x16a>
   d5d14:	f102 0c14 	add.w	ip, r2, #20
   d5d18:	f1c2 020c 	rsb	r2, r2, #12
   d5d1c:	fa01 f00c 	lsl.w	r0, r1, ip
   d5d20:	fa21 f102 	lsr.w	r1, r1, r2
   d5d24:	e00c      	b.n	d5d40 <__adddf3+0x184>
   d5d26:	f102 0214 	add.w	r2, r2, #20
   d5d2a:	bfd8      	it	le
   d5d2c:	f1c2 0c20 	rsble	ip, r2, #32
   d5d30:	fa01 f102 	lsl.w	r1, r1, r2
   d5d34:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5d38:	bfdc      	itt	le
   d5d3a:	ea41 010c 	orrle.w	r1, r1, ip
   d5d3e:	4090      	lslle	r0, r2
   d5d40:	1ae4      	subs	r4, r4, r3
   d5d42:	bfa2      	ittt	ge
   d5d44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5d48:	4329      	orrge	r1, r5
   d5d4a:	bd30      	popge	{r4, r5, pc}
   d5d4c:	ea6f 0404 	mvn.w	r4, r4
   d5d50:	3c1f      	subs	r4, #31
   d5d52:	da1c      	bge.n	d5d8e <__adddf3+0x1d2>
   d5d54:	340c      	adds	r4, #12
   d5d56:	dc0e      	bgt.n	d5d76 <__adddf3+0x1ba>
   d5d58:	f104 0414 	add.w	r4, r4, #20
   d5d5c:	f1c4 0220 	rsb	r2, r4, #32
   d5d60:	fa20 f004 	lsr.w	r0, r0, r4
   d5d64:	fa01 f302 	lsl.w	r3, r1, r2
   d5d68:	ea40 0003 	orr.w	r0, r0, r3
   d5d6c:	fa21 f304 	lsr.w	r3, r1, r4
   d5d70:	ea45 0103 	orr.w	r1, r5, r3
   d5d74:	bd30      	pop	{r4, r5, pc}
   d5d76:	f1c4 040c 	rsb	r4, r4, #12
   d5d7a:	f1c4 0220 	rsb	r2, r4, #32
   d5d7e:	fa20 f002 	lsr.w	r0, r0, r2
   d5d82:	fa01 f304 	lsl.w	r3, r1, r4
   d5d86:	ea40 0003 	orr.w	r0, r0, r3
   d5d8a:	4629      	mov	r1, r5
   d5d8c:	bd30      	pop	{r4, r5, pc}
   d5d8e:	fa21 f004 	lsr.w	r0, r1, r4
   d5d92:	4629      	mov	r1, r5
   d5d94:	bd30      	pop	{r4, r5, pc}
   d5d96:	f094 0f00 	teq	r4, #0
   d5d9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5d9e:	bf06      	itte	eq
   d5da0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5da4:	3401      	addeq	r4, #1
   d5da6:	3d01      	subne	r5, #1
   d5da8:	e74e      	b.n	d5c48 <__adddf3+0x8c>
   d5daa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5dae:	bf18      	it	ne
   d5db0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5db4:	d029      	beq.n	d5e0a <__adddf3+0x24e>
   d5db6:	ea94 0f05 	teq	r4, r5
   d5dba:	bf08      	it	eq
   d5dbc:	ea90 0f02 	teqeq	r0, r2
   d5dc0:	d005      	beq.n	d5dce <__adddf3+0x212>
   d5dc2:	ea54 0c00 	orrs.w	ip, r4, r0
   d5dc6:	bf04      	itt	eq
   d5dc8:	4619      	moveq	r1, r3
   d5dca:	4610      	moveq	r0, r2
   d5dcc:	bd30      	pop	{r4, r5, pc}
   d5dce:	ea91 0f03 	teq	r1, r3
   d5dd2:	bf1e      	ittt	ne
   d5dd4:	2100      	movne	r1, #0
   d5dd6:	2000      	movne	r0, #0
   d5dd8:	bd30      	popne	{r4, r5, pc}
   d5dda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5dde:	d105      	bne.n	d5dec <__adddf3+0x230>
   d5de0:	0040      	lsls	r0, r0, #1
   d5de2:	4149      	adcs	r1, r1
   d5de4:	bf28      	it	cs
   d5de6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5dea:	bd30      	pop	{r4, r5, pc}
   d5dec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5df0:	bf3c      	itt	cc
   d5df2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5df6:	bd30      	popcc	{r4, r5, pc}
   d5df8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5dfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5e00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5e04:	f04f 0000 	mov.w	r0, #0
   d5e08:	bd30      	pop	{r4, r5, pc}
   d5e0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e0e:	bf1a      	itte	ne
   d5e10:	4619      	movne	r1, r3
   d5e12:	4610      	movne	r0, r2
   d5e14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5e18:	bf1c      	itt	ne
   d5e1a:	460b      	movne	r3, r1
   d5e1c:	4602      	movne	r2, r0
   d5e1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5e22:	bf06      	itte	eq
   d5e24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5e28:	ea91 0f03 	teqeq	r1, r3
   d5e2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5e30:	bd30      	pop	{r4, r5, pc}
   d5e32:	bf00      	nop

000d5e34 <__aeabi_ui2d>:
   d5e34:	f090 0f00 	teq	r0, #0
   d5e38:	bf04      	itt	eq
   d5e3a:	2100      	moveq	r1, #0
   d5e3c:	4770      	bxeq	lr
   d5e3e:	b530      	push	{r4, r5, lr}
   d5e40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e48:	f04f 0500 	mov.w	r5, #0
   d5e4c:	f04f 0100 	mov.w	r1, #0
   d5e50:	e750      	b.n	d5cf4 <__adddf3+0x138>
   d5e52:	bf00      	nop

000d5e54 <__aeabi_i2d>:
   d5e54:	f090 0f00 	teq	r0, #0
   d5e58:	bf04      	itt	eq
   d5e5a:	2100      	moveq	r1, #0
   d5e5c:	4770      	bxeq	lr
   d5e5e:	b530      	push	{r4, r5, lr}
   d5e60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5e6c:	bf48      	it	mi
   d5e6e:	4240      	negmi	r0, r0
   d5e70:	f04f 0100 	mov.w	r1, #0
   d5e74:	e73e      	b.n	d5cf4 <__adddf3+0x138>
   d5e76:	bf00      	nop

000d5e78 <__aeabi_f2d>:
   d5e78:	0042      	lsls	r2, r0, #1
   d5e7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5e7e:	ea4f 0131 	mov.w	r1, r1, rrx
   d5e82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5e86:	bf1f      	itttt	ne
   d5e88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5e8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5e90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5e94:	4770      	bxne	lr
   d5e96:	f092 0f00 	teq	r2, #0
   d5e9a:	bf14      	ite	ne
   d5e9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5ea0:	4770      	bxeq	lr
   d5ea2:	b530      	push	{r4, r5, lr}
   d5ea4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5ea8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5eac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5eb0:	e720      	b.n	d5cf4 <__adddf3+0x138>
   d5eb2:	bf00      	nop

000d5eb4 <__aeabi_ul2d>:
   d5eb4:	ea50 0201 	orrs.w	r2, r0, r1
   d5eb8:	bf08      	it	eq
   d5eba:	4770      	bxeq	lr
   d5ebc:	b530      	push	{r4, r5, lr}
   d5ebe:	f04f 0500 	mov.w	r5, #0
   d5ec2:	e00a      	b.n	d5eda <__aeabi_l2d+0x16>

000d5ec4 <__aeabi_l2d>:
   d5ec4:	ea50 0201 	orrs.w	r2, r0, r1
   d5ec8:	bf08      	it	eq
   d5eca:	4770      	bxeq	lr
   d5ecc:	b530      	push	{r4, r5, lr}
   d5ece:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5ed2:	d502      	bpl.n	d5eda <__aeabi_l2d+0x16>
   d5ed4:	4240      	negs	r0, r0
   d5ed6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5eda:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ede:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ee2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5ee6:	f43f aedc 	beq.w	d5ca2 <__adddf3+0xe6>
   d5eea:	f04f 0203 	mov.w	r2, #3
   d5eee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ef2:	bf18      	it	ne
   d5ef4:	3203      	addne	r2, #3
   d5ef6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5efa:	bf18      	it	ne
   d5efc:	3203      	addne	r2, #3
   d5efe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5f02:	f1c2 0320 	rsb	r3, r2, #32
   d5f06:	fa00 fc03 	lsl.w	ip, r0, r3
   d5f0a:	fa20 f002 	lsr.w	r0, r0, r2
   d5f0e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5f12:	ea40 000e 	orr.w	r0, r0, lr
   d5f16:	fa21 f102 	lsr.w	r1, r1, r2
   d5f1a:	4414      	add	r4, r2
   d5f1c:	e6c1      	b.n	d5ca2 <__adddf3+0xe6>
   d5f1e:	bf00      	nop

000d5f20 <__aeabi_dmul>:
   d5f20:	b570      	push	{r4, r5, r6, lr}
   d5f22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5f26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5f2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5f2e:	bf1d      	ittte	ne
   d5f30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5f34:	ea94 0f0c 	teqne	r4, ip
   d5f38:	ea95 0f0c 	teqne	r5, ip
   d5f3c:	f000 f8de 	bleq	d60fc <__aeabi_dmul+0x1dc>
   d5f40:	442c      	add	r4, r5
   d5f42:	ea81 0603 	eor.w	r6, r1, r3
   d5f46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5f4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5f4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5f52:	bf18      	it	ne
   d5f54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5f58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5f60:	d038      	beq.n	d5fd4 <__aeabi_dmul+0xb4>
   d5f62:	fba0 ce02 	umull	ip, lr, r0, r2
   d5f66:	f04f 0500 	mov.w	r5, #0
   d5f6a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5f6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5f72:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5f76:	f04f 0600 	mov.w	r6, #0
   d5f7a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5f7e:	f09c 0f00 	teq	ip, #0
   d5f82:	bf18      	it	ne
   d5f84:	f04e 0e01 	orrne.w	lr, lr, #1
   d5f88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5f8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5f90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5f94:	d204      	bcs.n	d5fa0 <__aeabi_dmul+0x80>
   d5f96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5f9a:	416d      	adcs	r5, r5
   d5f9c:	eb46 0606 	adc.w	r6, r6, r6
   d5fa0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5fa4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5fa8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5fac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5fb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5fb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5fb8:	bf88      	it	hi
   d5fba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5fbe:	d81e      	bhi.n	d5ffe <__aeabi_dmul+0xde>
   d5fc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5fc4:	bf08      	it	eq
   d5fc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5fca:	f150 0000 	adcs.w	r0, r0, #0
   d5fce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fd2:	bd70      	pop	{r4, r5, r6, pc}
   d5fd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5fd8:	ea46 0101 	orr.w	r1, r6, r1
   d5fdc:	ea40 0002 	orr.w	r0, r0, r2
   d5fe0:	ea81 0103 	eor.w	r1, r1, r3
   d5fe4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5fe8:	bfc2      	ittt	gt
   d5fea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5fee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5ff2:	bd70      	popgt	{r4, r5, r6, pc}
   d5ff4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ff8:	f04f 0e00 	mov.w	lr, #0
   d5ffc:	3c01      	subs	r4, #1
   d5ffe:	f300 80ab 	bgt.w	d6158 <__aeabi_dmul+0x238>
   d6002:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6006:	bfde      	ittt	le
   d6008:	2000      	movle	r0, #0
   d600a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d600e:	bd70      	pople	{r4, r5, r6, pc}
   d6010:	f1c4 0400 	rsb	r4, r4, #0
   d6014:	3c20      	subs	r4, #32
   d6016:	da35      	bge.n	d6084 <__aeabi_dmul+0x164>
   d6018:	340c      	adds	r4, #12
   d601a:	dc1b      	bgt.n	d6054 <__aeabi_dmul+0x134>
   d601c:	f104 0414 	add.w	r4, r4, #20
   d6020:	f1c4 0520 	rsb	r5, r4, #32
   d6024:	fa00 f305 	lsl.w	r3, r0, r5
   d6028:	fa20 f004 	lsr.w	r0, r0, r4
   d602c:	fa01 f205 	lsl.w	r2, r1, r5
   d6030:	ea40 0002 	orr.w	r0, r0, r2
   d6034:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d603c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6040:	fa21 f604 	lsr.w	r6, r1, r4
   d6044:	eb42 0106 	adc.w	r1, r2, r6
   d6048:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d604c:	bf08      	it	eq
   d604e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6052:	bd70      	pop	{r4, r5, r6, pc}
   d6054:	f1c4 040c 	rsb	r4, r4, #12
   d6058:	f1c4 0520 	rsb	r5, r4, #32
   d605c:	fa00 f304 	lsl.w	r3, r0, r4
   d6060:	fa20 f005 	lsr.w	r0, r0, r5
   d6064:	fa01 f204 	lsl.w	r2, r1, r4
   d6068:	ea40 0002 	orr.w	r0, r0, r2
   d606c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6070:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6074:	f141 0100 	adc.w	r1, r1, #0
   d6078:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d607c:	bf08      	it	eq
   d607e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6082:	bd70      	pop	{r4, r5, r6, pc}
   d6084:	f1c4 0520 	rsb	r5, r4, #32
   d6088:	fa00 f205 	lsl.w	r2, r0, r5
   d608c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6090:	fa20 f304 	lsr.w	r3, r0, r4
   d6094:	fa01 f205 	lsl.w	r2, r1, r5
   d6098:	ea43 0302 	orr.w	r3, r3, r2
   d609c:	fa21 f004 	lsr.w	r0, r1, r4
   d60a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60a4:	fa21 f204 	lsr.w	r2, r1, r4
   d60a8:	ea20 0002 	bic.w	r0, r0, r2
   d60ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d60b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d60b4:	bf08      	it	eq
   d60b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d60ba:	bd70      	pop	{r4, r5, r6, pc}
   d60bc:	f094 0f00 	teq	r4, #0
   d60c0:	d10f      	bne.n	d60e2 <__aeabi_dmul+0x1c2>
   d60c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d60c6:	0040      	lsls	r0, r0, #1
   d60c8:	eb41 0101 	adc.w	r1, r1, r1
   d60cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d60d0:	bf08      	it	eq
   d60d2:	3c01      	subeq	r4, #1
   d60d4:	d0f7      	beq.n	d60c6 <__aeabi_dmul+0x1a6>
   d60d6:	ea41 0106 	orr.w	r1, r1, r6
   d60da:	f095 0f00 	teq	r5, #0
   d60de:	bf18      	it	ne
   d60e0:	4770      	bxne	lr
   d60e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d60e6:	0052      	lsls	r2, r2, #1
   d60e8:	eb43 0303 	adc.w	r3, r3, r3
   d60ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d60f0:	bf08      	it	eq
   d60f2:	3d01      	subeq	r5, #1
   d60f4:	d0f7      	beq.n	d60e6 <__aeabi_dmul+0x1c6>
   d60f6:	ea43 0306 	orr.w	r3, r3, r6
   d60fa:	4770      	bx	lr
   d60fc:	ea94 0f0c 	teq	r4, ip
   d6100:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6104:	bf18      	it	ne
   d6106:	ea95 0f0c 	teqne	r5, ip
   d610a:	d00c      	beq.n	d6126 <__aeabi_dmul+0x206>
   d610c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6110:	bf18      	it	ne
   d6112:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6116:	d1d1      	bne.n	d60bc <__aeabi_dmul+0x19c>
   d6118:	ea81 0103 	eor.w	r1, r1, r3
   d611c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6120:	f04f 0000 	mov.w	r0, #0
   d6124:	bd70      	pop	{r4, r5, r6, pc}
   d6126:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d612a:	bf06      	itte	eq
   d612c:	4610      	moveq	r0, r2
   d612e:	4619      	moveq	r1, r3
   d6130:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6134:	d019      	beq.n	d616a <__aeabi_dmul+0x24a>
   d6136:	ea94 0f0c 	teq	r4, ip
   d613a:	d102      	bne.n	d6142 <__aeabi_dmul+0x222>
   d613c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6140:	d113      	bne.n	d616a <__aeabi_dmul+0x24a>
   d6142:	ea95 0f0c 	teq	r5, ip
   d6146:	d105      	bne.n	d6154 <__aeabi_dmul+0x234>
   d6148:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d614c:	bf1c      	itt	ne
   d614e:	4610      	movne	r0, r2
   d6150:	4619      	movne	r1, r3
   d6152:	d10a      	bne.n	d616a <__aeabi_dmul+0x24a>
   d6154:	ea81 0103 	eor.w	r1, r1, r3
   d6158:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d615c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6160:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6164:	f04f 0000 	mov.w	r0, #0
   d6168:	bd70      	pop	{r4, r5, r6, pc}
   d616a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d616e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6172:	bd70      	pop	{r4, r5, r6, pc}

000d6174 <__aeabi_ddiv>:
   d6174:	b570      	push	{r4, r5, r6, lr}
   d6176:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d617a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d617e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6182:	bf1d      	ittte	ne
   d6184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6188:	ea94 0f0c 	teqne	r4, ip
   d618c:	ea95 0f0c 	teqne	r5, ip
   d6190:	f000 f8a7 	bleq	d62e2 <__aeabi_ddiv+0x16e>
   d6194:	eba4 0405 	sub.w	r4, r4, r5
   d6198:	ea81 0e03 	eor.w	lr, r1, r3
   d619c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d61a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d61a4:	f000 8088 	beq.w	d62b8 <__aeabi_ddiv+0x144>
   d61a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d61ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d61b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d61b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d61b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d61bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d61c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d61c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d61c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d61cc:	429d      	cmp	r5, r3
   d61ce:	bf08      	it	eq
   d61d0:	4296      	cmpeq	r6, r2
   d61d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d61d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d61da:	d202      	bcs.n	d61e2 <__aeabi_ddiv+0x6e>
   d61dc:	085b      	lsrs	r3, r3, #1
   d61de:	ea4f 0232 	mov.w	r2, r2, rrx
   d61e2:	1ab6      	subs	r6, r6, r2
   d61e4:	eb65 0503 	sbc.w	r5, r5, r3
   d61e8:	085b      	lsrs	r3, r3, #1
   d61ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d61ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d61f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d61f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d61fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61fe:	bf22      	ittt	cs
   d6200:	1ab6      	subcs	r6, r6, r2
   d6202:	4675      	movcs	r5, lr
   d6204:	ea40 000c 	orrcs.w	r0, r0, ip
   d6208:	085b      	lsrs	r3, r3, #1
   d620a:	ea4f 0232 	mov.w	r2, r2, rrx
   d620e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6212:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6216:	bf22      	ittt	cs
   d6218:	1ab6      	subcs	r6, r6, r2
   d621a:	4675      	movcs	r5, lr
   d621c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6220:	085b      	lsrs	r3, r3, #1
   d6222:	ea4f 0232 	mov.w	r2, r2, rrx
   d6226:	ebb6 0e02 	subs.w	lr, r6, r2
   d622a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d622e:	bf22      	ittt	cs
   d6230:	1ab6      	subcs	r6, r6, r2
   d6232:	4675      	movcs	r5, lr
   d6234:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6238:	085b      	lsrs	r3, r3, #1
   d623a:	ea4f 0232 	mov.w	r2, r2, rrx
   d623e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6242:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6246:	bf22      	ittt	cs
   d6248:	1ab6      	subcs	r6, r6, r2
   d624a:	4675      	movcs	r5, lr
   d624c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6250:	ea55 0e06 	orrs.w	lr, r5, r6
   d6254:	d018      	beq.n	d6288 <__aeabi_ddiv+0x114>
   d6256:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d625a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d625e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6262:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6266:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d626a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d626e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6272:	d1c0      	bne.n	d61f6 <__aeabi_ddiv+0x82>
   d6274:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6278:	d10b      	bne.n	d6292 <__aeabi_ddiv+0x11e>
   d627a:	ea41 0100 	orr.w	r1, r1, r0
   d627e:	f04f 0000 	mov.w	r0, #0
   d6282:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6286:	e7b6      	b.n	d61f6 <__aeabi_ddiv+0x82>
   d6288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d628c:	bf04      	itt	eq
   d628e:	4301      	orreq	r1, r0
   d6290:	2000      	moveq	r0, #0
   d6292:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6296:	bf88      	it	hi
   d6298:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d629c:	f63f aeaf 	bhi.w	d5ffe <__aeabi_dmul+0xde>
   d62a0:	ebb5 0c03 	subs.w	ip, r5, r3
   d62a4:	bf04      	itt	eq
   d62a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d62aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d62ae:	f150 0000 	adcs.w	r0, r0, #0
   d62b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d62b6:	bd70      	pop	{r4, r5, r6, pc}
   d62b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d62bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d62c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d62c4:	bfc2      	ittt	gt
   d62c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d62ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d62ce:	bd70      	popgt	{r4, r5, r6, pc}
   d62d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62d4:	f04f 0e00 	mov.w	lr, #0
   d62d8:	3c01      	subs	r4, #1
   d62da:	e690      	b.n	d5ffe <__aeabi_dmul+0xde>
   d62dc:	ea45 0e06 	orr.w	lr, r5, r6
   d62e0:	e68d      	b.n	d5ffe <__aeabi_dmul+0xde>
   d62e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d62e6:	ea94 0f0c 	teq	r4, ip
   d62ea:	bf08      	it	eq
   d62ec:	ea95 0f0c 	teqeq	r5, ip
   d62f0:	f43f af3b 	beq.w	d616a <__aeabi_dmul+0x24a>
   d62f4:	ea94 0f0c 	teq	r4, ip
   d62f8:	d10a      	bne.n	d6310 <__aeabi_ddiv+0x19c>
   d62fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d62fe:	f47f af34 	bne.w	d616a <__aeabi_dmul+0x24a>
   d6302:	ea95 0f0c 	teq	r5, ip
   d6306:	f47f af25 	bne.w	d6154 <__aeabi_dmul+0x234>
   d630a:	4610      	mov	r0, r2
   d630c:	4619      	mov	r1, r3
   d630e:	e72c      	b.n	d616a <__aeabi_dmul+0x24a>
   d6310:	ea95 0f0c 	teq	r5, ip
   d6314:	d106      	bne.n	d6324 <__aeabi_ddiv+0x1b0>
   d6316:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d631a:	f43f aefd 	beq.w	d6118 <__aeabi_dmul+0x1f8>
   d631e:	4610      	mov	r0, r2
   d6320:	4619      	mov	r1, r3
   d6322:	e722      	b.n	d616a <__aeabi_dmul+0x24a>
   d6324:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6328:	bf18      	it	ne
   d632a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d632e:	f47f aec5 	bne.w	d60bc <__aeabi_dmul+0x19c>
   d6332:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6336:	f47f af0d 	bne.w	d6154 <__aeabi_dmul+0x234>
   d633a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d633e:	f47f aeeb 	bne.w	d6118 <__aeabi_dmul+0x1f8>
   d6342:	e712      	b.n	d616a <__aeabi_dmul+0x24a>

000d6344 <__gedf2>:
   d6344:	f04f 3cff 	mov.w	ip, #4294967295
   d6348:	e006      	b.n	d6358 <__cmpdf2+0x4>
   d634a:	bf00      	nop

000d634c <__ledf2>:
   d634c:	f04f 0c01 	mov.w	ip, #1
   d6350:	e002      	b.n	d6358 <__cmpdf2+0x4>
   d6352:	bf00      	nop

000d6354 <__cmpdf2>:
   d6354:	f04f 0c01 	mov.w	ip, #1
   d6358:	f84d cd04 	str.w	ip, [sp, #-4]!
   d635c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6364:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6368:	bf18      	it	ne
   d636a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d636e:	d01b      	beq.n	d63a8 <__cmpdf2+0x54>
   d6370:	b001      	add	sp, #4
   d6372:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6376:	bf0c      	ite	eq
   d6378:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d637c:	ea91 0f03 	teqne	r1, r3
   d6380:	bf02      	ittt	eq
   d6382:	ea90 0f02 	teqeq	r0, r2
   d6386:	2000      	moveq	r0, #0
   d6388:	4770      	bxeq	lr
   d638a:	f110 0f00 	cmn.w	r0, #0
   d638e:	ea91 0f03 	teq	r1, r3
   d6392:	bf58      	it	pl
   d6394:	4299      	cmppl	r1, r3
   d6396:	bf08      	it	eq
   d6398:	4290      	cmpeq	r0, r2
   d639a:	bf2c      	ite	cs
   d639c:	17d8      	asrcs	r0, r3, #31
   d639e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d63a2:	f040 0001 	orr.w	r0, r0, #1
   d63a6:	4770      	bx	lr
   d63a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d63ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d63b0:	d102      	bne.n	d63b8 <__cmpdf2+0x64>
   d63b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d63b6:	d107      	bne.n	d63c8 <__cmpdf2+0x74>
   d63b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d63bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d63c0:	d1d6      	bne.n	d6370 <__cmpdf2+0x1c>
   d63c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d63c6:	d0d3      	beq.n	d6370 <__cmpdf2+0x1c>
   d63c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d63cc:	4770      	bx	lr
   d63ce:	bf00      	nop

000d63d0 <__aeabi_cdrcmple>:
   d63d0:	4684      	mov	ip, r0
   d63d2:	4610      	mov	r0, r2
   d63d4:	4662      	mov	r2, ip
   d63d6:	468c      	mov	ip, r1
   d63d8:	4619      	mov	r1, r3
   d63da:	4663      	mov	r3, ip
   d63dc:	e000      	b.n	d63e0 <__aeabi_cdcmpeq>
   d63de:	bf00      	nop

000d63e0 <__aeabi_cdcmpeq>:
   d63e0:	b501      	push	{r0, lr}
   d63e2:	f7ff ffb7 	bl	d6354 <__cmpdf2>
   d63e6:	2800      	cmp	r0, #0
   d63e8:	bf48      	it	mi
   d63ea:	f110 0f00 	cmnmi.w	r0, #0
   d63ee:	bd01      	pop	{r0, pc}

000d63f0 <__aeabi_dcmpeq>:
   d63f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63f4:	f7ff fff4 	bl	d63e0 <__aeabi_cdcmpeq>
   d63f8:	bf0c      	ite	eq
   d63fa:	2001      	moveq	r0, #1
   d63fc:	2000      	movne	r0, #0
   d63fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d6402:	bf00      	nop

000d6404 <__aeabi_dcmplt>:
   d6404:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6408:	f7ff ffea 	bl	d63e0 <__aeabi_cdcmpeq>
   d640c:	bf34      	ite	cc
   d640e:	2001      	movcc	r0, #1
   d6410:	2000      	movcs	r0, #0
   d6412:	f85d fb08 	ldr.w	pc, [sp], #8
   d6416:	bf00      	nop

000d6418 <__aeabi_dcmple>:
   d6418:	f84d ed08 	str.w	lr, [sp, #-8]!
   d641c:	f7ff ffe0 	bl	d63e0 <__aeabi_cdcmpeq>
   d6420:	bf94      	ite	ls
   d6422:	2001      	movls	r0, #1
   d6424:	2000      	movhi	r0, #0
   d6426:	f85d fb08 	ldr.w	pc, [sp], #8
   d642a:	bf00      	nop

000d642c <__aeabi_dcmpge>:
   d642c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6430:	f7ff ffce 	bl	d63d0 <__aeabi_cdrcmple>
   d6434:	bf94      	ite	ls
   d6436:	2001      	movls	r0, #1
   d6438:	2000      	movhi	r0, #0
   d643a:	f85d fb08 	ldr.w	pc, [sp], #8
   d643e:	bf00      	nop

000d6440 <__aeabi_dcmpgt>:
   d6440:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6444:	f7ff ffc4 	bl	d63d0 <__aeabi_cdrcmple>
   d6448:	bf34      	ite	cc
   d644a:	2001      	movcc	r0, #1
   d644c:	2000      	movcs	r0, #0
   d644e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6452:	bf00      	nop

000d6454 <__aeabi_dcmpun>:
   d6454:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6458:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d645c:	d102      	bne.n	d6464 <__aeabi_dcmpun+0x10>
   d645e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6462:	d10a      	bne.n	d647a <__aeabi_dcmpun+0x26>
   d6464:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6468:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d646c:	d102      	bne.n	d6474 <__aeabi_dcmpun+0x20>
   d646e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6472:	d102      	bne.n	d647a <__aeabi_dcmpun+0x26>
   d6474:	f04f 0000 	mov.w	r0, #0
   d6478:	4770      	bx	lr
   d647a:	f04f 0001 	mov.w	r0, #1
   d647e:	4770      	bx	lr

000d6480 <__aeabi_d2iz>:
   d6480:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6484:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6488:	d215      	bcs.n	d64b6 <__aeabi_d2iz+0x36>
   d648a:	d511      	bpl.n	d64b0 <__aeabi_d2iz+0x30>
   d648c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6490:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6494:	d912      	bls.n	d64bc <__aeabi_d2iz+0x3c>
   d6496:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d649a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d649e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d64a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d64a6:	fa23 f002 	lsr.w	r0, r3, r2
   d64aa:	bf18      	it	ne
   d64ac:	4240      	negne	r0, r0
   d64ae:	4770      	bx	lr
   d64b0:	f04f 0000 	mov.w	r0, #0
   d64b4:	4770      	bx	lr
   d64b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d64ba:	d105      	bne.n	d64c8 <__aeabi_d2iz+0x48>
   d64bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d64c0:	bf08      	it	eq
   d64c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d64c6:	4770      	bx	lr
   d64c8:	f04f 0000 	mov.w	r0, #0
   d64cc:	4770      	bx	lr
   d64ce:	bf00      	nop

000d64d0 <__aeabi_d2uiz>:
   d64d0:	004a      	lsls	r2, r1, #1
   d64d2:	d211      	bcs.n	d64f8 <__aeabi_d2uiz+0x28>
   d64d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d64d8:	d211      	bcs.n	d64fe <__aeabi_d2uiz+0x2e>
   d64da:	d50d      	bpl.n	d64f8 <__aeabi_d2uiz+0x28>
   d64dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d64e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d64e4:	d40e      	bmi.n	d6504 <__aeabi_d2uiz+0x34>
   d64e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d64ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d64ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d64f2:	fa23 f002 	lsr.w	r0, r3, r2
   d64f6:	4770      	bx	lr
   d64f8:	f04f 0000 	mov.w	r0, #0
   d64fc:	4770      	bx	lr
   d64fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6502:	d102      	bne.n	d650a <__aeabi_d2uiz+0x3a>
   d6504:	f04f 30ff 	mov.w	r0, #4294967295
   d6508:	4770      	bx	lr
   d650a:	f04f 0000 	mov.w	r0, #0
   d650e:	4770      	bx	lr

000d6510 <__aeabi_d2f>:
   d6510:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6514:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6518:	bf24      	itt	cs
   d651a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d651e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6522:	d90d      	bls.n	d6540 <__aeabi_d2f+0x30>
   d6524:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6528:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d652c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6530:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6534:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6538:	bf08      	it	eq
   d653a:	f020 0001 	biceq.w	r0, r0, #1
   d653e:	4770      	bx	lr
   d6540:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6544:	d121      	bne.n	d658a <__aeabi_d2f+0x7a>
   d6546:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d654a:	bfbc      	itt	lt
   d654c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6550:	4770      	bxlt	lr
   d6552:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6556:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d655a:	f1c2 0218 	rsb	r2, r2, #24
   d655e:	f1c2 0c20 	rsb	ip, r2, #32
   d6562:	fa10 f30c 	lsls.w	r3, r0, ip
   d6566:	fa20 f002 	lsr.w	r0, r0, r2
   d656a:	bf18      	it	ne
   d656c:	f040 0001 	orrne.w	r0, r0, #1
   d6570:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6574:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6578:	fa03 fc0c 	lsl.w	ip, r3, ip
   d657c:	ea40 000c 	orr.w	r0, r0, ip
   d6580:	fa23 f302 	lsr.w	r3, r3, r2
   d6584:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6588:	e7cc      	b.n	d6524 <__aeabi_d2f+0x14>
   d658a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d658e:	d107      	bne.n	d65a0 <__aeabi_d2f+0x90>
   d6590:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6594:	bf1e      	ittt	ne
   d6596:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d659a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d659e:	4770      	bxne	lr
   d65a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d65a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d65a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d65ac:	4770      	bx	lr
   d65ae:	bf00      	nop

000d65b0 <__cxa_atexit>:
   d65b0:	b510      	push	{r4, lr}
   d65b2:	4c05      	ldr	r4, [pc, #20]	; (d65c8 <__cxa_atexit+0x18>)
   d65b4:	4613      	mov	r3, r2
   d65b6:	b12c      	cbz	r4, d65c4 <__cxa_atexit+0x14>
   d65b8:	460a      	mov	r2, r1
   d65ba:	4601      	mov	r1, r0
   d65bc:	2002      	movs	r0, #2
   d65be:	f3af 8000 	nop.w
   d65c2:	bd10      	pop	{r4, pc}
   d65c4:	4620      	mov	r0, r4
   d65c6:	bd10      	pop	{r4, pc}
   d65c8:	00000000 	.word	0x00000000

000d65cc <memcpy>:
   d65cc:	b510      	push	{r4, lr}
   d65ce:	1e43      	subs	r3, r0, #1
   d65d0:	440a      	add	r2, r1
   d65d2:	4291      	cmp	r1, r2
   d65d4:	d004      	beq.n	d65e0 <memcpy+0x14>
   d65d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d65da:	f803 4f01 	strb.w	r4, [r3, #1]!
   d65de:	e7f8      	b.n	d65d2 <memcpy+0x6>
   d65e0:	bd10      	pop	{r4, pc}

000d65e2 <memset>:
   d65e2:	4402      	add	r2, r0
   d65e4:	4603      	mov	r3, r0
   d65e6:	4293      	cmp	r3, r2
   d65e8:	d002      	beq.n	d65f0 <memset+0xe>
   d65ea:	f803 1b01 	strb.w	r1, [r3], #1
   d65ee:	e7fa      	b.n	d65e6 <memset+0x4>
   d65f0:	4770      	bx	lr
	...

000d65f4 <srand>:
   d65f4:	b538      	push	{r3, r4, r5, lr}
   d65f6:	4b12      	ldr	r3, [pc, #72]	; (d6640 <srand+0x4c>)
   d65f8:	681c      	ldr	r4, [r3, #0]
   d65fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d65fc:	4605      	mov	r5, r0
   d65fe:	b9d3      	cbnz	r3, d6636 <srand+0x42>
   d6600:	2018      	movs	r0, #24
   d6602:	f7fe fb1d 	bl	d4c40 <malloc>
   d6606:	f243 330e 	movw	r3, #13070	; 0x330e
   d660a:	63a0      	str	r0, [r4, #56]	; 0x38
   d660c:	8003      	strh	r3, [r0, #0]
   d660e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6612:	8043      	strh	r3, [r0, #2]
   d6614:	f241 2334 	movw	r3, #4660	; 0x1234
   d6618:	8083      	strh	r3, [r0, #4]
   d661a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d661e:	80c3      	strh	r3, [r0, #6]
   d6620:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6624:	8103      	strh	r3, [r0, #8]
   d6626:	2305      	movs	r3, #5
   d6628:	8143      	strh	r3, [r0, #10]
   d662a:	230b      	movs	r3, #11
   d662c:	8183      	strh	r3, [r0, #12]
   d662e:	2201      	movs	r2, #1
   d6630:	2300      	movs	r3, #0
   d6632:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6636:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6638:	2200      	movs	r2, #0
   d663a:	611d      	str	r5, [r3, #16]
   d663c:	615a      	str	r2, [r3, #20]
   d663e:	bd38      	pop	{r3, r4, r5, pc}
   d6640:	2003e324 	.word	0x2003e324

000d6644 <strlen>:
   d6644:	4603      	mov	r3, r0
   d6646:	f813 2b01 	ldrb.w	r2, [r3], #1
   d664a:	2a00      	cmp	r2, #0
   d664c:	d1fb      	bne.n	d6646 <strlen+0x2>
   d664e:	1a18      	subs	r0, r3, r0
   d6650:	3801      	subs	r0, #1
   d6652:	4770      	bx	lr

000d6654 <dynalib_user>:
   d6654:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6664:	0000 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
   d6674:	2e2e 002e 414d 3358 3130 3530 7720 7361     ....MAX30105 was
   d6684:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
   d6694:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
   d66a4:	6f70 6577 2e72 0020 6c50 6361 2065 6f79     power. .Place yo
   d66b4:	7275 6920 646e 7865 6620 6e69 6567 2072     ur index finger 
   d66c4:	6e6f 7420 6568 7320 6e65 6f73 2072 6977     on the sensor wi
   d66d4:	6874 7320 6574 6461 2079 7270 7365 7573     th steady pressu
   d66e4:	6572 002e 5249 003d 202c 5042 3d4d 2c00     re..IR=., BPM=.,
   d66f4:	4120 6776 4220 4d50 003d 4e20 206f 6966      Avg BPM=. No fi
   d6704:	676e 7265 003f                              nger?.

000d670a <_ZL9FIRCoeffs>:
   d670a:	00ac 0141 0243 039f 0550 0742 0956 0b64     ..A.C...P.B.V.d.
   d671a:	0d3f 0eb8 0fac 1000 0000                    ?.........

000d6724 <_ZTVN5spark13EthernetClassE>:
	...
   d672c:	4cbf 000d 4cb5 000d 4cab 000d 4ca1 000d     .L...L...L...L..
   d673c:	4c95 000d 4c89 000d 4c7d 000d 4c75 000d     .L...L..}L..uL..
   d674c:	4c6b 000d 4c61 000d 577d 000d 616e 006e     kL..aL..}W..nan.
   d675c:	766f 0066 6e69 0066 6162 6475 5300 7265     ovf.inf.baud.Ser
   d676c:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d677c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d678c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d679c:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d67ac:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d67bc:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d67cc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d67dc:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d67ec:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d67fc:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d680c:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d681c:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d682c:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d683c:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d684c:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d685c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d686c <_ZTV9IPAddress>:
	...
   d6874:	5131 000d 5121 000d 5123 000d               1Q..!Q..#Q..

000d6880 <_ZTV9USBSerial>:
	...
   d6888:	5209 000d 5259 000d 5267 000d 4d49 000d     .R..YR..gR..IM..
   d6898:	5245 000d 520b 000d 5221 000d 5253 000d     ER...R..!R..SR..
   d68a8:	5237 000d 5205 000d                         7R...R..

000d68b0 <_ZTV11USARTSerial>:
	...
   d68b8:	5315 000d 5365 000d 5373 000d 4d49 000d     .S..eS..sS..IM..
   d68c8:	5329 000d 534b 000d 5337 000d 535f 000d     )S..KS..7S.._S..
   d68d8:	5317 000d 531b 000d                         .S...S..

000d68e0 <_ZTV7TwoWire>:
	...
   d68e8:	5411 000d 545b 000d 5433 000d 5413 000d     .T..[T..3T...T..
   d68f8:	543b 000d 5443 000d 544b 000d 5453 000d     ;T..CT..KT..ST..

000d6908 <_ZTVN5spark9MeshClassE>:
	...
   d6910:	557d 000d 5573 000d 5569 000d 555f 000d     }U..sU..iU.._U..
   d6920:	5553 000d 5547 000d 553b 000d 5533 000d     SU..GU..;U..3U..
   d6930:	5529 000d 551f 000d 577d 000d               )U...U..}W..

000d693c <_ZTVN5spark9WiFiClassE>:
	...
   d6944:	56f7 000d 56ed 000d 56e3 000d 5699 000d     .V...V...V...V..
   d6954:	56d7 000d 56cb 000d 56bf 000d 56b7 000d     .V...V...V...V..
   d6964:	56ad 000d 56a3 000d 577d 000d               .V...V..}W..

000d6970 <_ZTVN5spark12NetworkClassE>:
	...
   d6978:	5715 000d 571f 000d 5729 000d 5733 000d     .W...W..)W..3W..
   d6988:	573d 000d 5749 000d 5755 000d 5761 000d     =W..IW..UW..aW..
   d6998:	5769 000d 5773 000d 577d 000d               iW..sW..}W..

000d69a4 <_ZSt7nothrow>:
   d69a4:	0000 0000                                   ....

000d69a8 <__sf_fake_stdin>:
	...

000d69c8 <__sf_fake_stdout>:
	...

000d69e8 <__sf_fake_stderr>:
	...
   d6a08:	0043                                        C.

000d6a0a <link_const_variable_data_end>:
	...

000d6a0c <link_constructors_location>:
   d6a0c:	000d42a1 	.word	0x000d42a1
   d6a10:	000d4435 	.word	0x000d4435
   d6a14:	000d48ff 	.word	0x000d48ff
   d6a18:	000d4903 	.word	0x000d4903
   d6a1c:	000d4cc9 	.word	0x000d4cc9
   d6a20:	000d4cdd 	.word	0x000d4cdd
   d6a24:	000d4d21 	.word	0x000d4d21
   d6a28:	000d4fad 	.word	0x000d4fad
   d6a2c:	000d4fbd 	.word	0x000d4fbd
   d6a30:	000d4ff5 	.word	0x000d4ff5
   d6a34:	000d5649 	.word	0x000d5649
   d6a38:	000d5701 	.word	0x000d5701
   d6a3c:	000d5849 	.word	0x000d5849
   d6a40:	000d5921 	.word	0x000d5921
   d6a44:	000d59a5 	.word	0x000d59a5
   d6a48:	000d5a69 	.word	0x000d5a69
   d6a4c:	000d5b2d 	.word	0x000d5b2d
