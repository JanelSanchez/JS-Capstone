
c:/Users/Janel/Documents/IoT/JS-Capstone/HR02_Test3/target/1.5.2/argon/HR02_Test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002284  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d62a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003de68  000d62a4  0001de68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000920  2003ded0  2003ded0  0002ded0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d630c  000d630c  0002630c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6334  000d6334  00026334  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c8f72  00000000  00000000  00026338  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f937  00000000  00000000  000ef2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a389  00000000  00000000  000febe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002160  00000000  00000000  00118f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003f18  00000000  00000000  0011b0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034eb5  00000000  00000000  0011efe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000272ea  00000000  00000000  00153e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00102d3c  00000000  00000000  0017b181  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c0f4  00000000  00000000  0027dec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fec7 	bl	d5dc0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fecc 	bl	d5dd6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de68 	.word	0x2003de68
   d4048:	000d62a4 	.word	0x000d62a4
   d404c:	2003ded0 	.word	0x2003ded0
   d4050:	2003ded0 	.word	0x2003ded0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f92f 	bl	d52bc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d629c 	.word	0x000d629c
   d4080:	000d6258 	.word	0x000d6258

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81c 	b.w	d40c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f845 	bl	d4118 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b8d5 	b.w	d5240 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bfa1 	b.w	d4fdc <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bf9f 	b.w	d4fdc <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 ff91 	bl	d4fdc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <setup>:
int8_t validSPO2; //indicator to show if the SPO2 calculation is valid
int32_t heartRate; //heart rate value
int8_t validHeartRate; //indicator to show if the heart rate calculation is valid

void setup()
{
   d40c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600); // initialize serial communication at 9600 bits per second:
   d40c2:	f001 f9fb 	bl	d54bc <_Z16_fetch_usbserialv>
   d40c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ca:	f001 f9eb 	bl	d54a4 <_ZN9USBSerial5beginEl>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
   d40ce:	f001 fcd9 	bl	d5a84 <_Z19__fetch_global_Wirev>
   d40d2:	2357      	movs	r3, #87	; 0x57
   d40d4:	4601      	mov	r1, r0
   d40d6:	4a0d      	ldr	r2, [pc, #52]	; (d410c <setup+0x4c>)
   d40d8:	480d      	ldr	r0, [pc, #52]	; (d4110 <setup+0x50>)
   d40da:	f000 fa7b 	bl	d45d4 <_ZN8MAX301055beginER7TwoWiremh>
   d40de:	b928      	cbnz	r0, d40ec <setup+0x2c>
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
   d40e0:	f001 f9ec 	bl	d54bc <_Z16_fetch_usbserialv>
   d40e4:	490b      	ldr	r1, [pc, #44]	; (d4114 <setup+0x54>)
   d40e6:	f001 f838 	bl	d515a <_ZN5Print7printlnEPK19__FlashStringHelper>
   d40ea:	e7fe      	b.n	d40ea <setup+0x2a>
    while (1);
  }

  particleSensor.setup(55, 4, 2, 200, 411, 4096); //Configure sensor with these settings
   d40ec:	21c8      	movs	r1, #200	; 0xc8
   d40ee:	f240 129b 	movw	r2, #411	; 0x19b
   d40f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d40f6:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d40fa:	4805      	ldr	r0, [pc, #20]	; (d4110 <setup+0x50>)
   d40fc:	2302      	movs	r3, #2
   d40fe:	2204      	movs	r2, #4
   d4100:	2137      	movs	r1, #55	; 0x37
   d4102:	f000 fb26 	bl	d4752 <_ZN8MAX301055setupEhhhiii>
}
   d4106:	b005      	add	sp, #20
   d4108:	f85d fb04 	ldr.w	pc, [sp], #4
   d410c:	00061a80 	.word	0x00061a80
   d4110:	2003e078 	.word	0x2003e078
   d4114:	000d5e5c 	.word	0x000d5e5c

000d4118 <loop>:

void loop()
{
   d4118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (byte i = 0 ; i < 50 ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();
   d411c:	4d7e      	ldr	r5, [pc, #504]	; (d4318 <loop+0x200>)

  particleSensor.setup(55, 4, 2, 200, 411, 4096); //Configure sensor with these settings
}

void loop()
{
   d411e:	b087      	sub	sp, #28
   d4120:	2700      	movs	r7, #0

  //read the first 50 samples, and determine the signal range
  for (byte i = 0 ; i < 50 ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
   d4122:	487e      	ldr	r0, [pc, #504]	; (d431c <loop+0x204>)
   d4124:	f000 f93b 	bl	d439e <_ZN8MAX301059availableEv>
   d4128:	b918      	cbnz	r0, d4132 <loop+0x1a>
      particleSensor.check(); //Check the sensor for new data
   d412a:	487c      	ldr	r0, [pc, #496]	; (d431c <loop+0x204>)
   d412c:	f000 f979 	bl	d4422 <_ZN8MAX301055checkEv>
{

  //read the first 50 samples, and determine the signal range
  for (byte i = 0 ; i < 50 ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
   d4130:	e7f7      	b.n	d4122 <loop+0xa>
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();
   d4132:	487a      	ldr	r0, [pc, #488]	; (d431c <loop+0x204>)
    irBuffer[i] = particleSensor.getIR();
   d4134:	4c7a      	ldr	r4, [pc, #488]	; (d4320 <loop+0x208>)
   d4136:	f8df 91e0 	ldr.w	r9, [pc, #480]	; d4318 <loop+0x200>
  for (byte i = 0 ; i < 50 ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();
   d413a:	f000 fa27 	bl	d458c <_ZN8MAX301056getRedEv>
   d413e:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
    irBuffer[i] = particleSensor.getIR();
   d4142:	4876      	ldr	r0, [pc, #472]	; (d431c <loop+0x204>)
   d4144:	f000 fa2e 	bl	d45a4 <_ZN8MAX301055getIREv>
   d4148:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
   d414c:	4873      	ldr	r0, [pc, #460]	; (d431c <loop+0x204>)
   d414e:	f000 f933 	bl	d43b8 <_ZN8MAX3010510nextSampleEv>
    Serial.print(F("red="));
   d4152:	f001 f9b3 	bl	d54bc <_Z16_fetch_usbserialv>
   d4156:	4973      	ldr	r1, [pc, #460]	; (d4324 <loop+0x20c>)
   d4158:	f000 ffe5 	bl	d5126 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(redBuffer[i], DEC);
   d415c:	f001 f9ae 	bl	d54bc <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4160:	220a      	movs	r2, #10
   d4162:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
   d4166:	f000 fffa 	bl	d515e <_ZN5Print11printNumberEmh>
    Serial.print(F(", ir="));
   d416a:	f001 f9a7 	bl	d54bc <_Z16_fetch_usbserialv>
   d416e:	496e      	ldr	r1, [pc, #440]	; (d4328 <loop+0x210>)
   d4170:	f000 ffd9 	bl	d5126 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(irBuffer[i], DEC);
   d4174:	f001 f9a2 	bl	d54bc <_Z16_fetch_usbserialv>
   d4178:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
   d417c:	4606      	mov	r6, r0
   d417e:	220a      	movs	r2, #10
   d4180:	f000 ffed 	bl	d515e <_ZN5Print11printNumberEmh>
   d4184:	3701      	adds	r7, #1
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4186:	4630      	mov	r0, r6
   d4188:	f000 ffd1 	bl	d512e <_ZN5Print7printlnEv>

void loop()
{

  //read the first 50 samples, and determine the signal range
  for (byte i = 0 ; i < 50 ; i++)
   d418c:	2f32      	cmp	r7, #50	; 0x32
   d418e:	d1c8      	bne.n	d4122 <loop+0xa>
    Serial.print(F(", ir="));
    Serial.println(irBuffer[i], DEC);
  }

  //calculate heart rate and SpO2 after first 50 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, 50, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d4190:	f8df 81b8 	ldr.w	r8, [pc, #440]	; d434c <loop+0x234>
   d4194:	4e65      	ldr	r6, [pc, #404]	; (d432c <loop+0x214>)
   d4196:	4d66      	ldr	r5, [pc, #408]	; (d4330 <loop+0x218>)
   d4198:	9602      	str	r6, [sp, #8]
   d419a:	9501      	str	r5, [sp, #4]
   d419c:	f8cd 8000 	str.w	r8, [sp]
   d41a0:	4b64      	ldr	r3, [pc, #400]	; (d4334 <loop+0x21c>)
   d41a2:	464a      	mov	r2, r9
   d41a4:	4639      	mov	r1, r7
   d41a6:	4620      	mov	r0, r4
   d41a8:	f000 fc44 	bl	d4a34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
   d41ac:	f8cd 8010 	str.w	r8, [sp, #16]

  particleSensor.setup(55, 4, 2, 200, 411, 4096); //Configure sensor with these settings
}

void loop()
{
   d41b0:	2300      	movs	r3, #0
  while (1)
  {
    //dumping the first 25 sets of samples in the memory and shift the last 25 sets of samples to the top
    for (byte i = 25; i < 50; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
   d41b2:	eb09 0203 	add.w	r2, r9, r3
   d41b6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   d41b8:	f849 2003 	str.w	r2, [r9, r3]
      irBuffer[i - 25] = irBuffer[i];
   d41bc:	18e2      	adds	r2, r4, r3
   d41be:	6e52      	ldr	r2, [r2, #100]	; 0x64
   d41c0:	50e2      	str	r2, [r4, r3]
   d41c2:	3304      	adds	r3, #4

  //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
  while (1)
  {
    //dumping the first 25 sets of samples in the memory and shift the last 25 sets of samples to the top
    for (byte i = 25; i < 50; i++)
   d41c4:	2b64      	cmp	r3, #100	; 0x64
   d41c6:	d1f4      	bne.n	d41b2 <loop+0x9a>
   d41c8:	f8df 8184 	ldr.w	r8, [pc, #388]	; d4350 <loop+0x238>
   d41cc:	4f5a      	ldr	r7, [pc, #360]	; (d4338 <loop+0x220>)
   d41ce:	f04f 0a00 	mov.w	sl, #0
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 25; i < 50; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
   d41d2:	4852      	ldr	r0, [pc, #328]	; (d431c <loop+0x204>)
   d41d4:	f000 f8e3 	bl	d439e <_ZN8MAX301059availableEv>
   d41d8:	b918      	cbnz	r0, d41e2 <loop+0xca>
        particleSensor.check(); //Check the sensor for new data
   d41da:	4850      	ldr	r0, [pc, #320]	; (d431c <loop+0x204>)
   d41dc:	f000 f921 	bl	d4422 <_ZN8MAX301055checkEv>
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 25; i < 50; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
   d41e0:	e7f7      	b.n	d41d2 <loop+0xba>
        particleSensor.check(); //Check the sensor for new data

      redBuffer[i] = particleSensor.getRed();
   d41e2:	484e      	ldr	r0, [pc, #312]	; (d431c <loop+0x204>)
   d41e4:	f000 f9d2 	bl	d458c <_ZN8MAX301056getRedEv>
   d41e8:	f8c8 0000 	str.w	r0, [r8]
      irBuffer[i] = particleSensor.getIR();
   d41ec:	484b      	ldr	r0, [pc, #300]	; (d431c <loop+0x204>)
   d41ee:	f000 f9d9 	bl	d45a4 <_ZN8MAX301055getIREv>
   d41f2:	6038      	str	r0, [r7, #0]
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
   d41f4:	4849      	ldr	r0, [pc, #292]	; (d431c <loop+0x204>)
   d41f6:	f000 f8df 	bl	d43b8 <_ZN8MAX3010510nextSampleEv>
     
      Serial.print(F("red="));
   d41fa:	f001 f95f 	bl	d54bc <_Z16_fetch_usbserialv>
   d41fe:	4949      	ldr	r1, [pc, #292]	; (d4324 <loop+0x20c>)
   d4200:	f000 ff91 	bl	d5126 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(redBuffer[i], DEC);
   d4204:	f001 f95a 	bl	d54bc <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4208:	220a      	movs	r2, #10
   d420a:	f8d8 1000 	ldr.w	r1, [r8]
   d420e:	f000 ffa6 	bl	d515e <_ZN5Print11printNumberEmh>

      Serial.print(F(", ir="));
   d4212:	f001 f953 	bl	d54bc <_Z16_fetch_usbserialv>
   d4216:	4944      	ldr	r1, [pc, #272]	; (d4328 <loop+0x210>)
   d4218:	f000 ff85 	bl	d5126 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(irBuffer[i], DEC);
   d421c:	f001 f94e 	bl	d54bc <_Z16_fetch_usbserialv>
   d4220:	220a      	movs	r2, #10
   d4222:	6839      	ldr	r1, [r7, #0]
   d4224:	f000 ff9b 	bl	d515e <_ZN5Print11printNumberEmh>

      Serial.print(F(", HR="));
   d4228:	f001 f948 	bl	d54bc <_Z16_fetch_usbserialv>
   d422c:	4943      	ldr	r1, [pc, #268]	; (d433c <loop+0x224>)
   d422e:	f000 ff7a 	bl	d5126 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(heartRate, DEC);
   d4232:	f001 f943 	bl	d54bc <_Z16_fetch_usbserialv>
   d4236:	682b      	ldr	r3, [r5, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4238:	2b00      	cmp	r3, #0
   d423a:	4683      	mov	fp, r0
   d423c:	da06      	bge.n	d424c <loop+0x134>
            t = print('-');
   d423e:	212d      	movs	r1, #45	; 0x2d
   d4240:	9305      	str	r3, [sp, #20]
   d4242:	f000 ff6d 	bl	d5120 <_ZN5Print5printEc>
            val = -n;
   d4246:	9b05      	ldr	r3, [sp, #20]
   d4248:	4259      	negs	r1, r3
   d424a:	e000      	b.n	d424e <loop+0x136>
        } else {
            val = n;
   d424c:	4619      	mov	r1, r3
        }
        return printNumber(val, base) + t;
   d424e:	220a      	movs	r2, #10
   d4250:	4658      	mov	r0, fp
   d4252:	f000 ff84 	bl	d515e <_ZN5Print11printNumberEmh>

      Serial.print(F(", HRvalid="));
   d4256:	f001 f931 	bl	d54bc <_Z16_fetch_usbserialv>
   d425a:	4939      	ldr	r1, [pc, #228]	; (d4340 <loop+0x228>)
   d425c:	f000 ff63 	bl	d5126 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(validHeartRate, DEC);
   d4260:	f001 f92c 	bl	d54bc <_Z16_fetch_usbserialv>
   d4264:	f996 3000 	ldrsb.w	r3, [r6]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4268:	2b00      	cmp	r3, #0
   d426a:	4683      	mov	fp, r0
   d426c:	da06      	bge.n	d427c <loop+0x164>
            t = print('-');
   d426e:	212d      	movs	r1, #45	; 0x2d
   d4270:	9305      	str	r3, [sp, #20]
   d4272:	f000 ff55 	bl	d5120 <_ZN5Print5printEc>
            val = -n;
   d4276:	9b05      	ldr	r3, [sp, #20]
   d4278:	4259      	negs	r1, r3
   d427a:	e000      	b.n	d427e <loop+0x166>
        } else {
            val = n;
   d427c:	4619      	mov	r1, r3
        }
        return printNumber(val, base) + t;
   d427e:	220a      	movs	r2, #10
   d4280:	4658      	mov	r0, fp
   d4282:	f000 ff6c 	bl	d515e <_ZN5Print11printNumberEmh>

      Serial.print(F(", SPO2="));
   d4286:	f001 f919 	bl	d54bc <_Z16_fetch_usbserialv>
   d428a:	492e      	ldr	r1, [pc, #184]	; (d4344 <loop+0x22c>)
   d428c:	f000 ff4b 	bl	d5126 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(spo2, DEC);
   d4290:	f001 f914 	bl	d54bc <_Z16_fetch_usbserialv>
   d4294:	4b27      	ldr	r3, [pc, #156]	; (d4334 <loop+0x21c>)
   d4296:	681b      	ldr	r3, [r3, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4298:	2b00      	cmp	r3, #0
   d429a:	4683      	mov	fp, r0
   d429c:	da06      	bge.n	d42ac <loop+0x194>
            t = print('-');
   d429e:	212d      	movs	r1, #45	; 0x2d
   d42a0:	9305      	str	r3, [sp, #20]
   d42a2:	f000 ff3d 	bl	d5120 <_ZN5Print5printEc>
            val = -n;
   d42a6:	9b05      	ldr	r3, [sp, #20]
   d42a8:	4259      	negs	r1, r3
   d42aa:	e000      	b.n	d42ae <loop+0x196>
        } else {
            val = n;
   d42ac:	4619      	mov	r1, r3
        }
        return printNumber(val, base) + t;
   d42ae:	220a      	movs	r2, #10
   d42b0:	4658      	mov	r0, fp
   d42b2:	f000 ff54 	bl	d515e <_ZN5Print11printNumberEmh>

      Serial.print(F(", SPO2Valid="));
   d42b6:	f001 f901 	bl	d54bc <_Z16_fetch_usbserialv>
   d42ba:	4923      	ldr	r1, [pc, #140]	; (d4348 <loop+0x230>)
   d42bc:	f000 ff33 	bl	d5126 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(validSPO2, DEC);
   d42c0:	f001 f8fc 	bl	d54bc <_Z16_fetch_usbserialv>
   d42c4:	9b04      	ldr	r3, [sp, #16]
   d42c6:	f993 3000 	ldrsb.w	r3, [r3]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d42ca:	2b00      	cmp	r3, #0
   d42cc:	4683      	mov	fp, r0
   d42ce:	da06      	bge.n	d42de <loop+0x1c6>
            t = print('-');
   d42d0:	212d      	movs	r1, #45	; 0x2d
   d42d2:	9305      	str	r3, [sp, #20]
   d42d4:	f000 ff24 	bl	d5120 <_ZN5Print5printEc>
            val = -n;
   d42d8:	9b05      	ldr	r3, [sp, #20]
   d42da:	4259      	negs	r1, r3
   d42dc:	e000      	b.n	d42e0 <loop+0x1c8>
        } else {
            val = n;
   d42de:	4619      	mov	r1, r3
        }
        return printNumber(val, base) + t;
   d42e0:	220a      	movs	r2, #10
   d42e2:	4658      	mov	r0, fp
   d42e4:	f000 ff3b 	bl	d515e <_ZN5Print11printNumberEmh>
   d42e8:	f10a 0a04 	add.w	sl, sl, #4
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d42ec:	4658      	mov	r0, fp
   d42ee:	f000 ff1e 	bl	d512e <_ZN5Print7printlnEv>
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 25; i < 50; i++)
   d42f2:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
   d42f6:	f108 0804 	add.w	r8, r8, #4
   d42fa:	f107 0704 	add.w	r7, r7, #4
   d42fe:	f47f af68 	bne.w	d41d2 <loop+0xba>
      Serial.println(validSPO2, DEC);
      
    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, 50, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d4302:	9b04      	ldr	r3, [sp, #16]
   d4304:	9300      	str	r3, [sp, #0]
   d4306:	9602      	str	r6, [sp, #8]
   d4308:	9501      	str	r5, [sp, #4]
   d430a:	4b0a      	ldr	r3, [pc, #40]	; (d4334 <loop+0x21c>)
   d430c:	4a02      	ldr	r2, [pc, #8]	; (d4318 <loop+0x200>)
   d430e:	4804      	ldr	r0, [pc, #16]	; (d4320 <loop+0x208>)
   d4310:	2132      	movs	r1, #50	; 0x32
   d4312:	f000 fb8f 	bl	d4a34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>

  //calculate heart rate and SpO2 after first 50 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, 50, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

  //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
  while (1)
   d4316:	e74b      	b.n	d41b0 <loop+0x98>
   d4318:	2003ded8 	.word	0x2003ded8
   d431c:	2003e078 	.word	0x2003e078
   d4320:	2003dfa4 	.word	0x2003dfa4
   d4324:	000d5e8f 	.word	0x000d5e8f
   d4328:	000d5e94 	.word	0x000d5e94
   d432c:	2003e0b4 	.word	0x2003e0b4
   d4330:	2003dfa0 	.word	0x2003dfa0
   d4334:	2003e0b8 	.word	0x2003e0b8
   d4338:	2003e008 	.word	0x2003e008
   d433c:	000d5e9a 	.word	0x000d5e9a
   d4340:	000d5ea0 	.word	0x000d5ea0
   d4344:	000d5eab 	.word	0x000d5eab
   d4348:	000d5eb3 	.word	0x000d5eb3
   d434c:	2003ded4 	.word	0x2003ded4
   d4350:	2003df3c 	.word	0x2003df3c

000d4354 <_GLOBAL__sub_I_SystemMode>:
    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, 50, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  }
   d4354:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4356:	4c0c      	ldr	r4, [pc, #48]	; (d4388 <_GLOBAL__sub_I_SystemMode+0x34>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4358:	f000 fcac 	bl	d4cb4 <HAL_Pin_Map>
   d435c:	2300      	movs	r3, #0
   d435e:	6023      	str	r3, [r4, #0]
   d4360:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4362:	71a3      	strb	r3, [r4, #6]
   d4364:	8123      	strh	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4366:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4368:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d436c:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d436e:	f000 fdb1 	bl	d4ed4 <set_system_mode>
  -INT = Not connected
 
  The MAX30105 Breakout can handle 5V or 3.3V I2C logic. We recommend powering the board with 5V
  but it will also run at 3.3V.
*/
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4372:	4620      	mov	r0, r4
   d4374:	4a05      	ldr	r2, [pc, #20]	; (d438c <_GLOBAL__sub_I_SystemMode+0x38>)
   d4376:	4906      	ldr	r1, [pc, #24]	; (d4390 <_GLOBAL__sub_I_SystemMode+0x3c>)
   d4378:	f001 fbaa 	bl	d5ad0 <__aeabi_atexit>

#include <Wire.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"

MAX30105 particleSensor;
   d437c:	4805      	ldr	r0, [pc, #20]	; (d4394 <_GLOBAL__sub_I_SystemMode+0x40>)
    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, 50, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  }
   d437e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#include <Wire.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"

MAX30105 particleSensor;
   d4382:	f000 b80b 	b.w	d439c <_ZN8MAX30105C1Ev>
   d4386:	bf00      	nop
   d4388:	2003e06c 	.word	0x2003e06c
   d438c:	2003ded0 	.word	0x2003ded0
   d4390:	000d40af 	.word	0x000d40af
   d4394:	2003e078 	.word	0x2003e078

000d4398 <_GLOBAL__sub_I_IR_AC_Max>:
   d4398:	f000 bc8c 	b.w	d4cb4 <HAL_Pin_Map>

000d439c <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
   d439c:	4770      	bx	lr

000d439e <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  int8_t numberOfSamples = sense.head - sense.tail;
   d439e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d43a2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
   d43a6:	1a1b      	subs	r3, r3, r0
   d43a8:	b2db      	uxtb	r3, r3
   d43aa:	b258      	sxtb	r0, r3
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
   d43ac:	2800      	cmp	r0, #0
   d43ae:	bfbc      	itt	lt
   d43b0:	3304      	addlt	r3, #4
   d43b2:	b258      	sxtblt	r0, r3

  return (numberOfSamples);
}
   d43b4:	b2c0      	uxtb	r0, r0
   d43b6:	4770      	bx	lr

000d43b8 <_ZN8MAX3010510nextSampleEv>:
  return (sense.green[sense.tail]);
}

//Advance the tail
void MAX30105::nextSample(void)
{
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4602      	mov	r2, r0
  if(available()) //Only advance the tail if new data is available
   d43bc:	f7ff ffef 	bl	d439e <_ZN8MAX301059availableEv>
   d43c0:	b130      	cbz	r0, d43d0 <_ZN8MAX3010510nextSampleEv+0x18>
  {
    sense.tail++;
    sense.tail %= STORAGE_SIZE; //Wrap condition
   d43c2:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   d43c6:	3301      	adds	r3, #1
   d43c8:	f003 0303 	and.w	r3, r3, #3
   d43cc:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
   d43d0:	bd08      	pop	{r3, pc}

000d43d2 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d43d2:	b570      	push	{r4, r5, r6, lr}
   d43d4:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d43d6:	6800      	ldr	r0, [r0, #0]
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d43d8:	4616      	mov	r6, r2
   d43da:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   d43dc:	f001 f98b 	bl	d56f6 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d43e0:	6820      	ldr	r0, [r4, #0]
   d43e2:	6803      	ldr	r3, [r0, #0]
   d43e4:	4631      	mov	r1, r6
   d43e6:	689b      	ldr	r3, [r3, #8]
   d43e8:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   d43ea:	2100      	movs	r1, #0
   d43ec:	6820      	ldr	r0, [r4, #0]
   d43ee:	f001 f989 	bl	d5704 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
   d43f2:	2201      	movs	r2, #1
   d43f4:	4629      	mov	r1, r5
   d43f6:	6820      	ldr	r0, [r4, #0]
   d43f8:	f001 f97a 	bl	d56f0 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d43fc:	6820      	ldr	r0, [r4, #0]
   d43fe:	6803      	ldr	r3, [r0, #0]
   d4400:	691b      	ldr	r3, [r3, #16]
   d4402:	4798      	blx	r3
   d4404:	b120      	cbz	r0, d4410 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
   d4406:	6820      	ldr	r0, [r4, #0]
   d4408:	6803      	ldr	r3, [r0, #0]
   d440a:	695b      	ldr	r3, [r3, #20]
   d440c:	4798      	blx	r3
   d440e:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
   d4410:	bd70      	pop	{r4, r5, r6, pc}

000d4412 <_ZN8MAX3010515getWritePointerEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t MAX30105::getWritePointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   d4412:	2204      	movs	r2, #4
   d4414:	7901      	ldrb	r1, [r0, #4]
   d4416:	f7ff bfdc 	b.w	d43d2 <_ZN8MAX3010513readRegister8Ehh>

000d441a <_ZN8MAX3010514getReadPointerEv>:
}

//Read the FIFO Read Pointer
uint8_t MAX30105::getReadPointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   d441a:	2206      	movs	r2, #6
   d441c:	7901      	ldrb	r1, [r0, #4]
   d441e:	f7ff bfd8 	b.w	d43d2 <_ZN8MAX3010513readRegister8Ehh>

000d4422 <_ZN8MAX301055checkEv>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105::check(void)
{
   d4422:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4426:	4604      	mov	r4, r0
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
   d4428:	f7ff fff7 	bl	d441a <_ZN8MAX3010514getReadPointerEv>
   d442c:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
   d442e:	4620      	mov	r0, r4
   d4430:	f7ff ffef 	bl	d4412 <_ZN8MAX3010515getWritePointerEv>

  int numberOfSamples = 0;

  //Do we have new data?
  if (readPointer != writePointer)
   d4434:	4285      	cmp	r5, r0
   d4436:	f000 808e 	beq.w	d4556 <_ZN8MAX301055checkEv+0x134>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d443a:	1b47      	subs	r7, r0, r5
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d443c:	f04f 0157 	mov.w	r1, #87	; 0x57
   d4440:	6820      	ldr	r0, [r4, #0]
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d4442:	7966      	ldrb	r6, [r4, #5]
  //Do we have new data?
  if (readPointer != writePointer)
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d4444:	bf48      	it	mi
   d4446:	3720      	addmi	r7, #32
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d4448:	f001 f959 	bl	d56fe <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   d444c:	6820      	ldr	r0, [r4, #0]
   d444e:	6803      	ldr	r3, [r0, #0]
   d4450:	2107      	movs	r1, #7
   d4452:	689b      	ldr	r3, [r3, #8]
   d4454:	4798      	blx	r3
    _i2cPort->endTransmission();
   d4456:	6820      	ldr	r0, [r4, #0]
   d4458:	f001 f958 	bl	d570c <_ZN7TwoWire15endTransmissionEv>
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d445c:	437e      	muls	r6, r7
   d445e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d4462:	f04f 0820 	mov.w	r8, #32

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
   d4466:	f04f 0900 	mov.w	r9, #0
    _i2cPort->endTransmission();

    //We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
    //I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
    //Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
    while (bytesLeftToRead > 0)
   d446a:	2e00      	cmp	r6, #0
   d446c:	dd74      	ble.n	d4558 <_ZN8MAX301055checkEv+0x136>
    {
      int toGet = bytesLeftToRead;
      if (toGet > I2C_BUFFER_LENGTH)
   d446e:	2e20      	cmp	r6, #32
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d4470:	bfc8      	it	gt
   d4472:	7965      	ldrbgt	r5, [r4, #5]
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d4474:	6820      	ldr	r0, [r4, #0]
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d4476:	bfc9      	itett	gt
   d4478:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
   d447c:	4635      	movle	r5, r6
   d447e:	fb98 f3f5 	sdivgt	r3, r8, r5
   d4482:	435d      	mulgt	r5, r3
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d4484:	462a      	mov	r2, r5
   d4486:	2157      	movs	r1, #87	; 0x57
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
      }

      bytesLeftToRead -= toGet;
   d4488:	1b76      	subs	r6, r6, r5

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d448a:	f001 f931 	bl	d56f0 <_ZN7TwoWire11requestFromEhj>
      
      while (toGet > 0)
   d448e:	2d00      	cmp	r5, #0
   d4490:	ddeb      	ble.n	d446a <_ZN8MAX301055checkEv+0x48>
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
   d4492:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
   d4496:	6820      	ldr	r0, [r4, #0]

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
   d4498:	f88d 9007 	strb.w	r9, [sp, #7]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
   d449c:	3301      	adds	r3, #1
   d449e:	f003 0303 	and.w	r3, r3, #3
   d44a2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
   d44a6:	6803      	ldr	r3, [r0, #0]
   d44a8:	695b      	ldr	r3, [r3, #20]
   d44aa:	4798      	blx	r3
   d44ac:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   d44b0:	6820      	ldr	r0, [r4, #0]
   d44b2:	6803      	ldr	r3, [r0, #0]
   d44b4:	695b      	ldr	r3, [r3, #20]
   d44b6:	4798      	blx	r3
   d44b8:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   d44bc:	6820      	ldr	r0, [r4, #0]
   d44be:	6803      	ldr	r3, [r0, #0]
   d44c0:	695b      	ldr	r3, [r3, #20]
   d44c2:	4798      	blx	r3
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d44c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
        temp[1] = _i2cPort->read();
        temp[0] = _i2cPort->read();
   d44c8:	f88d 0004 	strb.w	r0, [sp, #4]
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d44cc:	9a01      	ldr	r2, [sp, #4]
   d44ce:	3302      	adds	r3, #2
   d44d0:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d44d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

        if (activeLEDs > 1)
   d44d8:	7963      	ldrb	r3, [r4, #5]
   d44da:	2b01      	cmp	r3, #1
   d44dc:	d919      	bls.n	d4512 <_ZN8MAX301055checkEv+0xf0>
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
   d44de:	6820      	ldr	r0, [r4, #0]
   d44e0:	6803      	ldr	r3, [r0, #0]
   d44e2:	695b      	ldr	r3, [r3, #20]
   d44e4:	4798      	blx	r3
   d44e6:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d44ea:	6820      	ldr	r0, [r4, #0]
   d44ec:	6803      	ldr	r3, [r0, #0]
   d44ee:	695b      	ldr	r3, [r3, #20]
   d44f0:	4798      	blx	r3
   d44f2:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d44f6:	6820      	ldr	r0, [r4, #0]
   d44f8:	6803      	ldr	r3, [r0, #0]
   d44fa:	695b      	ldr	r3, [r3, #20]
   d44fc:	4798      	blx	r3
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
   d44fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
          temp[1] = _i2cPort->read();
          temp[0] = _i2cPort->read();
   d4502:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
   d4506:	9a01      	ldr	r2, [sp, #4]
   d4508:	3306      	adds	r3, #6
   d450a:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d450e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        if (activeLEDs > 2)
   d4512:	7963      	ldrb	r3, [r4, #5]
   d4514:	2b02      	cmp	r3, #2
   d4516:	d919      	bls.n	d454c <_ZN8MAX301055checkEv+0x12a>
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
   d4518:	6820      	ldr	r0, [r4, #0]
   d451a:	6803      	ldr	r3, [r0, #0]
   d451c:	695b      	ldr	r3, [r3, #20]
   d451e:	4798      	blx	r3
   d4520:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d4524:	6820      	ldr	r0, [r4, #0]
   d4526:	6803      	ldr	r3, [r0, #0]
   d4528:	695b      	ldr	r3, [r3, #20]
   d452a:	4798      	blx	r3
   d452c:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d4530:	6820      	ldr	r0, [r4, #0]
   d4532:	6803      	ldr	r3, [r0, #0]
   d4534:	695b      	ldr	r3, [r3, #20]
   d4536:	4798      	blx	r3
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
   d4538:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
          temp[1] = _i2cPort->read();
          temp[0] = _i2cPort->read();
   d453c:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
   d4540:	9a01      	ldr	r2, [sp, #4]
   d4542:	330a      	adds	r3, #10
   d4544:	f3c2 0211 	ubfx	r2, r2, #0, #18
   d4548:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        toGet -= activeLEDs * 3;
   d454c:	7963      	ldrb	r3, [r4, #5]
   d454e:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d4552:	441d      	add	r5, r3
      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
   d4554:	e79b      	b.n	d448e <_ZN8MAX301055checkEv+0x6c>
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
  byte writePointer = getWritePointer();

  int numberOfSamples = 0;
   d4556:	2700      	movs	r7, #0
    } //End while (bytesLeftToRead > 0)

  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
}
   d4558:	b2b8      	uxth	r0, r7
   d455a:	b003      	add	sp, #12
   d455c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4560 <_ZN8MAX301059safeCheckEh>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
   d4560:	b570      	push	{r4, r5, r6, lr}
   d4562:	4605      	mov	r5, r0
   d4564:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4566:	f000 fbb5 	bl	d4cd4 <HAL_Timer_Get_Milli_Seconds>
   d456a:	4604      	mov	r4, r0
   d456c:	f000 fbb2 	bl	d4cd4 <HAL_Timer_Get_Milli_Seconds>
  uint32_t markTime = millis();
  
  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
   d4570:	1b00      	subs	r0, r0, r4
   d4572:	42b0      	cmp	r0, r6
   d4574:	d808      	bhi.n	d4588 <_ZN8MAX301059safeCheckEh+0x28>

	if(check() == true) //We found new data!
   d4576:	4628      	mov	r0, r5
   d4578:	f7ff ff53 	bl	d4422 <_ZN8MAX301055checkEv>
   d457c:	2801      	cmp	r0, #1
   d457e:	d004      	beq.n	d458a <_ZN8MAX301059safeCheckEh+0x2a>
	  return(true);

	delay(1);
   d4580:	2001      	movs	r0, #1
   d4582:	f000 fe1f 	bl	d51c4 <delay>
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
  uint32_t markTime = millis();
  
  while(1)
   d4586:	e7f1      	b.n	d456c <_ZN8MAX301059safeCheckEh+0xc>
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
   d4588:	2000      	movs	r0, #0
	if(check() == true) //We found new data!
	  return(true);

	delay(1);
  }
}
   d458a:	bd70      	pop	{r4, r5, r6, pc}

000d458c <_ZN8MAX301056getRedEv>:
  return (numberOfSamples);
}

//Report the most recent red value
uint32_t MAX30105::getRed(void)
{
   d458c:	b510      	push	{r4, lr}
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d458e:	21fa      	movs	r1, #250	; 0xfa
  return (numberOfSamples);
}

//Report the most recent red value
uint32_t MAX30105::getRed(void)
{
   d4590:	4604      	mov	r4, r0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d4592:	f7ff ffe5 	bl	d4560 <_ZN8MAX301059safeCheckEh>
   d4596:	b120      	cbz	r0, d45a2 <_ZN8MAX301056getRedEv+0x16>
    return (sense.red[sense.head]);
   d4598:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d459c:	3302      	adds	r3, #2
   d459e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  else
    return(0); //Sensor failed to find new data
}
   d45a2:	bd10      	pop	{r4, pc}

000d45a4 <_ZN8MAX301055getIREv>:

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
   d45a4:	b510      	push	{r4, lr}
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d45a6:	21fa      	movs	r1, #250	; 0xfa
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
   d45a8:	4604      	mov	r4, r0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
   d45aa:	f7ff ffd9 	bl	d4560 <_ZN8MAX301059safeCheckEh>
   d45ae:	b120      	cbz	r0, d45ba <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   d45b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d45b4:	3306      	adds	r3, #6
   d45b6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  else
    return(0); //Sensor failed to find new data
}
   d45ba:	bd10      	pop	{r4, pc}

000d45bc <_ZN8MAX3010510readPartIDEv>:

//
// Device ID and Revision
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
   d45bc:	22ff      	movs	r2, #255	; 0xff
   d45be:	7901      	ldrb	r1, [r0, #4]
   d45c0:	f7ff bf07 	b.w	d43d2 <_ZN8MAX3010513readRegister8Ehh>

000d45c4 <_ZN8MAX3010514readRevisionIDEv>:
}

void MAX30105::readRevisionID() {
   d45c4:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d45c6:	22fe      	movs	r2, #254	; 0xfe
   d45c8:	7901      	ldrb	r1, [r0, #4]
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
}

void MAX30105::readRevisionID() {
   d45ca:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d45cc:	f7ff ff01 	bl	d43d2 <_ZN8MAX3010513readRegister8Ehh>
   d45d0:	71a0      	strb	r0, [r4, #6]
   d45d2:	bd10      	pop	{r4, pc}

000d45d4 <_ZN8MAX301055beginER7TwoWiremh>:

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d45d4:	b570      	push	{r4, r5, r6, lr}
   d45d6:	4604      	mov	r4, r0
   d45d8:	4616      	mov	r6, r2
   d45da:	4608      	mov	r0, r1

  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d45dc:	6021      	str	r1, [r4, #0]

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d45de:	461d      	mov	r5, r3

  _i2cPort = &wirePort; //Grab which port the user wants us to use

  _i2cPort->begin();
   d45e0:	f001 f852 	bl	d5688 <_ZN7TwoWire5beginEv>

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d45e4:	4631      	mov	r1, r6
   d45e6:	6820      	ldr	r0, [r4, #0]
   d45e8:	f001 f84a 	bl	d5680 <_ZN7TwoWire8setSpeedEm>
  _i2cPort->setClock(i2cSpeed);

  _i2caddr = i2caddr;
   d45ec:	7125      	strb	r5, [r4, #4]

  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
   d45ee:	4620      	mov	r0, r4
   d45f0:	f7ff ffe4 	bl	d45bc <_ZN8MAX3010510readPartIDEv>
   d45f4:	2815      	cmp	r0, #21
   d45f6:	d104      	bne.n	d4602 <_ZN8MAX301055beginER7TwoWiremh+0x2e>
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
  }

  // Populate revision ID
  readRevisionID();
   d45f8:	4620      	mov	r0, r4
   d45fa:	f7ff ffe3 	bl	d45c4 <_ZN8MAX3010514readRevisionIDEv>
  
  return true;
   d45fe:	2001      	movs	r0, #1
   d4600:	bd70      	pop	{r4, r5, r6, pc}
  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
   d4602:	2000      	movs	r0, #0

  // Populate revision ID
  readRevisionID();
  
  return true;
}
   d4604:	bd70      	pop	{r4, r5, r6, pc}

000d4606 <_ZN8MAX3010514writeRegister8Ehhh>:

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d4606:	b570      	push	{r4, r5, r6, lr}
   d4608:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d460a:	6800      	ldr	r0, [r0, #0]

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d460c:	4616      	mov	r6, r2
   d460e:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   d4610:	f001 f871 	bl	d56f6 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d4614:	6820      	ldr	r0, [r4, #0]
   d4616:	6803      	ldr	r3, [r0, #0]
   d4618:	4631      	mov	r1, r6
   d461a:	689b      	ldr	r3, [r3, #8]
   d461c:	4798      	blx	r3
  _i2cPort->write(value);
   d461e:	6820      	ldr	r0, [r4, #0]
   d4620:	6803      	ldr	r3, [r0, #0]
   d4622:	4629      	mov	r1, r5
   d4624:	689a      	ldr	r2, [r3, #8]
   d4626:	4790      	blx	r2
  _i2cPort->endTransmission();
   d4628:	6820      	ldr	r0, [r4, #0]
}
   d462a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
  _i2cPort->beginTransmission(address);
  _i2cPort->write(reg);
  _i2cPort->write(value);
  _i2cPort->endTransmission();
   d462e:	f001 b86d 	b.w	d570c <_ZN7TwoWire15endTransmissionEv>

000d4632 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
}

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   d4632:	460b      	mov	r3, r1
   d4634:	220c      	movs	r2, #12
   d4636:	7901      	ldrb	r1, [r0, #4]
   d4638:	f7ff bfe5 	b.w	d4606 <_ZN8MAX3010514writeRegister8Ehhh>

000d463c <_ZN8MAX3010519setPulseAmplitudeIREh>:
}

void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   d463c:	460b      	mov	r3, r1
   d463e:	220d      	movs	r2, #13
   d4640:	7901      	ldrb	r1, [r0, #4]
   d4642:	f7ff bfe0 	b.w	d4606 <_ZN8MAX3010514writeRegister8Ehhh>

000d4646 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
}

void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   d4646:	460b      	mov	r3, r1
   d4648:	220e      	movs	r2, #14
   d464a:	7901      	ldrb	r1, [r0, #4]
   d464c:	f7ff bfdb 	b.w	d4606 <_ZN8MAX3010514writeRegister8Ehhh>

000d4650 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
}

void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   d4650:	460b      	mov	r3, r1
   d4652:	2210      	movs	r2, #16
   d4654:	7901      	ldrb	r1, [r0, #4]
   d4656:	f7ff bfd6 	b.w	d4606 <_ZN8MAX3010514writeRegister8Ehhh>

000d465a <_ZN8MAX301059clearFIFOEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
}

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
   d465a:	b510      	push	{r4, lr}
   d465c:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   d465e:	7901      	ldrb	r1, [r0, #4]
   d4660:	2300      	movs	r3, #0
   d4662:	2204      	movs	r2, #4
   d4664:	f7ff ffcf 	bl	d4606 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   d4668:	7921      	ldrb	r1, [r4, #4]
   d466a:	4620      	mov	r0, r4
   d466c:	2300      	movs	r3, #0
   d466e:	2205      	movs	r2, #5
   d4670:	f7ff ffc9 	bl	d4606 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d4674:	7921      	ldrb	r1, [r4, #4]
   d4676:	4620      	mov	r0, r4
   d4678:	2300      	movs	r3, #0
   d467a:	2206      	movs	r2, #6
}
   d467c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d4680:	f7ff bfc1 	b.w	d4606 <_ZN8MAX3010514writeRegister8Ehhh>

000d4684 <_ZN8MAX301057bitMaskEhhh>:
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
   d4684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4688:	460e      	mov	r6, r1
   d468a:	4615      	mov	r5, r2
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d468c:	460a      	mov	r2, r1
   d468e:	7901      	ldrb	r1, [r0, #4]
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
   d4690:	4604      	mov	r4, r0
   d4692:	461f      	mov	r7, r3
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d4694:	f7ff fe9d 	bl	d43d2 <_ZN8MAX3010513readRegister8Ehh>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d4698:	4028      	ands	r0, r5
   d469a:	ea47 0300 	orr.w	r3, r7, r0
   d469e:	4632      	mov	r2, r6
   d46a0:	7921      	ldrb	r1, [r4, #4]
   d46a2:	4620      	mov	r0, r4
}
   d46a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d46a8:	f7ff bfad 	b.w	d4606 <_ZN8MAX3010514writeRegister8Ehhh>

000d46ac <_ZN8MAX301059softResetEv>:
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
   d46ac:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d46ae:	22bf      	movs	r2, #191	; 0xbf
   d46b0:	2340      	movs	r3, #64	; 0x40
   d46b2:	2109      	movs	r1, #9
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
   d46b4:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d46b6:	f7ff ffe5 	bl	d4684 <_ZN8MAX301057bitMaskEhhh>
   d46ba:	f000 fb0b 	bl	d4cd4 <HAL_Timer_Get_Milli_Seconds>
   d46be:	4605      	mov	r5, r0
   d46c0:	f000 fb08 	bl	d4cd4 <HAL_Timer_Get_Milli_Seconds>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
   d46c4:	1b40      	subs	r0, r0, r5
   d46c6:	2863      	cmp	r0, #99	; 0x63
   d46c8:	d80a      	bhi.n	d46e0 <_ZN8MAX301059softResetEv+0x34>
  {
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   d46ca:	2209      	movs	r2, #9
   d46cc:	7921      	ldrb	r1, [r4, #4]
   d46ce:	4620      	mov	r0, r4
   d46d0:	f7ff fe7f 	bl	d43d2 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   d46d4:	0643      	lsls	r3, r0, #25
   d46d6:	d503      	bpl.n	d46e0 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   d46d8:	2001      	movs	r0, #1
   d46da:	f000 fd73 	bl	d51c4 <delay>
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
   d46de:	e7ef      	b.n	d46c0 <_ZN8MAX301059softResetEv+0x14>
   d46e0:	bd38      	pop	{r3, r4, r5, pc}

000d46e2 <_ZN8MAX3010510setLEDModeEh>:
}

void MAX30105::setLEDMode(uint8_t mode) {
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   d46e2:	460b      	mov	r3, r1
   d46e4:	22f8      	movs	r2, #248	; 0xf8
   d46e6:	2109      	movs	r1, #9
   d46e8:	f7ff bfcc 	b.w	d4684 <_ZN8MAX301057bitMaskEhhh>

000d46ec <_ZN8MAX3010511setADCRangeEh>:
}

void MAX30105::setADCRange(uint8_t adcRange) {
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   d46ec:	460b      	mov	r3, r1
   d46ee:	229f      	movs	r2, #159	; 0x9f
   d46f0:	210a      	movs	r1, #10
   d46f2:	f7ff bfc7 	b.w	d4684 <_ZN8MAX301057bitMaskEhhh>

000d46f6 <_ZN8MAX3010513setSampleRateEh>:
}

void MAX30105::setSampleRate(uint8_t sampleRate) {
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   d46f6:	460b      	mov	r3, r1
   d46f8:	22e3      	movs	r2, #227	; 0xe3
   d46fa:	210a      	movs	r1, #10
   d46fc:	f7ff bfc2 	b.w	d4684 <_ZN8MAX301057bitMaskEhhh>

000d4700 <_ZN8MAX3010513setPulseWidthEh>:
}

void MAX30105::setPulseWidth(uint8_t pulseWidth) {
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   d4700:	460b      	mov	r3, r1
   d4702:	22fc      	movs	r2, #252	; 0xfc
   d4704:	210a      	movs	r1, #10
   d4706:	f7ff bfbd 	b.w	d4684 <_ZN8MAX301057bitMaskEhhh>

000d470a <_ZN8MAX3010514setFIFOAverageEh>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   d470a:	460b      	mov	r3, r1
   d470c:	221f      	movs	r2, #31
   d470e:	2108      	movs	r1, #8
   d4710:	f7ff bfb8 	b.w	d4684 <_ZN8MAX301057bitMaskEhhh>

000d4714 <_ZN8MAX3010518enableFIFORolloverEv>:
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
}

//Enable roll over if FIFO over flows
void MAX30105::enableFIFORollover(void) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   d4714:	2310      	movs	r3, #16
   d4716:	22ef      	movs	r2, #239	; 0xef
   d4718:	2108      	movs	r1, #8
   d471a:	f7ff bfb3 	b.w	d4684 <_ZN8MAX301057bitMaskEhhh>

000d471e <_ZN8MAX3010510enableSlotEhh>:
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {

  uint8_t originalContents;

  switch (slotNumber) {
   d471e:	3901      	subs	r1, #1

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   d4720:	4613      	mov	r3, r2

  uint8_t originalContents;

  switch (slotNumber) {
   d4722:	2903      	cmp	r1, #3
   d4724:	d814      	bhi.n	d4750 <_ZN8MAX3010510enableSlotEhh+0x32>
   d4726:	e8df f001 	tbb	[pc, r1]
   d472a:	0402      	.short	0x0402
   d472c:	0c0a      	.short	0x0c0a
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   d472e:	22f8      	movs	r2, #248	; 0xf8
   d4730:	e003      	b.n	d473a <_ZN8MAX3010510enableSlotEhh+0x1c>
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d4732:	011b      	lsls	r3, r3, #4
   d4734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d4738:	228f      	movs	r2, #143	; 0x8f
   d473a:	2111      	movs	r1, #17
   d473c:	e006      	b.n	d474c <_ZN8MAX3010510enableSlotEhh+0x2e>
      break;
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   d473e:	22f8      	movs	r2, #248	; 0xf8
   d4740:	e003      	b.n	d474a <_ZN8MAX3010510enableSlotEhh+0x2c>
      break;
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   d4742:	011b      	lsls	r3, r3, #4
   d4744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d4748:	228f      	movs	r2, #143	; 0x8f
   d474a:	2112      	movs	r1, #18
   d474c:	f7ff bf9a 	b.w	d4684 <_ZN8MAX301057bitMaskEhhh>
   d4750:	4770      	bx	lr

000d4752 <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   d4752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4756:	4616      	mov	r6, r2
   d4758:	ad08      	add	r5, sp, #32
   d475a:	4604      	mov	r4, r0
   d475c:	4688      	mov	r8, r1
   d475e:	461f      	mov	r7, r3
   d4760:	e895 0620 	ldmia.w	r5, {r5, r9, sl}
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   d4764:	f7ff ffa2 	bl	d46ac <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   d4768:	2e01      	cmp	r6, #1
   d476a:	d101      	bne.n	d4770 <_ZN8MAX301055setupEhhhiii+0x1e>
   d476c:	2100      	movs	r1, #0
   d476e:	e012      	b.n	d4796 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   d4770:	2e02      	cmp	r6, #2
   d4772:	d101      	bne.n	d4778 <_ZN8MAX301055setupEhhhiii+0x26>
   d4774:	2120      	movs	r1, #32
   d4776:	e00e      	b.n	d4796 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   d4778:	2e04      	cmp	r6, #4
   d477a:	d101      	bne.n	d4780 <_ZN8MAX301055setupEhhhiii+0x2e>
   d477c:	2140      	movs	r1, #64	; 0x40
   d477e:	e00a      	b.n	d4796 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   d4780:	2e08      	cmp	r6, #8
   d4782:	d101      	bne.n	d4788 <_ZN8MAX301055setupEhhhiii+0x36>
   d4784:	2160      	movs	r1, #96	; 0x60
   d4786:	e006      	b.n	d4796 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   d4788:	2e10      	cmp	r6, #16
   d478a:	d101      	bne.n	d4790 <_ZN8MAX301055setupEhhhiii+0x3e>
   d478c:	2180      	movs	r1, #128	; 0x80
   d478e:	e002      	b.n	d4796 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   d4790:	2e20      	cmp	r6, #32
   d4792:	d1f3      	bne.n	d477c <_ZN8MAX301055setupEhhhiii+0x2a>
   d4794:	21a0      	movs	r1, #160	; 0xa0
   d4796:	4620      	mov	r0, r4
   d4798:	f7ff ffb7 	bl	d470a <_ZN8MAX3010514setFIFOAverageEh>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   d479c:	4620      	mov	r0, r4
   d479e:	f7ff ffb9 	bl	d4714 <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   d47a2:	2f03      	cmp	r7, #3
   d47a4:	d101      	bne.n	d47aa <_ZN8MAX301055setupEhhhiii+0x58>
   d47a6:	2107      	movs	r1, #7
   d47a8:	e003      	b.n	d47b2 <_ZN8MAX301055setupEhhhiii+0x60>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   d47aa:	2f02      	cmp	r7, #2
   d47ac:	bf0c      	ite	eq
   d47ae:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   d47b0:	2102      	movne	r1, #2
   d47b2:	4620      	mov	r0, r4
   d47b4:	f7ff ff95 	bl	d46e2 <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d47b8:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   d47bc:	7167      	strb	r7, [r4, #5]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d47be:	da01      	bge.n	d47c4 <_ZN8MAX301055setupEhhhiii+0x72>
   d47c0:	2100      	movs	r1, #0
   d47c2:	e00b      	b.n	d47dc <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   d47c4:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   d47c8:	da01      	bge.n	d47ce <_ZN8MAX301055setupEhhhiii+0x7c>
   d47ca:	2120      	movs	r1, #32
   d47cc:	e006      	b.n	d47dc <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   d47ce:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   d47d2:	da01      	bge.n	d47d8 <_ZN8MAX301055setupEhhhiii+0x86>
   d47d4:	2140      	movs	r1, #64	; 0x40
   d47d6:	e001      	b.n	d47dc <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   d47d8:	d1f2      	bne.n	d47c0 <_ZN8MAX301055setupEhhhiii+0x6e>
   d47da:	2160      	movs	r1, #96	; 0x60
   d47dc:	4620      	mov	r0, r4
   d47de:	f7ff ff85 	bl	d46ec <_ZN8MAX3010511setADCRangeEh>
  else setADCRange(MAX30105_ADCRANGE_2048);

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   d47e2:	2d63      	cmp	r5, #99	; 0x63
   d47e4:	dc01      	bgt.n	d47ea <_ZN8MAX301055setupEhhhiii+0x98>
   d47e6:	2100      	movs	r1, #0
   d47e8:	e01e      	b.n	d4828 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   d47ea:	2dc7      	cmp	r5, #199	; 0xc7
   d47ec:	dc01      	bgt.n	d47f2 <_ZN8MAX301055setupEhhhiii+0xa0>
   d47ee:	2104      	movs	r1, #4
   d47f0:	e01a      	b.n	d4828 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   d47f2:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   d47f6:	da01      	bge.n	d47fc <_ZN8MAX301055setupEhhhiii+0xaa>
   d47f8:	2108      	movs	r1, #8
   d47fa:	e015      	b.n	d4828 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   d47fc:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
   d4800:	da01      	bge.n	d4806 <_ZN8MAX301055setupEhhhiii+0xb4>
   d4802:	210c      	movs	r1, #12
   d4804:	e010      	b.n	d4828 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   d4806:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   d480a:	da01      	bge.n	d4810 <_ZN8MAX301055setupEhhhiii+0xbe>
   d480c:	2110      	movs	r1, #16
   d480e:	e00b      	b.n	d4828 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   d4810:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
   d4814:	da01      	bge.n	d481a <_ZN8MAX301055setupEhhhiii+0xc8>
   d4816:	2114      	movs	r1, #20
   d4818:	e006      	b.n	d4828 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   d481a:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
   d481e:	da01      	bge.n	d4824 <_ZN8MAX301055setupEhhhiii+0xd2>
   d4820:	2118      	movs	r1, #24
   d4822:	e001      	b.n	d4828 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   d4824:	d1df      	bne.n	d47e6 <_ZN8MAX301055setupEhhhiii+0x94>
   d4826:	211c      	movs	r1, #28
   d4828:	4620      	mov	r0, r4
   d482a:	f7ff ff64 	bl	d46f6 <_ZN8MAX3010513setSampleRateEh>
  else setSampleRate(MAX30105_SAMPLERATE_50);

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   d482e:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   d4832:	dc01      	bgt.n	d4838 <_ZN8MAX301055setupEhhhiii+0xe6>
   d4834:	2100      	movs	r1, #0
   d4836:	e00e      	b.n	d4856 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   d4838:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   d483c:	dc01      	bgt.n	d4842 <_ZN8MAX301055setupEhhhiii+0xf0>
   d483e:	2101      	movs	r1, #1
   d4840:	e009      	b.n	d4856 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   d4842:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   d4846:	dc01      	bgt.n	d484c <_ZN8MAX301055setupEhhhiii+0xfa>
   d4848:	2102      	movs	r1, #2
   d484a:	e004      	b.n	d4856 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   d484c:	f240 139b 	movw	r3, #411	; 0x19b
   d4850:	4599      	cmp	r9, r3
   d4852:	d1ef      	bne.n	d4834 <_ZN8MAX301055setupEhhhiii+0xe2>
   d4854:	2103      	movs	r1, #3
   d4856:	4620      	mov	r0, r4
   d4858:	f7ff ff52 	bl	d4700 <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
   d485c:	4641      	mov	r1, r8
   d485e:	4620      	mov	r0, r4
   d4860:	f7ff fee7 	bl	d4632 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   d4864:	4641      	mov	r1, r8
   d4866:	4620      	mov	r0, r4
   d4868:	f7ff fee8 	bl	d463c <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   d486c:	4641      	mov	r1, r8
   d486e:	4620      	mov	r0, r4
   d4870:	f7ff fee9 	bl	d4646 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   d4874:	4641      	mov	r1, r8
   d4876:	4620      	mov	r0, r4
   d4878:	f7ff feea 	bl	d4650 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
   d487c:	2201      	movs	r2, #1
   d487e:	4611      	mov	r1, r2
   d4880:	4620      	mov	r0, r4
   d4882:	f7ff ff4c 	bl	d471e <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   d4886:	2f01      	cmp	r7, #1
   d4888:	d90c      	bls.n	d48a4 <_ZN8MAX301055setupEhhhiii+0x152>
  switch (slotNumber) {
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d488a:	2320      	movs	r3, #32
   d488c:	228f      	movs	r2, #143	; 0x8f
   d488e:	2111      	movs	r1, #17
   d4890:	4620      	mov	r0, r4
   d4892:	f7ff fef7 	bl	d4684 <_ZN8MAX301057bitMaskEhhh>

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   d4896:	2f02      	cmp	r7, #2
   d4898:	d004      	beq.n	d48a4 <_ZN8MAX301055setupEhhhiii+0x152>
   d489a:	2203      	movs	r2, #3
   d489c:	4611      	mov	r1, r2
   d489e:	4620      	mov	r0, r4
   d48a0:	f7ff ff3d 	bl	d471e <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d48a4:	4620      	mov	r0, r4
}
   d48a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d48aa:	f7ff bed6 	b.w	d465a <_ZN8MAX301059clearFIFOEv>

000d48ae <_GLOBAL__sub_I__ZN8MAX30105C2Ev>:
   d48ae:	f000 ba01 	b.w	d4cb4 <HAL_Pin_Map>

000d48b2 <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   d48b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   d48b6:	2400      	movs	r4, #0
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   d48b8:	4681      	mov	r9, r0
  int32_t i = 1, n_width;
  *n_npks = 0;
   d48ba:	600c      	str	r4, [r1, #0]
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
  int32_t i = 1, n_width;
   d48bc:	2501      	movs	r5, #1
  *n_npks = 0;
  
  while (i < n_size-1){
   d48be:	f103 3cff 	add.w	ip, r3, #4294967295
   d48c2:	4565      	cmp	r5, ip
   d48c4:	da2d      	bge.n	d4922 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x70>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   d48c6:	9c07      	ldr	r4, [sp, #28]
   d48c8:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
   d48cc:	42a6      	cmp	r6, r4
   d48ce:	ea4f 0785 	mov.w	r7, r5, lsl #2
   d48d2:	f105 0401 	add.w	r4, r5, #1
   d48d6:	dd22      	ble.n	d491e <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x6c>
   d48d8:	4417      	add	r7, r2
   d48da:	f857 7c04 	ldr.w	r7, [r7, #-4]
   d48de:	42be      	cmp	r6, r7
   d48e0:	dd1d      	ble.n	d491e <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x6c>
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   d48e2:	429c      	cmp	r4, r3
   d48e4:	ebc5 0e04 	rsb	lr, r5, r4
   d48e8:	4627      	mov	r7, r4
   d48ea:	d007      	beq.n	d48fc <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x4a>
   d48ec:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   d48f0:	4286      	cmp	r6, r0
   d48f2:	f104 0801 	add.w	r8, r4, #1
   d48f6:	d101      	bne.n	d48fc <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x4a>
   d48f8:	4644      	mov	r4, r8
   d48fa:	e7f2      	b.n	d48e2 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   d48fc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   d4900:	42a6      	cmp	r6, r4
   d4902:	dc01      	bgt.n	d4908 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x56>
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   d4904:	463d      	mov	r5, r7
   d4906:	e7dc      	b.n	d48c2 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x10>
  while (i < n_size-1){
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   d4908:	680c      	ldr	r4, [r1, #0]
   d490a:	2c0e      	cmp	r4, #14
   d490c:	dcfa      	bgt.n	d4904 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x52>
        pn_locs[(*n_npks)++] = i;    
   d490e:	1c66      	adds	r6, r4, #1
   d4910:	600e      	str	r6, [r1, #0]
   d4912:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   d4916:	f10e 0401 	add.w	r4, lr, #1
   d491a:	1967      	adds	r7, r4, r5
   d491c:	e7f2      	b.n	d4904 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x52>
      }
      else
        i += n_width;
    }
    else
      i++;
   d491e:	4627      	mov	r7, r4
   d4920:	e7f0      	b.n	d4904 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x52>
   d4922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4926 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   d4926:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4928:	2301      	movs	r3, #1
   d492a:	4604      	mov	r4, r0
   d492c:	428b      	cmp	r3, r1
   d492e:	da11      	bge.n	d4954 <_Z17maxim_sort_ascendPll+0x2e>
    n_temp = pn_x[i];
   d4930:	f854 6f04 	ldr.w	r6, [r4, #4]!
   d4934:	461a      	mov	r2, r3
   d4936:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   d4938:	2a00      	cmp	r2, #0
   d493a:	dd07      	ble.n	d494c <_Z17maxim_sort_ascendPll+0x26>
   d493c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   d4940:	42be      	cmp	r6, r7
   d4942:	da03      	bge.n	d494c <_Z17maxim_sort_ascendPll+0x26>
        pn_x[j] = pn_x[j-1];
   d4944:	f845 7904 	str.w	r7, [r5], #-4
*/
{
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
    n_temp = pn_x[i];
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   d4948:	3a01      	subs	r2, #1
   d494a:	e7f5      	b.n	d4938 <_Z17maxim_sort_ascendPll+0x12>
        pn_x[j] = pn_x[j-1];
    pn_x[j] = n_temp;
   d494c:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
*
* \retval       None
*/
{
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4950:	3301      	adds	r3, #1
   d4952:	e7eb      	b.n	d492c <_Z17maxim_sort_ascendPll+0x6>
   d4954:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4956 <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   d4956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d495a:	2301      	movs	r3, #1
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   d495c:	4696      	mov	lr, r2
   d495e:	460d      	mov	r5, r1
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4960:	4573      	cmp	r3, lr
   d4962:	da18      	bge.n	d4996 <_Z26maxim_sort_indices_descendPlS_l+0x40>
    n_temp = pn_indx[i];
   d4964:	f855 7f04 	ldr.w	r7, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   d4968:	461c      	mov	r4, r3
   d496a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
   d496e:	462e      	mov	r6, r5
   d4970:	2c00      	cmp	r4, #0
   d4972:	dd0c      	ble.n	d498e <_Z26maxim_sort_indices_descendPlS_l+0x38>
   d4974:	f8dc 2000 	ldr.w	r2, [ip]
   d4978:	f856 9c04 	ldr.w	r9, [r6, #-4]
   d497c:	4690      	mov	r8, r2
   d497e:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
   d4982:	4590      	cmp	r8, r2
   d4984:	dd03      	ble.n	d498e <_Z26maxim_sort_indices_descendPlS_l+0x38>
      pn_indx[j] = pn_indx[j-1];
   d4986:	f846 9904 	str.w	r9, [r6], #-4
*/ 
{
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
    n_temp = pn_indx[i];
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   d498a:	3c01      	subs	r4, #1
   d498c:	e7f0      	b.n	d4970 <_Z26maxim_sort_indices_descendPlS_l+0x1a>
      pn_indx[j] = pn_indx[j-1];
    pn_indx[j] = n_temp;
   d498e:	f841 7024 	str.w	r7, [r1, r4, lsl #2]
*
* \retval       None
*/ 
{
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4992:	3301      	adds	r3, #1
   d4994:	e7e4      	b.n	d4960 <_Z26maxim_sort_indices_descendPlS_l+0xa>
   d4996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d499a <_Z24maxim_remove_close_peaksPlS_S_l>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
   d499a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d499c:	4604      	mov	r4, r0
   d499e:	461f      	mov	r7, r3
   d49a0:	4610      	mov	r0, r2
   d49a2:	460d      	mov	r5, r1
    
  int32_t i, j, n_old_npks, n_dist;
    
  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   d49a4:	680a      	ldr	r2, [r1, #0]
   d49a6:	4621      	mov	r1, r4
   d49a8:	f7ff ffd5 	bl	d4956 <_Z26maxim_sort_indices_descendPlS_l>
   d49ac:	1f26      	subs	r6, r4, #4

  for ( i = -1; i < *pn_npks; i++ ){
   d49ae:	f04f 32ff 	mov.w	r2, #4294967295
    n_old_npks = *pn_npks;
    *pn_npks = i+1;
    for ( j = i+1; j < n_old_npks; j++ ){
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   d49b2:	f1c7 0c00 	rsb	ip, r7, #0
  int32_t i, j, n_old_npks, n_dist;
    
  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );

  for ( i = -1; i < *pn_npks; i++ ){
   d49b6:	6829      	ldr	r1, [r5, #0]
   d49b8:	428a      	cmp	r2, r1
   d49ba:	da22      	bge.n	d4a02 <_Z24maxim_remove_close_peaksPlS_S_l+0x68>
   d49bc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    n_old_npks = *pn_npks;
    *pn_npks = i+1;
   d49c0:	3201      	adds	r2, #1
   d49c2:	3901      	subs	r1, #1
   d49c4:	602a      	str	r2, [r5, #0]
   d49c6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   d49ca:	4630      	mov	r0, r6
    for ( j = i+1; j < n_old_npks; j++ ){
   d49cc:	4288      	cmp	r0, r1
   d49ce:	d101      	bne.n	d49d4 <_Z24maxim_remove_close_peaksPlS_S_l+0x3a>
   d49d0:	3604      	adds	r6, #4
   d49d2:	e7f0      	b.n	d49b6 <_Z24maxim_remove_close_peaksPlS_S_l+0x1c>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   d49d4:	f850 3f04 	ldr.w	r3, [r0, #4]!
   d49d8:	b112      	cbz	r2, d49e0 <_Z24maxim_remove_close_peaksPlS_S_l+0x46>
   d49da:	f8d6 e000 	ldr.w	lr, [r6]
   d49de:	e001      	b.n	d49e4 <_Z24maxim_remove_close_peaksPlS_S_l+0x4a>
   d49e0:	f04f 3eff 	mov.w	lr, #4294967295
   d49e4:	ebce 0303 	rsb	r3, lr, r3
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   d49e8:	42bb      	cmp	r3, r7
   d49ea:	dc01      	bgt.n	d49f0 <_Z24maxim_remove_close_peaksPlS_S_l+0x56>
   d49ec:	4563      	cmp	r3, ip
   d49ee:	daed      	bge.n	d49cc <_Z24maxim_remove_close_peaksPlS_S_l+0x32>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   d49f0:	f8d5 e000 	ldr.w	lr, [r5]
   d49f4:	f10e 0301 	add.w	r3, lr, #1
   d49f8:	602b      	str	r3, [r5, #0]
   d49fa:	6803      	ldr	r3, [r0, #0]
   d49fc:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );

  for ( i = -1; i < *pn_npks; i++ ){
    n_old_npks = *pn_npks;
    *pn_npks = i+1;
    for ( j = i+1; j < n_old_npks; j++ ){
   d4a00:	e7e4      	b.n	d49cc <_Z24maxim_remove_close_peaksPlS_S_l+0x32>
        pn_locs[(*pn_npks)++] = pn_locs[j];
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
   d4a02:	4620      	mov	r0, r4
}
   d4a04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        pn_locs[(*pn_npks)++] = pn_locs[j];
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
   d4a08:	f7ff bf8d 	b.w	d4926 <_Z17maxim_sort_ascendPll>

000d4a0c <_Z16maxim_find_peaksPlS_S_llll>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
   d4a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   d4a0e:	9f08      	ldr	r7, [sp, #32]
   d4a10:	9700      	str	r7, [sp, #0]
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
   d4a12:	4605      	mov	r5, r0
   d4a14:	460c      	mov	r4, r1
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   d4a16:	f7ff ff4c 	bl	d48b2 <_Z28maxim_peaks_above_min_heightPlS_S_ll>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   d4a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4a1c:	4628      	mov	r0, r5
   d4a1e:	f7ff ffbc 	bl	d499a <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   d4a22:	6822      	ldr	r2, [r4, #0]
   d4a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4a26:	429a      	cmp	r2, r3
   d4a28:	bfd4      	ite	le
   d4a2a:	6022      	strle	r2, [r4, #0]
   d4a2c:	6023      	strgt	r3, [r4, #0]
}
   d4a2e:	b003      	add	sp, #12
   d4a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4a34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
   d4a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a38:	b09f      	sub	sp, #124	; 0x7c
   d4a3a:	4693      	mov	fp, r2
   d4a3c:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
   d4a40:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
   d4a44:	9305      	str	r3, [sp, #20]
  int32_t an_ratio[5], n_ratio_average; 
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0; 
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   d4a46:	2200      	movs	r2, #0
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
   d4a48:	4680      	mov	r8, r0
   d4a4a:	460e      	mov	r6, r1
  int32_t n_x_dc_max_idx = 0; 
  int32_t an_ratio[5], n_ratio_average; 
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0; 
   d4a4c:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   d4a4e:	42b2      	cmp	r2, r6
   d4a50:	da04      	bge.n	d4a5c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x28>
   d4a52:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   d4a56:	3201      	adds	r2, #1
   d4a58:	440b      	add	r3, r1
   d4a5a:	e7f8      	b.n	d4a4e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1a>
   d4a5c:	4888      	ldr	r0, [pc, #544]	; (d4c80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>)
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   d4a5e:	fbb3 f2f6 	udiv	r2, r3, r6
    
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   d4a62:	2300      	movs	r3, #0
   d4a64:	42b3      	cmp	r3, r6
   d4a66:	4f86      	ldr	r7, [pc, #536]	; (d4c80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>)
   d4a68:	da06      	bge.n	d4a78 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x44>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   d4a6a:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
   d4a6e:	1a51      	subs	r1, r2, r1
   d4a70:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  un_ir_mean =0; 
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
    
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   d4a74:	3301      	adds	r3, #1
   d4a76:	e7f5      	b.n	d4a64 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x30>
   d4a78:	463b      	mov	r3, r7
   d4a7a:	2100      	movs	r1, #0
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   d4a7c:	2404      	movs	r4, #4
   d4a7e:	e893 0005 	ldmia.w	r3, {r0, r2}
   d4a82:	689d      	ldr	r5, [r3, #8]
   d4a84:	4402      	add	r2, r0
   d4a86:	4415      	add	r5, r2
   d4a88:	3101      	adds	r1, #1
   d4a8a:	68da      	ldr	r2, [r3, #12]
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4a8c:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   d4a8e:	442a      	add	r2, r5
   d4a90:	fb92 f2f4 	sdiv	r2, r2, r4
   d4a94:	f843 2b04 	str.w	r2, [r3], #4
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4a98:	d1f1      	bne.n	d4a7e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x4a>
   d4a9a:	2300      	movs	r3, #0
   d4a9c:	461a      	mov	r2, r3
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
  }
  // calculate threshold  
  n_th1=0; 
  for ( k=0 ; k<BUFFER_SIZE ;k++){
    n_th1 +=  an_x[k];
   d4a9e:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
  }
  // calculate threshold  
  n_th1=0; 
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4aa2:	3201      	adds	r2, #1
   d4aa4:	2a64      	cmp	r2, #100	; 0x64
    n_th1 +=  an_x[k];
   d4aa6:	440b      	add	r3, r1
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
  }
  // calculate threshold  
  n_th1=0; 
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4aa8:	d1f9      	bne.n	d4a9e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x6a>
    n_th1 +=  an_x[k];
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
   d4aaa:	fb93 f3f2 	sdiv	r3, r3, r2
  if( n_th1<30) n_th1=30; // min allowed
   d4aae:	2b1d      	cmp	r3, #29
   d4ab0:	dd03      	ble.n	d4aba <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x86>
  if( n_th1>60) n_th1=60; // max allowed
   d4ab2:	2b3c      	cmp	r3, #60	; 0x3c
   d4ab4:	bfa8      	it	ge
   d4ab6:	233c      	movge	r3, #60	; 0x3c
   d4ab8:	e000      	b.n	d4abc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x88>
  n_th1=0; 
  for ( k=0 ; k<BUFFER_SIZE ;k++){
    n_th1 +=  an_x[k];
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
  if( n_th1<30) n_th1=30; // min allowed
   d4aba:	231e      	movs	r3, #30
  if( n_th1>60) n_th1=60; // max allowed

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   d4abc:	2200      	movs	r2, #0
   d4abe:	4611      	mov	r1, r2
   d4ac0:	ad0f      	add	r5, sp, #60	; 0x3c
   d4ac2:	2400      	movs	r4, #0
   d4ac4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
   d4ac8:	3201      	adds	r2, #1
   d4aca:	2a0f      	cmp	r2, #15
   d4acc:	d1f8      	bne.n	d4ac0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x8c>
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   d4ace:	9202      	str	r2, [sp, #8]
   d4ad0:	2204      	movs	r2, #4
   d4ad2:	9201      	str	r2, [sp, #4]
   d4ad4:	9300      	str	r3, [sp, #0]
   d4ad6:	4a6a      	ldr	r2, [pc, #424]	; (d4c80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>)
   d4ad8:	2364      	movs	r3, #100	; 0x64
   d4ada:	a909      	add	r1, sp, #36	; 0x24
   d4adc:	4628      	mov	r0, r5
   d4ade:	f7ff ff95 	bl	d4a0c <_Z16maxim_find_peaksPlS_S_llll>
  n_peak_interval_sum =0;
  if (n_npks>=2){
   d4ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4ae4:	2b01      	cmp	r3, #1
   d4ae6:	dd16      	ble.n	d4b16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xe2>
   d4ae8:	2201      	movs	r2, #1
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   d4aea:	f855 0f04 	ldr.w	r0, [r5, #4]!
   d4aee:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d4af2:	3201      	adds	r2, #1
   d4af4:	1a41      	subs	r1, r0, r1
   d4af6:	4293      	cmp	r3, r2
   d4af8:	440c      	add	r4, r1
   d4afa:	d1f6      	bne.n	d4aea <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xb6>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   d4afc:	1e5a      	subs	r2, r3, #1
   d4afe:	fb94 f4f2 	sdiv	r4, r4, r2
   d4b02:	f240 52dc 	movw	r2, #1500	; 0x5dc
   d4b06:	fb92 f4f4 	sdiv	r4, r2, r4
    *pch_hr_valid  = 1;
   d4b0a:	2201      	movs	r2, #1
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
  n_peak_interval_sum =0;
  if (n_npks>=2){
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   d4b0c:	f8ca 4000 	str.w	r4, [sl]
    *pch_hr_valid  = 1;
   d4b10:	f889 2000 	strb.w	r2, [r9]
   d4b14:	e004      	b.n	d4b20 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xec>
  }
  else  { 
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   d4b16:	4a5b      	ldr	r2, [pc, #364]	; (d4c84 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x250>)
   d4b18:	f8ca 2000 	str.w	r2, [sl]
    *pch_hr_valid  = 0;
   d4b1c:	f889 4000 	strb.w	r4, [r9]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
      an_x[k] =  pun_ir_buffer[k] ; 
      an_y[k] =  pun_red_buffer[k] ; 
   d4b20:	4959      	ldr	r1, [pc, #356]	; (d4c88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
  n_peak_interval_sum =0;
  if (n_npks>=2){
   d4b22:	2200      	movs	r2, #0
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
    *pch_hr_valid  = 0;
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   d4b24:	42b2      	cmp	r2, r6
   d4b26:	da09      	bge.n	d4b3c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x108>
      an_x[k] =  pun_ir_buffer[k] ; 
   d4b28:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
   d4b2c:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
      an_y[k] =  pun_red_buffer[k] ; 
   d4b30:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
   d4b34:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
    *pch_hr_valid  = 0;
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   d4b38:	3201      	adds	r2, #1
   d4b3a:	e7f3      	b.n	d4b24 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf0>
  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
  n_i_ratio_count = 0; 
  for(k=0; k< 5; k++) an_ratio[k]=0;
   d4b3c:	2200      	movs	r2, #0
   d4b3e:	920a      	str	r2, [sp, #40]	; 0x28
   d4b40:	920b      	str	r2, [sp, #44]	; 0x2c
   d4b42:	920c      	str	r2, [sp, #48]	; 0x30
   d4b44:	920d      	str	r2, [sp, #52]	; 0x34
   d4b46:	920e      	str	r2, [sp, #56]	; 0x38
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4b48:	429a      	cmp	r2, r3
   d4b4a:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   d4b4e:	db0a      	blt.n	d4b66 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x132>
   d4b50:	2500      	movs	r5, #0
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4b52:	3b01      	subs	r3, #1
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
  n_i_ratio_count = 0; 
  for(k=0; k< 5; k++) an_ratio[k]=0;
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4b54:	462e      	mov	r6, r5
   d4b56:	462c      	mov	r4, r5
   d4b58:	9504      	str	r5, [sp, #16]
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4b5a:	9306      	str	r3, [sp, #24]
    n_y_dc_max= -16777216 ; 
    n_x_dc_max= -16777216; 
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4b5c:	f8df e128 	ldr.w	lr, [pc, #296]	; d4c88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>
   d4b60:	f8df 811c 	ldr.w	r8, [pc, #284]	; d4c80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>
   d4b64:	e018      	b.n	d4b98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>

  n_ratio_average =0; 
  n_i_ratio_count = 0; 
  for(k=0; k< 5; k++) an_ratio[k]=0;
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   d4b66:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
   d4b6a:	2964      	cmp	r1, #100	; 0x64
   d4b6c:	dc7e      	bgt.n	d4c6c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x238>
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
  n_i_ratio_count = 0; 
  for(k=0; k< 5; k++) an_ratio[k]=0;
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4b6e:	3201      	adds	r2, #1
   d4b70:	e7ea      	b.n	d4b48 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x114>
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   d4b72:	f858 7022 	ldr.w	r7, [r8, r2, lsl #2]
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   d4b76:	f858 002c 	ldr.w	r0, [r8, ip, lsl #2]
   d4b7a:	ebc7 0a00 	rsb	sl, r7, r0
   d4b7e:	1aa8      	subs	r0, r5, r2
   d4b80:	fb00 f00a 	mul.w	r0, r0, sl
   d4b84:	fb90 f0f9 	sdiv	r0, r0, r9
   d4b88:	4438      	add	r0, r7
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   d4b8a:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
   d4b8e:	1a3f      	subs	r7, r7, r0
   d4b90:	4379      	muls	r1, r7
   d4b92:	11c9      	asrs	r1, r1, #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4b94:	2900      	cmp	r1, #0
   d4b96:	dc2a      	bgt.n	d4bee <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1ba>
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4b98:	9b04      	ldr	r3, [sp, #16]
   d4b9a:	9a06      	ldr	r2, [sp, #24]
   d4b9c:	4293      	cmp	r3, r2
   d4b9e:	da43      	bge.n	d4c28 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1f4>
    n_y_dc_max= -16777216 ; 
    n_x_dc_max= -16777216; 
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   d4ba0:	f85b cf04 	ldr.w	ip, [fp, #4]!
   d4ba4:	f85b 2c04 	ldr.w	r2, [fp, #-4]
   d4ba8:	ebc2 090c 	rsb	r9, r2, ip
   d4bac:	3301      	adds	r3, #1
   d4bae:	f1b9 0f03 	cmp.w	r9, #3
   d4bb2:	9304      	str	r3, [sp, #16]
   d4bb4:	ddf0      	ble.n	d4b98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>
   d4bb6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   d4bba:	4610      	mov	r0, r2
   d4bbc:	4619      	mov	r1, r3
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4bbe:	4560      	cmp	r0, ip
   d4bc0:	dad7      	bge.n	d4b72 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13e>
   d4bc2:	0087      	lsls	r7, r0, #2
   d4bc4:	9707      	str	r7, [sp, #28]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   d4bc6:	4f2e      	ldr	r7, [pc, #184]	; (d4c80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24c>)
   d4bc8:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
   d4bcc:	4553      	cmp	r3, sl
   d4bce:	bfa8      	it	ge
   d4bd0:	469a      	movge	sl, r3
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4bd2:	ea4f 0380 	mov.w	r3, r0, lsl #2
   d4bd6:	bfb8      	it	lt
   d4bd8:	4605      	movlt	r5, r0
   d4bda:	f853 700e 	ldr.w	r7, [r3, lr]
   d4bde:	42b9      	cmp	r1, r7
   d4be0:	bfac      	ite	ge
   d4be2:	460f      	movge	r7, r1
   d4be4:	4606      	movlt	r6, r0
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
    n_y_dc_max= -16777216 ; 
    n_x_dc_max= -16777216; 
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4be6:	4653      	mov	r3, sl
   d4be8:	3001      	adds	r0, #1
   d4bea:	4639      	mov	r1, r7
   d4bec:	e7e7      	b.n	d4bbe <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x18a>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4bee:	2c04      	cmp	r4, #4
   d4bf0:	dcd2      	bgt.n	d4b98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   d4bf2:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   d4bf6:	f85e 002c 	ldr.w	r0, [lr, ip, lsl #2]
   d4bfa:	1ab2      	subs	r2, r6, r2
   d4bfc:	1bc0      	subs	r0, r0, r7
   d4bfe:	4342      	muls	r2, r0
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   d4c00:	f85e 0026 	ldr.w	r0, [lr, r6, lsl #2]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   d4c04:	fb92 f2f9 	sdiv	r2, r2, r9
   d4c08:	4417      	add	r7, r2
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   d4c0a:	1bc7      	subs	r7, r0, r7
   d4c0c:	437b      	muls	r3, r7
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4c0e:	11db      	asrs	r3, r3, #7
   d4c10:	d0c2      	beq.n	d4b98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>
      {   
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   d4c12:	aa1e      	add	r2, sp, #120	; 0x78
   d4c14:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
   d4c18:	2264      	movs	r2, #100	; 0x64
   d4c1a:	4353      	muls	r3, r2
        n_i_ratio_count++;
   d4c1c:	3401      	adds	r4, #1
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
      {   
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   d4c1e:	fb93 f1f1 	sdiv	r1, r3, r1
   d4c22:	f84c 1c50 	str.w	r1, [ip, #-80]
   d4c26:	e7b7      	b.n	d4b98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x164>
        n_i_ratio_count++;
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   d4c28:	4621      	mov	r1, r4
   d4c2a:	a80a      	add	r0, sp, #40	; 0x28
  n_middle_idx= n_i_ratio_count/2;
   d4c2c:	1064      	asrs	r4, r4, #1
        n_i_ratio_count++;
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   d4c2e:	f7ff fe7a 	bl	d4926 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;

  if (n_middle_idx >1)
   d4c32:	2c01      	cmp	r4, #1
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   d4c34:	aa1e      	add	r2, sp, #120	; 0x78
   d4c36:	ea4f 0384 	mov.w	r3, r4, lsl #2
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
  n_middle_idx= n_i_ratio_count/2;

  if (n_middle_idx >1)
   d4c3a:	dd0b      	ble.n	d4c54 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x220>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   d4c3c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   d4c40:	441a      	add	r2, r3
   d4c42:	f854 1c54 	ldr.w	r1, [r4, #-84]
   d4c46:	f852 3c50 	ldr.w	r3, [r2, #-80]
   d4c4a:	2202      	movs	r2, #2
   d4c4c:	440b      	add	r3, r1
   d4c4e:	fb93 f3f2 	sdiv	r3, r3, r2
   d4c52:	e002      	b.n	d4c5a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x226>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
   d4c54:	4413      	add	r3, r2
   d4c56:	f853 3c50 	ldr.w	r3, [r3, #-80]

  if( n_ratio_average>2 && n_ratio_average <184){
   d4c5a:	1eda      	subs	r2, r3, #3
   d4c5c:	2ab4      	cmp	r2, #180	; 0xb4
   d4c5e:	d805      	bhi.n	d4c6c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x238>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   d4c60:	4a0a      	ldr	r2, [pc, #40]	; (d4c8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x258>)
    *pn_spo2 = n_spo2_calc ;
   d4c62:	5cd3      	ldrb	r3, [r2, r3]
   d4c64:	9a05      	ldr	r2, [sp, #20]
   d4c66:	6013      	str	r3, [r2, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   d4c68:	2301      	movs	r3, #1
   d4c6a:	e003      	b.n	d4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x240>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   d4c6c:	9a05      	ldr	r2, [sp, #20]
   d4c6e:	4b05      	ldr	r3, [pc, #20]	; (d4c84 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x250>)
   d4c70:	6013      	str	r3, [r2, #0]
    *pch_spo2_valid  = 0; 
   d4c72:	2300      	movs	r3, #0
   d4c74:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   d4c76:	7013      	strb	r3, [r2, #0]
  }
}
   d4c78:	b01f      	add	sp, #124	; 0x7c
   d4c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c7e:	bf00      	nop
   d4c80:	2003e0bc 	.word	0x2003e0bc
   d4c84:	fffffc19 	.word	0xfffffc19
   d4c88:	2003e24c 	.word	0x2003e24c
   d4c8c:	000d5ec0 	.word	0x000d5ec0

000d4c90 <_GLOBAL__sub_I__Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
   d4c90:	f000 b810 	b.w	d4cb4 <HAL_Pin_Map>

000d4c94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <netdb_freeaddrinfo+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	689b      	ldr	r3, [r3, #8]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030268 	.word	0x00030268

000d4ca4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <netdb_getaddrinfo+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	68db      	ldr	r3, [r3, #12]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030268 	.word	0x00030268

000d4cb4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <HAL_Pin_Map+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	681b      	ldr	r3, [r3, #0]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	0003022c 	.word	0x0003022c

000d4cc4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <HAL_RNG_GetRandomNumber+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	685b      	ldr	r3, [r3, #4]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030218 	.word	0x00030218

000d4cd4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	695b      	ldr	r3, [r3, #20]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030218 	.word	0x00030218

000d4ce4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <os_thread_is_current+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	689b      	ldr	r3, [r3, #8]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030248 	.word	0x00030248

000d4cf4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <os_thread_join+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	691b      	ldr	r3, [r3, #16]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030248 	.word	0x00030248

000d4d04 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <os_thread_cleanup+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	695b      	ldr	r3, [r3, #20]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030248 	.word	0x00030248

000d4d14 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <os_mutex_recursive_create+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030248 	.word	0x00030248

000d4d24 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <os_mutex_recursive_destroy+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030248 	.word	0x00030248

000d4d34 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <inet_inet_ntop+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	695b      	ldr	r3, [r3, #20]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030264 	.word	0x00030264

000d4d44 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <HAL_USART_Init+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	681b      	ldr	r3, [r3, #0]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	0003023c 	.word	0x0003023c

000d4d54 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <HAL_USART_Write_Data+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	68db      	ldr	r3, [r3, #12]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	0003023c 	.word	0x0003023c

000d4d64 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <HAL_USART_Available_Data+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	691b      	ldr	r3, [r3, #16]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	0003023c 	.word	0x0003023c

000d4d74 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_USART_Read_Data+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	695b      	ldr	r3, [r3, #20]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003023c 	.word	0x0003023c

000d4d84 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <HAL_USART_Peek_Data+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	699b      	ldr	r3, [r3, #24]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003023c 	.word	0x0003023c

000d4d94 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_USART_Flush_Data+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	69db      	ldr	r3, [r3, #28]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003023c 	.word	0x0003023c

000d4da4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003023c 	.word	0x0003023c

000d4db4 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_I2C_Set_Speed+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	681b      	ldr	r3, [r3, #0]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030228 	.word	0x00030228

000d4dc4 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <HAL_I2C_Begin+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	68db      	ldr	r3, [r3, #12]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030228 	.word	0x00030228

000d4dd4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_I2C_Begin_Transmission+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	699b      	ldr	r3, [r3, #24]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030228 	.word	0x00030228

000d4de4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_I2C_End_Transmission+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	69db      	ldr	r3, [r3, #28]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030228 	.word	0x00030228

000d4df4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <HAL_I2C_Write_Data+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6a1b      	ldr	r3, [r3, #32]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030228 	.word	0x00030228

000d4e04 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_I2C_Available_Data+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030228 	.word	0x00030228

000d4e14 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_I2C_Read_Data+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030228 	.word	0x00030228

000d4e24 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_I2C_Peek_Data+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030228 	.word	0x00030228

000d4e34 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_I2C_Flush_Data+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030228 	.word	0x00030228

000d4e44 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_I2C_Init+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030228 	.word	0x00030228

000d4e54 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_I2C_Request_Data_Ex+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030228 	.word	0x00030228

000d4e64 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_USB_USART_Init+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	681b      	ldr	r3, [r3, #0]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	0003024c 	.word	0x0003024c

000d4e74 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_USB_USART_Begin+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	685b      	ldr	r3, [r3, #4]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	0003024c 	.word	0x0003024c

000d4e84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_USB_USART_Available_Data+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	691b      	ldr	r3, [r3, #16]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	0003024c 	.word	0x0003024c

000d4e94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	695b      	ldr	r3, [r3, #20]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	0003024c 	.word	0x0003024c

000d4ea4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_USB_USART_Receive_Data+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	699b      	ldr	r3, [r3, #24]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	0003024c 	.word	0x0003024c

000d4eb4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_USB_USART_Send_Data+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	69db      	ldr	r3, [r3, #28]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	0003024c 	.word	0x0003024c

000d4ec4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_USB_USART_Flush_Data+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	6a1b      	ldr	r3, [r3, #32]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	0003024c 	.word	0x0003024c

000d4ed4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <set_system_mode+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	685b      	ldr	r3, [r3, #4]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030220 	.word	0x00030220

000d4ee4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <system_delay_ms+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	695b      	ldr	r3, [r3, #20]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030220 	.word	0x00030220

000d4ef4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b03      	ldr	r3, [pc, #12]	; (d4f04 <system_ctrl_set_app_request_handler+0x10>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4efe:	9301      	str	r3, [sp, #4]
   d4f00:	bd08      	pop	{r3, pc}
   d4f02:	0000      	.short	0x0000
   d4f04:	00030220 	.word	0x00030220

000d4f08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b03      	ldr	r3, [pc, #12]	; (d4f18 <system_ctrl_set_result+0x10>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f12:	9301      	str	r3, [sp, #4]
   d4f14:	bd08      	pop	{r3, pc}
   d4f16:	0000      	.short	0x0000
   d4f18:	00030220 	.word	0x00030220

000d4f1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <network_connect+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	685b      	ldr	r3, [r3, #4]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030240 	.word	0x00030240

000d4f2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <network_connecting+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	689b      	ldr	r3, [r3, #8]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	00030240 	.word	0x00030240

000d4f3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <network_disconnect+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	68db      	ldr	r3, [r3, #12]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	00030240 	.word	0x00030240

000d4f4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <network_ready+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	691b      	ldr	r3, [r3, #16]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	00030240 	.word	0x00030240

000d4f5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <network_on+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	695b      	ldr	r3, [r3, #20]
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	00030240 	.word	0x00030240

000d4f6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <network_off+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	699b      	ldr	r3, [r3, #24]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	00030240 	.word	0x00030240

000d4f7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <network_listen+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	69db      	ldr	r3, [r3, #28]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030240 	.word	0x00030240

000d4f8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <network_listening+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	6a1b      	ldr	r3, [r3, #32]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030240 	.word	0x00030240

000d4f9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <network_set_listen_timeout+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030240 	.word	0x00030240

000d4fac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <network_get_listen_timeout+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030240 	.word	0x00030240

000d4fbc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030244 	.word	0x00030244

000d4fcc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <malloc+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	681b      	ldr	r3, [r3, #0]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	0003021c 	.word	0x0003021c

000d4fdc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <free+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	685b      	ldr	r3, [r3, #4]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	0003021c 	.word	0x0003021c

000d4fec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fec:	2200      	movs	r2, #0
   d4fee:	4611      	mov	r1, r2
   d4ff0:	6840      	ldr	r0, [r0, #4]
   d4ff2:	f7ff bfcb 	b.w	d4f8c <network_listening>

000d4ff6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ff6:	2200      	movs	r2, #0
   d4ff8:	4611      	mov	r1, r2
   d4ffa:	6840      	ldr	r0, [r0, #4]
   d4ffc:	f7ff bfd6 	b.w	d4fac <network_get_listen_timeout>

000d5000 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5000:	2200      	movs	r2, #0
   d5002:	6840      	ldr	r0, [r0, #4]
   d5004:	f7ff bfca 	b.w	d4f9c <network_set_listen_timeout>

000d5008 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5008:	2200      	movs	r2, #0
   d500a:	f081 0101 	eor.w	r1, r1, #1
   d500e:	6840      	ldr	r0, [r0, #4]
   d5010:	f7ff bfb4 	b.w	d4f7c <network_listen>

000d5014 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5014:	2300      	movs	r3, #0
   d5016:	461a      	mov	r2, r3
   d5018:	4619      	mov	r1, r3
   d501a:	6840      	ldr	r0, [r0, #4]
   d501c:	f7ff bfa6 	b.w	d4f6c <network_off>

000d5020 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5020:	2300      	movs	r3, #0
   d5022:	461a      	mov	r2, r3
   d5024:	4619      	mov	r1, r3
   d5026:	6840      	ldr	r0, [r0, #4]
   d5028:	f7ff bf98 	b.w	d4f5c <network_on>

000d502c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d502c:	2200      	movs	r2, #0
   d502e:	4611      	mov	r1, r2
   d5030:	6840      	ldr	r0, [r0, #4]
   d5032:	f7ff bf8b 	b.w	d4f4c <network_ready>

000d5036 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5036:	2200      	movs	r2, #0
   d5038:	4611      	mov	r1, r2
   d503a:	6840      	ldr	r0, [r0, #4]
   d503c:	f7ff bf76 	b.w	d4f2c <network_connecting>

000d5040 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5040:	2200      	movs	r2, #0
   d5042:	2102      	movs	r1, #2
   d5044:	6840      	ldr	r0, [r0, #4]
   d5046:	f7ff bf79 	b.w	d4f3c <network_disconnect>

000d504a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d504a:	2300      	movs	r3, #0
   d504c:	461a      	mov	r2, r3
   d504e:	6840      	ldr	r0, [r0, #4]
   d5050:	f7ff bf64 	b.w	d4f1c <network_connect>

000d5054 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5054:	4b02      	ldr	r3, [pc, #8]	; (d5060 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5056:	2203      	movs	r2, #3
   d5058:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d505a:	4a02      	ldr	r2, [pc, #8]	; (d5064 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d505c:	601a      	str	r2, [r3, #0]
   d505e:	4770      	bx	lr
   d5060:	2003e3dc 	.word	0x2003e3dc
   d5064:	000d5f80 	.word	0x000d5f80

000d5068 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5068:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d506a:	4c09      	ldr	r4, [pc, #36]	; (d5090 <_GLOBAL__sub_I_System+0x28>)
   d506c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d506e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5072:	6020      	str	r0, [r4, #0]
   d5074:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5076:	71a0      	strb	r0, [r4, #6]
   d5078:	8120      	strh	r0, [r4, #8]
   d507a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d507c:	f7ff ff2a 	bl	d4ed4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5080:	4620      	mov	r0, r4
   d5082:	4a04      	ldr	r2, [pc, #16]	; (d5094 <_GLOBAL__sub_I_System+0x2c>)
   d5084:	4904      	ldr	r1, [pc, #16]	; (d5098 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d508a:	f000 bd21 	b.w	d5ad0 <__aeabi_atexit>
   d508e:	bf00      	nop
   d5090:	2003e3e4 	.word	0x2003e3e4
   d5094:	2003ded0 	.word	0x2003ded0
   d5098:	000d40af 	.word	0x000d40af

000d509c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d509c:	b510      	push	{r4, lr}
   d509e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d50a0:	6800      	ldr	r0, [r0, #0]
   d50a2:	b108      	cbz	r0, d50a8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d50a4:	f7ff fe3e 	bl	d4d24 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d50a8:	4620      	mov	r0, r4
   d50aa:	bd10      	pop	{r4, pc}

000d50ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d50ac:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d50ae:	4c06      	ldr	r4, [pc, #24]	; (d50c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d50b0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d50b2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d50b4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d50b6:	f7ff fe2d 	bl	d4d14 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d50ba:	4620      	mov	r0, r4
   d50bc:	4a03      	ldr	r2, [pc, #12]	; (d50cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d50be:	4904      	ldr	r1, [pc, #16]	; (d50d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d50c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d50c4:	f000 bd04 	b.w	d5ad0 <__aeabi_atexit>
   d50c8:	2003e3f0 	.word	0x2003e3f0
   d50cc:	2003ded0 	.word	0x2003ded0
   d50d0:	000d509d 	.word	0x000d509d

000d50d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d50d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50d6:	4606      	mov	r6, r0
   d50d8:	460d      	mov	r5, r1
   d50da:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d50dc:	2400      	movs	r4, #0
  while (size--) {
   d50de:	42bd      	cmp	r5, r7
   d50e0:	d00c      	beq.n	d50fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d50e2:	6833      	ldr	r3, [r6, #0]
   d50e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d50e8:	689b      	ldr	r3, [r3, #8]
   d50ea:	4630      	mov	r0, r6
   d50ec:	4798      	blx	r3
     if (chunk>=0)
   d50ee:	2800      	cmp	r0, #0
   d50f0:	db01      	blt.n	d50f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d50f2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d50f4:	e7f3      	b.n	d50de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d50f6:	2c00      	cmp	r4, #0
   d50f8:	bf08      	it	eq
   d50fa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d50fc:	4620      	mov	r0, r4
   d50fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5100 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5100:	b570      	push	{r4, r5, r6, lr}
   d5102:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5104:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5106:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5108:	b149      	cbz	r1, d511e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d510a:	f000 fe95 	bl	d5e38 <strlen>
   d510e:	682b      	ldr	r3, [r5, #0]
   d5110:	4602      	mov	r2, r0
   d5112:	4621      	mov	r1, r4
   d5114:	4628      	mov	r0, r5
   d5116:	68db      	ldr	r3, [r3, #12]
    }
   d5118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d511c:	4718      	bx	r3
    }
   d511e:	bd70      	pop	{r4, r5, r6, pc}

000d5120 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5120:	6803      	ldr	r3, [r0, #0]
   d5122:	689b      	ldr	r3, [r3, #8]
   d5124:	4718      	bx	r3

000d5126 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d5126:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5128:	f7ff ffea 	bl	d5100 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d512c:	bd08      	pop	{r3, pc}

000d512e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d512e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5130:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5132:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5134:	f7ff fff4 	bl	d5120 <_ZN5Print5printEc>
  n += print('\n');
   d5138:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d513a:	4604      	mov	r4, r0
  n += print('\n');
   d513c:	4628      	mov	r0, r5
   d513e:	f7ff ffef 	bl	d5120 <_ZN5Print5printEc>
  return n;
}
   d5142:	4420      	add	r0, r4
   d5144:	bd38      	pop	{r3, r4, r5, pc}

000d5146 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5146:	b538      	push	{r3, r4, r5, lr}
   d5148:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d514a:	f7ff ffd9 	bl	d5100 <_ZN5Print5writeEPKc>
   d514e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5150:	4628      	mov	r0, r5
   d5152:	f7ff ffec 	bl	d512e <_ZN5Print7printlnEv>
  return n;
}
   d5156:	4420      	add	r0, r4
   d5158:	bd38      	pop	{r3, r4, r5, pc}

000d515a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d515a:	f7ff bff4 	b.w	d5146 <_ZN5Print7printlnEPKc>

000d515e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d515e:	b530      	push	{r4, r5, lr}
   d5160:	b08b      	sub	sp, #44	; 0x2c
   d5162:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5164:	2100      	movs	r1, #0
   d5166:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d516a:	2a01      	cmp	r2, #1
   d516c:	bf98      	it	ls
   d516e:	220a      	movls	r2, #10
   d5170:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5174:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5178:	fb05 3312 	mls	r3, r5, r2, r3
   d517c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5180:	2b09      	cmp	r3, #9
   d5182:	bf94      	ite	ls
   d5184:	3330      	addls	r3, #48	; 0x30
   d5186:	3337      	addhi	r3, #55	; 0x37
   d5188:	b2db      	uxtb	r3, r3
   d518a:	4621      	mov	r1, r4
   d518c:	f804 3901 	strb.w	r3, [r4], #-1
   d5190:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5192:	2d00      	cmp	r5, #0
   d5194:	d1ee      	bne.n	d5174 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5196:	f7ff ffb3 	bl	d5100 <_ZN5Print5writeEPKc>
}
   d519a:	b00b      	add	sp, #44	; 0x2c
   d519c:	bd30      	pop	{r4, r5, pc}
	...

000d51a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d51a0:	4b01      	ldr	r3, [pc, #4]	; (d51a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d51a2:	4a02      	ldr	r2, [pc, #8]	; (d51ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d51a4:	601a      	str	r2, [r3, #0]
   d51a6:	4770      	bx	lr
   d51a8:	2003e3f4 	.word	0x2003e3f4
   d51ac:	000d601f 	.word	0x000d601f

000d51b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d51b0:	4b02      	ldr	r3, [pc, #8]	; (d51bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d51b2:	681a      	ldr	r2, [r3, #0]
   d51b4:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d51b6:	601a      	str	r2, [r3, #0]
   d51b8:	4770      	bx	lr
   d51ba:	bf00      	nop
   d51bc:	2003de68 	.word	0x2003de68
   d51c0:	2003e3f8 	.word	0x2003e3f8

000d51c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d51c4:	2100      	movs	r1, #0
   d51c6:	f7ff be8d 	b.w	d4ee4 <system_delay_ms>

000d51ca <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51ca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d51cc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51ce:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d51d0:	b113      	cbz	r3, d51d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51d2:	2203      	movs	r2, #3
   d51d4:	4601      	mov	r1, r0
   d51d6:	4798      	blx	r3
    }
   d51d8:	4620      	mov	r0, r4
   d51da:	bd10      	pop	{r4, pc}

000d51dc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d51dc:	b510      	push	{r4, lr}
   d51de:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51e0:	f7ff fff3 	bl	d51ca <_ZNSt14_Function_baseD1Ev>
   d51e4:	4620      	mov	r0, r4
   d51e6:	bd10      	pop	{r4, pc}

000d51e8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51e8:	4803      	ldr	r0, [pc, #12]	; (d51f8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d51ea:	4a04      	ldr	r2, [pc, #16]	; (d51fc <_GLOBAL__sub_I_RGB+0x14>)
   d51ec:	4904      	ldr	r1, [pc, #16]	; (d5200 <_GLOBAL__sub_I_RGB+0x18>)
   d51ee:	2300      	movs	r3, #0
   d51f0:	6083      	str	r3, [r0, #8]
   d51f2:	f000 bc6d 	b.w	d5ad0 <__aeabi_atexit>
   d51f6:	bf00      	nop
   d51f8:	2003e3fc 	.word	0x2003e3fc
   d51fc:	2003ded0 	.word	0x2003ded0
   d5200:	000d51dd 	.word	0x000d51dd

000d5204 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5204:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5206:	4b0c      	ldr	r3, [pc, #48]	; (d5238 <serialEventRun+0x34>)
   d5208:	b133      	cbz	r3, d5218 <serialEventRun+0x14>
   d520a:	f000 f957 	bl	d54bc <_Z16_fetch_usbserialv>
   d520e:	6803      	ldr	r3, [r0, #0]
   d5210:	691b      	ldr	r3, [r3, #16]
   d5212:	4798      	blx	r3
   d5214:	2800      	cmp	r0, #0
   d5216:	dc09      	bgt.n	d522c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5218:	4b08      	ldr	r3, [pc, #32]	; (d523c <serialEventRun+0x38>)
   d521a:	b163      	cbz	r3, d5236 <serialEventRun+0x32>
   d521c:	f000 f9cc 	bl	d55b8 <_Z22__fetch_global_Serial1v>
   d5220:	6803      	ldr	r3, [r0, #0]
   d5222:	691b      	ldr	r3, [r3, #16]
   d5224:	4798      	blx	r3
   d5226:	2800      	cmp	r0, #0
   d5228:	dc03      	bgt.n	d5232 <serialEventRun+0x2e>
   d522a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d522c:	f3af 8000 	nop.w
   d5230:	e7f2      	b.n	d5218 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5232:	f3af 8000 	nop.w
   d5236:	bd08      	pop	{r3, pc}
	...

000d5240 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5240:	b508      	push	{r3, lr}
	serialEventRun();
   d5242:	f7ff ffdf 	bl	d5204 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5246:	f7ff fd45 	bl	d4cd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d524a:	4b01      	ldr	r3, [pc, #4]	; (d5250 <_post_loop+0x10>)
   d524c:	6018      	str	r0, [r3, #0]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	2003e730 	.word	0x2003e730

000d5254 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5254:	4802      	ldr	r0, [pc, #8]	; (d5260 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5256:	4a03      	ldr	r2, [pc, #12]	; (d5264 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5258:	4903      	ldr	r1, [pc, #12]	; (d5268 <_Z33system_initialize_user_backup_ramv+0x14>)
   d525a:	1a12      	subs	r2, r2, r0
   d525c:	f000 bdb0 	b.w	d5dc0 <memcpy>
   d5260:	2003f400 	.word	0x2003f400
   d5264:	2003f404 	.word	0x2003f404
   d5268:	000d62a0 	.word	0x000d62a0

000d526c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d526c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d526e:	2300      	movs	r3, #0
   d5270:	9300      	str	r3, [sp, #0]
   d5272:	461a      	mov	r2, r3
   d5274:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5278:	f7ff fe46 	bl	d4f08 <system_ctrl_set_result>
}
   d527c:	b003      	add	sp, #12
   d527e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5284 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5284:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5286:	8843      	ldrh	r3, [r0, #2]
   d5288:	2b0a      	cmp	r3, #10
   d528a:	d008      	beq.n	d529e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d528c:	2b50      	cmp	r3, #80	; 0x50
   d528e:	d109      	bne.n	d52a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5290:	4b09      	ldr	r3, [pc, #36]	; (d52b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5292:	681b      	ldr	r3, [r3, #0]
   d5294:	b13b      	cbz	r3, d52a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5296:	b003      	add	sp, #12
   d5298:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d529c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d529e:	f7ff ffe5 	bl	d526c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d52a2:	e006      	b.n	d52b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52a4:	2300      	movs	r3, #0
   d52a6:	9300      	str	r3, [sp, #0]
   d52a8:	461a      	mov	r2, r3
   d52aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52ae:	f7ff fe2b 	bl	d4f08 <system_ctrl_set_result>
        break;
    }
}
   d52b2:	b003      	add	sp, #12
   d52b4:	f85d fb04 	ldr.w	pc, [sp], #4
   d52b8:	2003e40c 	.word	0x2003e40c

000d52bc <module_user_init_hook>:

void module_user_init_hook()
{
   d52bc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d52be:	4c10      	ldr	r4, [pc, #64]	; (d5300 <module_user_init_hook+0x44>)
   d52c0:	4d10      	ldr	r5, [pc, #64]	; (d5304 <module_user_init_hook+0x48>)
   d52c2:	6823      	ldr	r3, [r4, #0]
   d52c4:	42ab      	cmp	r3, r5
   d52c6:	4b10      	ldr	r3, [pc, #64]	; (d5308 <module_user_init_hook+0x4c>)
   d52c8:	bf0c      	ite	eq
   d52ca:	2201      	moveq	r2, #1
   d52cc:	2200      	movne	r2, #0
   d52ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d52d0:	d002      	beq.n	d52d8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d52d2:	f7ff ffbf 	bl	d5254 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d52d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d52d8:	f7ff fcf4 	bl	d4cc4 <HAL_RNG_GetRandomNumber>
   d52dc:	4604      	mov	r4, r0
    srand(seed);
   d52de:	f000 fd83 	bl	d5de8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d52e2:	4b0a      	ldr	r3, [pc, #40]	; (d530c <module_user_init_hook+0x50>)
   d52e4:	b113      	cbz	r3, d52ec <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d52e6:	4620      	mov	r0, r4
   d52e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d52ec:	2100      	movs	r1, #0
   d52ee:	4807      	ldr	r0, [pc, #28]	; (d530c <module_user_init_hook+0x50>)
   d52f0:	f7ff fe64 	bl	d4fbc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d52f4:	2100      	movs	r1, #0
   d52f6:	4806      	ldr	r0, [pc, #24]	; (d5310 <module_user_init_hook+0x54>)
}
   d52f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d52fc:	f7ff bdfa 	b.w	d4ef4 <system_ctrl_set_app_request_handler>
   d5300:	2003f400 	.word	0x2003f400
   d5304:	9a271c1e 	.word	0x9a271c1e
   d5308:	2003e410 	.word	0x2003e410
   d530c:	00000000 	.word	0x00000000
   d5310:	000d5285 	.word	0x000d5285

000d5314 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5314:	4770      	bx	lr

000d5316 <_ZN9IPAddressD0Ev>:
   d5316:	b510      	push	{r4, lr}
   d5318:	2118      	movs	r1, #24
   d531a:	4604      	mov	r4, r0
   d531c:	f000 fbe6 	bl	d5aec <_ZdlPvj>
   d5320:	4620      	mov	r0, r4
   d5322:	bd10      	pop	{r4, pc}

000d5324 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5324:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5326:	7d03      	ldrb	r3, [r0, #20]
   d5328:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d532a:	b08d      	sub	sp, #52	; 0x34
   d532c:	460e      	mov	r6, r1
   d532e:	f100 0704 	add.w	r7, r0, #4
   d5332:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5336:	d002      	beq.n	d533e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5338:	f100 0508 	add.w	r5, r0, #8
   d533c:	e018      	b.n	d5370 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d533e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5340:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5342:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5346:	232f      	movs	r3, #47	; 0x2f
   d5348:	462a      	mov	r2, r5
   d534a:	200a      	movs	r0, #10
   d534c:	f7ff fcf2 	bl	d4d34 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5350:	4628      	mov	r0, r5
   d5352:	f000 fd71 	bl	d5e38 <strlen>
   d5356:	6833      	ldr	r3, [r6, #0]
   d5358:	4602      	mov	r2, r0
   d535a:	68db      	ldr	r3, [r3, #12]
   d535c:	4629      	mov	r1, r5
   d535e:	4630      	mov	r0, r6
   d5360:	4798      	blx	r3
   d5362:	e00f      	b.n	d5384 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5364:	b124      	cbz	r4, d5370 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5366:	212e      	movs	r1, #46	; 0x2e
   d5368:	4630      	mov	r0, r6
   d536a:	f7ff fed9 	bl	d5120 <_ZN5Print5printEc>
   d536e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5370:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5374:	220a      	movs	r2, #10
   d5376:	4630      	mov	r0, r6
   d5378:	f7ff fef1 	bl	d515e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d537c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d537e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5380:	d1f0      	bne.n	d5364 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5382:	4620      	mov	r0, r4
    }
    return n;
}
   d5384:	b00d      	add	sp, #52	; 0x34
   d5386:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5388 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5388:	b510      	push	{r4, lr}
   d538a:	4b05      	ldr	r3, [pc, #20]	; (d53a0 <_ZN9IPAddressC1Ev+0x18>)
   d538c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d538e:	2211      	movs	r2, #17
   d5390:	f840 3b04 	str.w	r3, [r0], #4
   d5394:	2100      	movs	r1, #0
   d5396:	f000 fd1e 	bl	d5dd6 <memset>
{
    clear();
}
   d539a:	4620      	mov	r0, r4
   d539c:	bd10      	pop	{r4, pc}
   d539e:	bf00      	nop
   d53a0:	000d60c0 	.word	0x000d60c0

000d53a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d53a4:	4603      	mov	r3, r0
   d53a6:	4a07      	ldr	r2, [pc, #28]	; (d53c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d53a8:	b510      	push	{r4, lr}
   d53aa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d53ae:	f101 0210 	add.w	r2, r1, #16
   d53b2:	f851 4b04 	ldr.w	r4, [r1], #4
   d53b6:	f843 4b04 	str.w	r4, [r3], #4
   d53ba:	4291      	cmp	r1, r2
   d53bc:	d1f9      	bne.n	d53b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d53be:	780a      	ldrb	r2, [r1, #0]
   d53c0:	701a      	strb	r2, [r3, #0]
}
   d53c2:	bd10      	pop	{r4, pc}
   d53c4:	000d60c0 	.word	0x000d60c0

000d53c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d53c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d53ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d53ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d53d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d53d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d53da:	2304      	movs	r3, #4
   d53dc:	6041      	str	r1, [r0, #4]
   d53de:	7503      	strb	r3, [r0, #20]
   d53e0:	bd10      	pop	{r4, pc}

000d53e2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d53e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d53e4:	780d      	ldrb	r5, [r1, #0]
   d53e6:	788b      	ldrb	r3, [r1, #2]
   d53e8:	784a      	ldrb	r2, [r1, #1]
   d53ea:	78c9      	ldrb	r1, [r1, #3]
   d53ec:	9100      	str	r1, [sp, #0]
   d53ee:	4629      	mov	r1, r5
   d53f0:	f7ff ffea 	bl	d53c8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d53f4:	b003      	add	sp, #12
   d53f6:	bd30      	pop	{r4, r5, pc}

000d53f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d53f8:	7441      	strb	r1, [r0, #17]
   d53fa:	4770      	bx	lr

000d53fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d53fc:	4770      	bx	lr

000d53fe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d53fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5400:	2100      	movs	r1, #0
   d5402:	7c00      	ldrb	r0, [r0, #16]
   d5404:	f7ff fd4e 	bl	d4ea4 <HAL_USB_USART_Receive_Data>
}
   d5408:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d540c:	bf28      	it	cs
   d540e:	f04f 30ff 	movcs.w	r0, #4294967295
   d5412:	bd08      	pop	{r3, pc}

000d5414 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5414:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5416:	2101      	movs	r1, #1
   d5418:	7c00      	ldrb	r0, [r0, #16]
   d541a:	f7ff fd43 	bl	d4ea4 <HAL_USB_USART_Receive_Data>
}
   d541e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5422:	bf28      	it	cs
   d5424:	f04f 30ff 	movcs.w	r0, #4294967295
   d5428:	bd08      	pop	{r3, pc}

000d542a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d542a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d542c:	7c00      	ldrb	r0, [r0, #16]
   d542e:	f7ff fd31 	bl	d4e94 <HAL_USB_USART_Available_Data_For_Write>
}
   d5432:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5436:	bd08      	pop	{r3, pc}

000d5438 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5438:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d543a:	7c00      	ldrb	r0, [r0, #16]
   d543c:	f7ff fd22 	bl	d4e84 <HAL_USB_USART_Available_Data>
}
   d5440:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5444:	bd08      	pop	{r3, pc}

000d5446 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5446:	7c00      	ldrb	r0, [r0, #16]
   d5448:	f7ff bd3c 	b.w	d4ec4 <HAL_USB_USART_Flush_Data>

000d544c <_ZN9USBSerialD0Ev>:
   d544c:	b510      	push	{r4, lr}
   d544e:	2114      	movs	r1, #20
   d5450:	4604      	mov	r4, r0
   d5452:	f000 fb4b 	bl	d5aec <_ZdlPvj>
   d5456:	4620      	mov	r0, r4
   d5458:	bd10      	pop	{r4, pc}

000d545a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d545a:	b538      	push	{r3, r4, r5, lr}
   d545c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d545e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5460:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5462:	f7ff fd17 	bl	d4e94 <HAL_USB_USART_Available_Data_For_Write>
   d5466:	2800      	cmp	r0, #0
   d5468:	dc01      	bgt.n	d546e <_ZN9USBSerial5writeEh+0x14>
   d546a:	7c60      	ldrb	r0, [r4, #17]
   d546c:	b128      	cbz	r0, d547a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d546e:	4629      	mov	r1, r5
   d5470:	7c20      	ldrb	r0, [r4, #16]
   d5472:	f7ff fd1f 	bl	d4eb4 <HAL_USB_USART_Send_Data>
   d5476:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d547a:	bd38      	pop	{r3, r4, r5, pc}

000d547c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d547c:	b510      	push	{r4, lr}
   d547e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5480:	2300      	movs	r3, #0
   d5482:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5488:	60a3      	str	r3, [r4, #8]
   d548a:	4b05      	ldr	r3, [pc, #20]	; (d54a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d548c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d548e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5490:	4608      	mov	r0, r1
{
  _serial = serial;
   d5492:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5494:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5496:	4611      	mov	r1, r2
   d5498:	f7ff fce4 	bl	d4e64 <HAL_USB_USART_Init>
}
   d549c:	4620      	mov	r0, r4
   d549e:	bd10      	pop	{r4, pc}
   d54a0:	000d60d4 	.word	0x000d60d4

000d54a4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d54a4:	2200      	movs	r2, #0
   d54a6:	7c00      	ldrb	r0, [r0, #16]
   d54a8:	f7ff bce4 	b.w	d4e74 <HAL_USB_USART_Begin>

000d54ac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d54ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d54ae:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d54b0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d54b2:	2100      	movs	r1, #0
   d54b4:	f000 fc8f 	bl	d5dd6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d54b8:	4620      	mov	r0, r4
   d54ba:	bd10      	pop	{r4, pc}

000d54bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d54bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54be:	4d0e      	ldr	r5, [pc, #56]	; (d54f8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d54c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d54c2:	a801      	add	r0, sp, #4
   d54c4:	f7ff fff2 	bl	d54ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54c8:	6829      	ldr	r1, [r5, #0]
   d54ca:	f011 0401 	ands.w	r4, r1, #1
   d54ce:	d110      	bne.n	d54f2 <_Z16_fetch_usbserialv+0x36>
   d54d0:	4628      	mov	r0, r5
   d54d2:	f7fe fde4 	bl	d409e <__cxa_guard_acquire>
   d54d6:	b160      	cbz	r0, d54f2 <_Z16_fetch_usbserialv+0x36>
   d54d8:	aa01      	add	r2, sp, #4
   d54da:	4621      	mov	r1, r4
   d54dc:	4807      	ldr	r0, [pc, #28]	; (d54fc <_Z16_fetch_usbserialv+0x40>)
   d54de:	f7ff ffcd 	bl	d547c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d54e2:	4628      	mov	r0, r5
   d54e4:	f7fe fde0 	bl	d40a8 <__cxa_guard_release>
   d54e8:	4a05      	ldr	r2, [pc, #20]	; (d5500 <_Z16_fetch_usbserialv+0x44>)
   d54ea:	4906      	ldr	r1, [pc, #24]	; (d5504 <_Z16_fetch_usbserialv+0x48>)
   d54ec:	4803      	ldr	r0, [pc, #12]	; (d54fc <_Z16_fetch_usbserialv+0x40>)
   d54ee:	f000 faef 	bl	d5ad0 <__aeabi_atexit>
	return _usbserial;
}
   d54f2:	4802      	ldr	r0, [pc, #8]	; (d54fc <_Z16_fetch_usbserialv+0x40>)
   d54f4:	b007      	add	sp, #28
   d54f6:	bd30      	pop	{r4, r5, pc}
   d54f8:	2003e414 	.word	0x2003e414
   d54fc:	2003e418 	.word	0x2003e418
   d5500:	2003ded0 	.word	0x2003ded0
   d5504:	000d53fd 	.word	0x000d53fd

000d5508 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5508:	4770      	bx	lr

000d550a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d550a:	7441      	strb	r1, [r0, #17]
   d550c:	4770      	bx	lr

000d550e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d550e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5510:	7c00      	ldrb	r0, [r0, #16]
   d5512:	f7ff fc47 	bl	d4da4 <HAL_USART_Available_Data_For_Write>
}
   d5516:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d551a:	bd08      	pop	{r3, pc}

000d551c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d551c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d551e:	7c00      	ldrb	r0, [r0, #16]
   d5520:	f7ff fc20 	bl	d4d64 <HAL_USART_Available_Data>
}
   d5524:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5528:	bd08      	pop	{r3, pc}

000d552a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d552a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d552c:	7c00      	ldrb	r0, [r0, #16]
   d552e:	f7ff fc29 	bl	d4d84 <HAL_USART_Peek_Data>
}
   d5532:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5536:	bf28      	it	cs
   d5538:	f04f 30ff 	movcs.w	r0, #4294967295
   d553c:	bd08      	pop	{r3, pc}

000d553e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d553e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5540:	7c00      	ldrb	r0, [r0, #16]
   d5542:	f7ff fc17 	bl	d4d74 <HAL_USART_Read_Data>
}
   d5546:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d554a:	bf28      	it	cs
   d554c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5550:	bd08      	pop	{r3, pc}

000d5552 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5552:	7c00      	ldrb	r0, [r0, #16]
   d5554:	f7ff bc1e 	b.w	d4d94 <HAL_USART_Flush_Data>

000d5558 <_ZN11USARTSerialD0Ev>:
   d5558:	b510      	push	{r4, lr}
   d555a:	2114      	movs	r1, #20
   d555c:	4604      	mov	r4, r0
   d555e:	f000 fac5 	bl	d5aec <_ZdlPvj>
   d5562:	4620      	mov	r0, r4
   d5564:	bd10      	pop	{r4, pc}

000d5566 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5566:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5568:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d556a:	4604      	mov	r4, r0
   d556c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d556e:	b925      	cbnz	r5, d557a <_ZN11USARTSerial5writeEh+0x14>
   d5570:	7c00      	ldrb	r0, [r0, #16]
   d5572:	f7ff fc17 	bl	d4da4 <HAL_USART_Available_Data_For_Write>
   d5576:	2800      	cmp	r0, #0
   d5578:	dd05      	ble.n	d5586 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d557a:	4631      	mov	r1, r6
   d557c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d557e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5582:	f7ff bbe7 	b.w	d4d54 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5586:	4628      	mov	r0, r5
   d5588:	bd70      	pop	{r4, r5, r6, pc}
	...

000d558c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d558c:	b510      	push	{r4, lr}
   d558e:	4604      	mov	r4, r0
   d5590:	4608      	mov	r0, r1
   d5592:	4611      	mov	r1, r2
   d5594:	2200      	movs	r2, #0
   d5596:	6062      	str	r2, [r4, #4]
   d5598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d559c:	60a2      	str	r2, [r4, #8]
   d559e:	4a05      	ldr	r2, [pc, #20]	; (d55b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d55a0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d55a2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d55a4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d55a6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d55a8:	461a      	mov	r2, r3
   d55aa:	f7ff fbcb 	bl	d4d44 <HAL_USART_Init>
}
   d55ae:	4620      	mov	r0, r4
   d55b0:	bd10      	pop	{r4, pc}
   d55b2:	bf00      	nop
   d55b4:	000d6104 	.word	0x000d6104

000d55b8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d55b8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d55ba:	4d0c      	ldr	r5, [pc, #48]	; (d55ec <_Z22__fetch_global_Serial1v+0x34>)
   d55bc:	6829      	ldr	r1, [r5, #0]
   d55be:	f011 0401 	ands.w	r4, r1, #1
   d55c2:	d111      	bne.n	d55e8 <_Z22__fetch_global_Serial1v+0x30>
   d55c4:	4628      	mov	r0, r5
   d55c6:	f7fe fd6a 	bl	d409e <__cxa_guard_acquire>
   d55ca:	b168      	cbz	r0, d55e8 <_Z22__fetch_global_Serial1v+0x30>
   d55cc:	4a08      	ldr	r2, [pc, #32]	; (d55f0 <_Z22__fetch_global_Serial1v+0x38>)
   d55ce:	4b09      	ldr	r3, [pc, #36]	; (d55f4 <_Z22__fetch_global_Serial1v+0x3c>)
   d55d0:	4809      	ldr	r0, [pc, #36]	; (d55f8 <_Z22__fetch_global_Serial1v+0x40>)
   d55d2:	4621      	mov	r1, r4
   d55d4:	f7ff ffda 	bl	d558c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d55d8:	4628      	mov	r0, r5
   d55da:	f7fe fd65 	bl	d40a8 <__cxa_guard_release>
   d55de:	4a07      	ldr	r2, [pc, #28]	; (d55fc <_Z22__fetch_global_Serial1v+0x44>)
   d55e0:	4907      	ldr	r1, [pc, #28]	; (d5600 <_Z22__fetch_global_Serial1v+0x48>)
   d55e2:	4805      	ldr	r0, [pc, #20]	; (d55f8 <_Z22__fetch_global_Serial1v+0x40>)
   d55e4:	f000 fa74 	bl	d5ad0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d55e8:	4803      	ldr	r0, [pc, #12]	; (d55f8 <_Z22__fetch_global_Serial1v+0x40>)
   d55ea:	bd38      	pop	{r3, r4, r5, pc}
   d55ec:	2003e4c4 	.word	0x2003e4c4
   d55f0:	2003e4c8 	.word	0x2003e4c8
   d55f4:	2003e440 	.word	0x2003e440
   d55f8:	2003e42c 	.word	0x2003e42c
   d55fc:	2003ded0 	.word	0x2003ded0
   d5600:	000d5509 	.word	0x000d5509

000d5604 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5604:	4770      	bx	lr

000d5606 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5608:	4606      	mov	r6, r0
   d560a:	4615      	mov	r5, r2
   d560c:	460c      	mov	r4, r1
   d560e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5610:	42bc      	cmp	r4, r7
   d5612:	d006      	beq.n	d5622 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5614:	6833      	ldr	r3, [r6, #0]
   d5616:	f814 1b01 	ldrb.w	r1, [r4], #1
   d561a:	689b      	ldr	r3, [r3, #8]
   d561c:	4630      	mov	r0, r6
   d561e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5620:	e7f6      	b.n	d5610 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5622:	4628      	mov	r0, r5
   d5624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5626 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5626:	2200      	movs	r2, #0
   d5628:	7c00      	ldrb	r0, [r0, #16]
   d562a:	f7ff bbe3 	b.w	d4df4 <HAL_I2C_Write_Data>

000d562e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d562e:	2100      	movs	r1, #0
   d5630:	7c00      	ldrb	r0, [r0, #16]
   d5632:	f7ff bbe7 	b.w	d4e04 <HAL_I2C_Available_Data>

000d5636 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5636:	2100      	movs	r1, #0
   d5638:	7c00      	ldrb	r0, [r0, #16]
   d563a:	f7ff bbeb 	b.w	d4e14 <HAL_I2C_Read_Data>

000d563e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d563e:	2100      	movs	r1, #0
   d5640:	7c00      	ldrb	r0, [r0, #16]
   d5642:	f7ff bbef 	b.w	d4e24 <HAL_I2C_Peek_Data>

000d5646 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5646:	2100      	movs	r1, #0
   d5648:	7c00      	ldrb	r0, [r0, #16]
   d564a:	f7ff bbf3 	b.w	d4e34 <HAL_I2C_Flush_Data>

000d564e <_ZN7TwoWireD0Ev>:
   d564e:	b510      	push	{r4, lr}
   d5650:	2114      	movs	r1, #20
   d5652:	4604      	mov	r4, r0
   d5654:	f000 fa4a 	bl	d5aec <_ZdlPvj>
   d5658:	4620      	mov	r0, r4
   d565a:	bd10      	pop	{r4, pc}

000d565c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d565c:	b510      	push	{r4, lr}
   d565e:	4604      	mov	r4, r0
   d5660:	2300      	movs	r3, #0
   d5662:	6063      	str	r3, [r4, #4]
   d5664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5668:	60a3      	str	r3, [r4, #8]
   d566a:	4b04      	ldr	r3, [pc, #16]	; (d567c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d566c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d566e:	4608      	mov	r0, r1
   d5670:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5672:	4611      	mov	r1, r2
   d5674:	f7ff fbe6 	bl	d4e44 <HAL_I2C_Init>
}
   d5678:	4620      	mov	r0, r4
   d567a:	bd10      	pop	{r4, pc}
   d567c:	000d6134 	.word	0x000d6134

000d5680 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d5680:	2200      	movs	r2, #0
   d5682:	7c00      	ldrb	r0, [r0, #16]
   d5684:	f7ff bb96 	b.w	d4db4 <HAL_I2C_Set_Speed>

000d5688 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5688:	2300      	movs	r3, #0
   d568a:	461a      	mov	r2, r3
   d568c:	4619      	mov	r1, r3
   d568e:	7c00      	ldrb	r0, [r0, #16]
   d5690:	f7ff bb98 	b.w	d4dc4 <HAL_I2C_Begin>

000d5694 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5694:	b570      	push	{r4, r5, r6, lr}
   d5696:	460c      	mov	r4, r1
   d5698:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d569a:	2514      	movs	r5, #20
   d569c:	4606      	mov	r6, r0
   d569e:	462a      	mov	r2, r5
   d56a0:	2100      	movs	r1, #0
   d56a2:	a801      	add	r0, sp, #4
   d56a4:	f000 fb97 	bl	d5dd6 <memset>
   d56a8:	7823      	ldrb	r3, [r4, #0]
   d56aa:	f88d 3008 	strb.w	r3, [sp, #8]
   d56ae:	6863      	ldr	r3, [r4, #4]
   d56b0:	9303      	str	r3, [sp, #12]
   d56b2:	68e3      	ldr	r3, [r4, #12]
   d56b4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d56b6:	2200      	movs	r2, #0
   d56b8:	7a23      	ldrb	r3, [r4, #8]
   d56ba:	7c30      	ldrb	r0, [r6, #16]
   d56bc:	f8ad 5004 	strh.w	r5, [sp, #4]
   d56c0:	a901      	add	r1, sp, #4
   d56c2:	9305      	str	r3, [sp, #20]
   d56c4:	f7ff fbc6 	bl	d4e54 <HAL_I2C_Request_Data_Ex>
}
   d56c8:	b006      	add	sp, #24
   d56ca:	bd70      	pop	{r4, r5, r6, pc}

000d56cc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d56cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d56ce:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d56d0:	f88d 1000 	strb.w	r1, [sp]
   d56d4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d56d8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d56da:	bf18      	it	ne
   d56dc:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d56de:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d56e0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d56e2:	f88d 3008 	strb.w	r3, [sp, #8]
   d56e6:	f7ff ffd5 	bl	d5694 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d56ea:	b005      	add	sp, #20
   d56ec:	f85d fb04 	ldr.w	pc, [sp], #4

000d56f0 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d56f0:	2301      	movs	r3, #1
   d56f2:	f7ff bfeb 	b.w	d56cc <_ZN7TwoWire11requestFromEhjh>

000d56f6 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d56f6:	2200      	movs	r2, #0
   d56f8:	7c00      	ldrb	r0, [r0, #16]
   d56fa:	f7ff bb6b 	b.w	d4dd4 <HAL_I2C_Begin_Transmission>

000d56fe <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d56fe:	b2c9      	uxtb	r1, r1
   d5700:	f7ff bff9 	b.w	d56f6 <_ZN7TwoWire17beginTransmissionEh>

000d5704 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5704:	2200      	movs	r2, #0
   d5706:	7c00      	ldrb	r0, [r0, #16]
   d5708:	f7ff bb6c 	b.w	d4de4 <HAL_I2C_End_Transmission>

000d570c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d570c:	2101      	movs	r1, #1
   d570e:	f7ff bff9 	b.w	d5704 <_ZN7TwoWire15endTransmissionEh>

000d5712 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5712:	2200      	movs	r2, #0
   d5714:	4611      	mov	r1, r2
   d5716:	6840      	ldr	r0, [r0, #4]
   d5718:	f7ff bc38 	b.w	d4f8c <network_listening>

000d571c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d571c:	2200      	movs	r2, #0
   d571e:	4611      	mov	r1, r2
   d5720:	6840      	ldr	r0, [r0, #4]
   d5722:	f7ff bc43 	b.w	d4fac <network_get_listen_timeout>

000d5726 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5726:	2200      	movs	r2, #0
   d5728:	6840      	ldr	r0, [r0, #4]
   d572a:	f7ff bc37 	b.w	d4f9c <network_set_listen_timeout>

000d572e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d572e:	2200      	movs	r2, #0
   d5730:	f081 0101 	eor.w	r1, r1, #1
   d5734:	6840      	ldr	r0, [r0, #4]
   d5736:	f7ff bc21 	b.w	d4f7c <network_listen>

000d573a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d573a:	2300      	movs	r3, #0
   d573c:	461a      	mov	r2, r3
   d573e:	2101      	movs	r1, #1
   d5740:	6840      	ldr	r0, [r0, #4]
   d5742:	f7ff bc13 	b.w	d4f6c <network_off>

000d5746 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5746:	2300      	movs	r3, #0
   d5748:	461a      	mov	r2, r3
   d574a:	4619      	mov	r1, r3
   d574c:	6840      	ldr	r0, [r0, #4]
   d574e:	f7ff bc05 	b.w	d4f5c <network_on>

000d5752 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5752:	2200      	movs	r2, #0
   d5754:	4611      	mov	r1, r2
   d5756:	6840      	ldr	r0, [r0, #4]
   d5758:	f7ff bbf8 	b.w	d4f4c <network_ready>

000d575c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d575c:	2200      	movs	r2, #0
   d575e:	4611      	mov	r1, r2
   d5760:	6840      	ldr	r0, [r0, #4]
   d5762:	f7ff bbe3 	b.w	d4f2c <network_connecting>

000d5766 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5766:	2200      	movs	r2, #0
   d5768:	2102      	movs	r1, #2
   d576a:	6840      	ldr	r0, [r0, #4]
   d576c:	f7ff bbe6 	b.w	d4f3c <network_disconnect>

000d5770 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5770:	2300      	movs	r3, #0
   d5772:	461a      	mov	r2, r3
   d5774:	6840      	ldr	r0, [r0, #4]
   d5776:	f7ff bbd1 	b.w	d4f1c <network_connect>

000d577a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d577a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d577c:	4605      	mov	r5, r0
   d577e:	b188      	cbz	r0, d57a4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5780:	6804      	ldr	r4, [r0, #0]
   d5782:	b14c      	cbz	r4, d5798 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5784:	68a3      	ldr	r3, [r4, #8]
   d5786:	b11b      	cbz	r3, d5790 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5788:	2203      	movs	r2, #3
   d578a:	4621      	mov	r1, r4
   d578c:	4620      	mov	r0, r4
   d578e:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5790:	2110      	movs	r1, #16
   d5792:	4620      	mov	r0, r4
   d5794:	f000 f9aa 	bl	d5aec <_ZdlPvj>
   d5798:	4628      	mov	r0, r5
   d579a:	2114      	movs	r1, #20
      }
   d579c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57a0:	f000 b9a4 	b.w	d5aec <_ZdlPvj>
   d57a4:	bd38      	pop	{r3, r4, r5, pc}

000d57a6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d57a6:	b110      	cbz	r0, d57ae <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d57a8:	6803      	ldr	r3, [r0, #0]
   d57aa:	685b      	ldr	r3, [r3, #4]
   d57ac:	4718      	bx	r3
   d57ae:	4770      	bx	lr

000d57b0 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d57b0:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d57b2:	6803      	ldr	r3, [r0, #0]
   d57b4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d57b6:	b1bb      	cbz	r3, d57e8 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d57b8:	6858      	ldr	r0, [r3, #4]
   d57ba:	f7ff fa93 	bl	d4ce4 <os_thread_is_current>
   d57be:	b978      	cbnz	r0, d57e0 <_ZN6ThreadD1Ev+0x30>
   d57c0:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d57c2:	7c5a      	ldrb	r2, [r3, #17]
   d57c4:	b912      	cbnz	r2, d57cc <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d57c6:	6858      	ldr	r0, [r3, #4]
   d57c8:	f7ff fa94 	bl	d4cf4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d57cc:	6823      	ldr	r3, [r4, #0]
   d57ce:	6858      	ldr	r0, [r3, #4]
   d57d0:	f7ff fa98 	bl	d4d04 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57d4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d57d6:	2300      	movs	r3, #0
   d57d8:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d57da:	b128      	cbz	r0, d57e8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d57dc:	f7ff ffcd 	bl	d577a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57e0:	6820      	ldr	r0, [r4, #0]
   d57e2:	b108      	cbz	r0, d57e8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d57e4:	f7ff ffc9 	bl	d577a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d57e8:	4620      	mov	r0, r4
   d57ea:	bd10      	pop	{r4, pc}

000d57ec <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d57ec:	b538      	push	{r3, r4, r5, lr}
   d57ee:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57f0:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d57f4:	b108      	cbz	r0, d57fa <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d57f6:	f7fe fc50 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d57fa:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d57fe:	b108      	cbz	r0, d5804 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5800:	f7ff fa90 	bl	d4d24 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5804:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5808:	b135      	cbz	r5, d5818 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d580a:	4628      	mov	r0, r5
   d580c:	f7ff ffd0 	bl	d57b0 <_ZN6ThreadD1Ev>
   d5810:	2104      	movs	r1, #4
   d5812:	4628      	mov	r0, r5
   d5814:	f000 f96a 	bl	d5aec <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5818:	6820      	ldr	r0, [r4, #0]
   d581a:	b108      	cbz	r0, d5820 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d581c:	f7ff ffc3 	bl	d57a6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5820:	4620      	mov	r0, r4
   d5822:	bd38      	pop	{r3, r4, r5, pc}

000d5824 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5824:	b510      	push	{r4, lr}
   d5826:	4b04      	ldr	r3, [pc, #16]	; (d5838 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5828:	4604      	mov	r4, r0
   d582a:	f840 3b08 	str.w	r3, [r0], #8
   d582e:	f7ff ffdd 	bl	d57ec <_ZN5spark11MeshPublishD1Ev>
   d5832:	4620      	mov	r0, r4
   d5834:	bd10      	pop	{r4, pc}
   d5836:	bf00      	nop
   d5838:	000d615c 	.word	0x000d615c

000d583c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d583c:	b538      	push	{r3, r4, r5, lr}
   d583e:	4c0e      	ldr	r4, [pc, #56]	; (d5878 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5840:	4b0e      	ldr	r3, [pc, #56]	; (d587c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5842:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5844:	2500      	movs	r5, #0
   d5846:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5848:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d584c:	6063      	str	r3, [r4, #4]
   d584e:	60a5      	str	r5, [r4, #8]
   d5850:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5854:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5858:	f7ff fa5c 	bl	d4d14 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d585c:	4b08      	ldr	r3, [pc, #32]	; (d5880 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d585e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5862:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5866:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5868:	4620      	mov	r0, r4
   d586a:	4a06      	ldr	r2, [pc, #24]	; (d5884 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d586c:	4906      	ldr	r1, [pc, #24]	; (d5888 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d586e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5872:	f000 b92d 	b.w	d5ad0 <__aeabi_atexit>
   d5876:	bf00      	nop
   d5878:	2003e54c 	.word	0x2003e54c
   d587c:	000d61c4 	.word	0x000d61c4
   d5880:	000d615c 	.word	0x000d615c
   d5884:	2003ded0 	.word	0x2003ded0
   d5888:	000d5825 	.word	0x000d5825

000d588c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d588c:	2200      	movs	r2, #0
   d588e:	4611      	mov	r1, r2
   d5890:	6840      	ldr	r0, [r0, #4]
   d5892:	f7ff bb5b 	b.w	d4f4c <network_ready>

000d5896 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5896:	2200      	movs	r2, #0
   d5898:	4611      	mov	r1, r2
   d589a:	6840      	ldr	r0, [r0, #4]
   d589c:	f7ff bb76 	b.w	d4f8c <network_listening>

000d58a0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d58a0:	2200      	movs	r2, #0
   d58a2:	4611      	mov	r1, r2
   d58a4:	6840      	ldr	r0, [r0, #4]
   d58a6:	f7ff bb81 	b.w	d4fac <network_get_listen_timeout>

000d58aa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d58aa:	2200      	movs	r2, #0
   d58ac:	6840      	ldr	r0, [r0, #4]
   d58ae:	f7ff bb75 	b.w	d4f9c <network_set_listen_timeout>

000d58b2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d58b2:	2200      	movs	r2, #0
   d58b4:	f081 0101 	eor.w	r1, r1, #1
   d58b8:	6840      	ldr	r0, [r0, #4]
   d58ba:	f7ff bb5f 	b.w	d4f7c <network_listen>

000d58be <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d58be:	2300      	movs	r3, #0
   d58c0:	461a      	mov	r2, r3
   d58c2:	4619      	mov	r1, r3
   d58c4:	6840      	ldr	r0, [r0, #4]
   d58c6:	f7ff bb51 	b.w	d4f6c <network_off>

000d58ca <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d58ca:	2300      	movs	r3, #0
   d58cc:	461a      	mov	r2, r3
   d58ce:	4619      	mov	r1, r3
   d58d0:	6840      	ldr	r0, [r0, #4]
   d58d2:	f7ff bb43 	b.w	d4f5c <network_on>

000d58d6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d58d6:	2200      	movs	r2, #0
   d58d8:	4611      	mov	r1, r2
   d58da:	6840      	ldr	r0, [r0, #4]
   d58dc:	f7ff bb26 	b.w	d4f2c <network_connecting>

000d58e0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58e0:	2200      	movs	r2, #0
   d58e2:	2102      	movs	r1, #2
   d58e4:	6840      	ldr	r0, [r0, #4]
   d58e6:	f7ff bb29 	b.w	d4f3c <network_disconnect>

000d58ea <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d58ea:	2300      	movs	r3, #0
   d58ec:	461a      	mov	r2, r3
   d58ee:	6840      	ldr	r0, [r0, #4]
   d58f0:	f7ff bb14 	b.w	d4f1c <network_connect>

000d58f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d58f4:	4b02      	ldr	r3, [pc, #8]	; (d5900 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d58f6:	2204      	movs	r2, #4
   d58f8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d58fa:	4a02      	ldr	r2, [pc, #8]	; (d5904 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d58fc:	601a      	str	r2, [r3, #0]
   d58fe:	4770      	bx	lr
   d5900:	2003e720 	.word	0x2003e720
   d5904:	000d6190 	.word	0x000d6190

000d5908 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5908:	2300      	movs	r3, #0
   d590a:	461a      	mov	r2, r3
   d590c:	6840      	ldr	r0, [r0, #4]
   d590e:	f7ff bb05 	b.w	d4f1c <network_connect>

000d5912 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5912:	2200      	movs	r2, #0
   d5914:	2102      	movs	r1, #2
   d5916:	6840      	ldr	r0, [r0, #4]
   d5918:	f7ff bb10 	b.w	d4f3c <network_disconnect>

000d591c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d591c:	2200      	movs	r2, #0
   d591e:	4611      	mov	r1, r2
   d5920:	6840      	ldr	r0, [r0, #4]
   d5922:	f7ff bb03 	b.w	d4f2c <network_connecting>

000d5926 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5926:	2200      	movs	r2, #0
   d5928:	4611      	mov	r1, r2
   d592a:	6840      	ldr	r0, [r0, #4]
   d592c:	f7ff bb0e 	b.w	d4f4c <network_ready>

000d5930 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5930:	2300      	movs	r3, #0
   d5932:	461a      	mov	r2, r3
   d5934:	4619      	mov	r1, r3
   d5936:	6840      	ldr	r0, [r0, #4]
   d5938:	f7ff bb10 	b.w	d4f5c <network_on>

000d593c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d593c:	2300      	movs	r3, #0
   d593e:	461a      	mov	r2, r3
   d5940:	4619      	mov	r1, r3
   d5942:	6840      	ldr	r0, [r0, #4]
   d5944:	f7ff bb12 	b.w	d4f6c <network_off>

000d5948 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5948:	2200      	movs	r2, #0
   d594a:	f081 0101 	eor.w	r1, r1, #1
   d594e:	6840      	ldr	r0, [r0, #4]
   d5950:	f7ff bb14 	b.w	d4f7c <network_listen>

000d5954 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5954:	2200      	movs	r2, #0
   d5956:	6840      	ldr	r0, [r0, #4]
   d5958:	f7ff bb20 	b.w	d4f9c <network_set_listen_timeout>

000d595c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d595c:	2200      	movs	r2, #0
   d595e:	4611      	mov	r1, r2
   d5960:	6840      	ldr	r0, [r0, #4]
   d5962:	f7ff bb23 	b.w	d4fac <network_get_listen_timeout>

000d5966 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5966:	2200      	movs	r2, #0
   d5968:	4611      	mov	r1, r2
   d596a:	6840      	ldr	r0, [r0, #4]
   d596c:	f7ff bb0e 	b.w	d4f8c <network_listening>

000d5970 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5974:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5976:	b095      	sub	sp, #84	; 0x54
   d5978:	4616      	mov	r6, r2
   d597a:	460d      	mov	r5, r1
   d597c:	4607      	mov	r7, r0
    IPAddress addr;
   d597e:	f7ff fd03 	bl	d5388 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5982:	4621      	mov	r1, r4
   d5984:	2220      	movs	r2, #32
   d5986:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5988:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d598a:	f000 fa24 	bl	d5dd6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d598e:	2340      	movs	r3, #64	; 0x40
   d5990:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5992:	4621      	mov	r1, r4
   d5994:	466b      	mov	r3, sp
   d5996:	aa0c      	add	r2, sp, #48	; 0x30
   d5998:	4630      	mov	r0, r6
   d599a:	f7ff f983 	bl	d4ca4 <netdb_getaddrinfo>
    if (!r) {
   d599e:	4604      	mov	r4, r0
   d59a0:	2800      	cmp	r0, #0
   d59a2:	d144      	bne.n	d5a2e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59a4:	4602      	mov	r2, r0
   d59a6:	2101      	movs	r1, #1
   d59a8:	6868      	ldr	r0, [r5, #4]
   d59aa:	f7ff facf 	bl	d4f4c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59ae:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59b0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59b2:	4622      	mov	r2, r4
   d59b4:	6868      	ldr	r0, [r5, #4]
   d59b6:	f7ff fac9 	bl	d4f4c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59ba:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59bc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d59be:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59c0:	2e00      	cmp	r6, #0
   d59c2:	d034      	beq.n	d5a2e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d59c4:	2900      	cmp	r1, #0
   d59c6:	d132      	bne.n	d5a2e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d59c8:	6873      	ldr	r3, [r6, #4]
   d59ca:	2b02      	cmp	r3, #2
   d59cc:	d002      	beq.n	d59d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d59ce:	2b0a      	cmp	r3, #10
   d59d0:	d009      	beq.n	d59e6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d59d2:	e02a      	b.n	d5a2a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d59d4:	f1b8 0f00 	cmp.w	r8, #0
   d59d8:	d027      	beq.n	d5a2a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d59da:	6971      	ldr	r1, [r6, #20]
   d59dc:	4638      	mov	r0, r7
   d59de:	3104      	adds	r1, #4
   d59e0:	f7ff fcff 	bl	d53e2 <_ZN9IPAddressaSEPKh>
   d59e4:	e020      	b.n	d5a28 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d59e6:	f1b9 0f00 	cmp.w	r9, #0
   d59ea:	d01e      	beq.n	d5a2a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d59ec:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d59ee:	2211      	movs	r2, #17
   d59f0:	a801      	add	r0, sp, #4
   d59f2:	f000 f9f0 	bl	d5dd6 <memset>
                    a.v = 6;
   d59f6:	2306      	movs	r3, #6
   d59f8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d59fc:	ad01      	add	r5, sp, #4
   d59fe:	f104 0308 	add.w	r3, r4, #8
   d5a02:	3418      	adds	r4, #24
   d5a04:	6818      	ldr	r0, [r3, #0]
   d5a06:	6859      	ldr	r1, [r3, #4]
   d5a08:	462a      	mov	r2, r5
   d5a0a:	c203      	stmia	r2!, {r0, r1}
   d5a0c:	3308      	adds	r3, #8
   d5a0e:	42a3      	cmp	r3, r4
   d5a10:	4615      	mov	r5, r2
   d5a12:	d1f7      	bne.n	d5a04 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5a14:	a901      	add	r1, sp, #4
   d5a16:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5a18:	ad07      	add	r5, sp, #28
   d5a1a:	f7ff fcc3 	bl	d53a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a20:	1d3c      	adds	r4, r7, #4
   d5a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a24:	682b      	ldr	r3, [r5, #0]
   d5a26:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5a28:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a2a:	69f6      	ldr	r6, [r6, #28]
   d5a2c:	e7c8      	b.n	d59c0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5a2e:	9800      	ldr	r0, [sp, #0]
   d5a30:	f7ff f930 	bl	d4c94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5a34:	4638      	mov	r0, r7
   d5a36:	b015      	add	sp, #84	; 0x54
   d5a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5a3c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5a3c:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5a3e:	4a03      	ldr	r2, [pc, #12]	; (d5a4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5a40:	601a      	str	r2, [r3, #0]
   d5a42:	2200      	movs	r2, #0
   d5a44:	605a      	str	r2, [r3, #4]
   d5a46:	4770      	bx	lr
   d5a48:	2003e728 	.word	0x2003e728
   d5a4c:	000d61c4 	.word	0x000d61c4

000d5a50 <_Z17acquireWireBufferv>:
   d5a50:	b570      	push	{r4, r5, r6, lr}
   d5a52:	4604      	mov	r4, r0
   d5a54:	2514      	movs	r5, #20
   d5a56:	462a      	mov	r2, r5
   d5a58:	4e09      	ldr	r6, [pc, #36]	; (d5a80 <_Z17acquireWireBufferv+0x30>)
   d5a5a:	2100      	movs	r1, #0
   d5a5c:	f000 f9bb 	bl	d5dd6 <memset>
   d5a60:	8025      	strh	r5, [r4, #0]
   d5a62:	2520      	movs	r5, #32
   d5a64:	4631      	mov	r1, r6
   d5a66:	60a5      	str	r5, [r4, #8]
   d5a68:	6125      	str	r5, [r4, #16]
   d5a6a:	4628      	mov	r0, r5
   d5a6c:	f000 f840 	bl	d5af0 <_ZnajRKSt9nothrow_t>
   d5a70:	4631      	mov	r1, r6
   d5a72:	6060      	str	r0, [r4, #4]
   d5a74:	4628      	mov	r0, r5
   d5a76:	f000 f83b 	bl	d5af0 <_ZnajRKSt9nothrow_t>
   d5a7a:	60e0      	str	r0, [r4, #12]
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	bd70      	pop	{r4, r5, r6, pc}
   d5a80:	000d61f0 	.word	0x000d61f0

000d5a84 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5a84:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a86:	4d0e      	ldr	r5, [pc, #56]	; (d5ac0 <_Z19__fetch_global_Wirev+0x3c>)
   d5a88:	6829      	ldr	r1, [r5, #0]
   d5a8a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5a8e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a90:	d113      	bne.n	d5aba <_Z19__fetch_global_Wirev+0x36>
   d5a92:	4628      	mov	r0, r5
   d5a94:	f7fe fb03 	bl	d409e <__cxa_guard_acquire>
   d5a98:	b178      	cbz	r0, d5aba <_Z19__fetch_global_Wirev+0x36>
   d5a9a:	a801      	add	r0, sp, #4
   d5a9c:	f7ff ffd8 	bl	d5a50 <_Z17acquireWireBufferv>
   d5aa0:	aa01      	add	r2, sp, #4
   d5aa2:	4621      	mov	r1, r4
   d5aa4:	4807      	ldr	r0, [pc, #28]	; (d5ac4 <_Z19__fetch_global_Wirev+0x40>)
   d5aa6:	f7ff fdd9 	bl	d565c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5aaa:	4628      	mov	r0, r5
   d5aac:	f7fe fafc 	bl	d40a8 <__cxa_guard_release>
   d5ab0:	4a05      	ldr	r2, [pc, #20]	; (d5ac8 <_Z19__fetch_global_Wirev+0x44>)
   d5ab2:	4906      	ldr	r1, [pc, #24]	; (d5acc <_Z19__fetch_global_Wirev+0x48>)
   d5ab4:	4803      	ldr	r0, [pc, #12]	; (d5ac4 <_Z19__fetch_global_Wirev+0x40>)
   d5ab6:	f000 f80b 	bl	d5ad0 <__aeabi_atexit>
	return wire;
}
   d5aba:	4802      	ldr	r0, [pc, #8]	; (d5ac4 <_Z19__fetch_global_Wirev+0x40>)
   d5abc:	b007      	add	sp, #28
   d5abe:	bd30      	pop	{r4, r5, pc}
   d5ac0:	2003e734 	.word	0x2003e734
   d5ac4:	2003e738 	.word	0x2003e738
   d5ac8:	2003ded0 	.word	0x2003ded0
   d5acc:	000d5605 	.word	0x000d5605

000d5ad0 <__aeabi_atexit>:
   d5ad0:	460b      	mov	r3, r1
   d5ad2:	4601      	mov	r1, r0
   d5ad4:	4618      	mov	r0, r3
   d5ad6:	f000 b965 	b.w	d5da4 <__cxa_atexit>
	...

000d5adc <_ZSt15get_new_handlerv>:
   d5adc:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <_ZSt15get_new_handlerv+0xc>)
   d5ade:	6818      	ldr	r0, [r3, #0]
   d5ae0:	f3bf 8f5f 	dmb	sy
   d5ae4:	4770      	bx	lr
   d5ae6:	bf00      	nop
   d5ae8:	2003e74c 	.word	0x2003e74c

000d5aec <_ZdlPvj>:
   d5aec:	f7fe bad3 	b.w	d4096 <_ZdlPv>

000d5af0 <_ZnajRKSt9nothrow_t>:
   d5af0:	f000 b800 	b.w	d5af4 <_ZnwjRKSt9nothrow_t>

000d5af4 <_ZnwjRKSt9nothrow_t>:
   d5af4:	b510      	push	{r4, lr}
   d5af6:	2800      	cmp	r0, #0
   d5af8:	bf14      	ite	ne
   d5afa:	4604      	movne	r4, r0
   d5afc:	2401      	moveq	r4, #1
   d5afe:	4620      	mov	r0, r4
   d5b00:	f7ff fa64 	bl	d4fcc <malloc>
   d5b04:	b920      	cbnz	r0, d5b10 <_ZnwjRKSt9nothrow_t+0x1c>
   d5b06:	f7ff ffe9 	bl	d5adc <_ZSt15get_new_handlerv>
   d5b0a:	b108      	cbz	r0, d5b10 <_ZnwjRKSt9nothrow_t+0x1c>
   d5b0c:	4780      	blx	r0
   d5b0e:	e7f6      	b.n	d5afe <_ZnwjRKSt9nothrow_t+0xa>
   d5b10:	bd10      	pop	{r4, pc}
	...

000d5b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b14:	4b18      	ldr	r3, [pc, #96]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d1      	lsls	r1, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b16      	ldr	r3, [pc, #88]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d2      	lsls	r2, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b14      	ldr	r3, [pc, #80]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d0      	lsls	r0, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b12      	ldr	r3, [pc, #72]	; (d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d1      	lsls	r1, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b10      	ldr	r3, [pc, #64]	; (d5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d2      	lsls	r2, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b0e      	ldr	r3, [pc, #56]	; (d5b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d0      	lsls	r0, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b0c      	ldr	r3, [pc, #48]	; (d5b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d1      	lsls	r1, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4b0a      	ldr	r3, [pc, #40]	; (d5b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b6a:	681a      	ldr	r2, [r3, #0]
   d5b6c:	07d2      	lsls	r2, r2, #31
   d5b6e:	bf5c      	itt	pl
   d5b70:	2201      	movpl	r2, #1
   d5b72:	601a      	strpl	r2, [r3, #0]
   d5b74:	4770      	bx	lr
   d5b76:	bf00      	nop
   d5b78:	2003e76c 	.word	0x2003e76c
   d5b7c:	2003e768 	.word	0x2003e768
   d5b80:	2003e764 	.word	0x2003e764
   d5b84:	2003e760 	.word	0x2003e760
   d5b88:	2003e75c 	.word	0x2003e75c
   d5b8c:	2003e758 	.word	0x2003e758
   d5b90:	2003e754 	.word	0x2003e754
   d5b94:	2003e750 	.word	0x2003e750

000d5b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5b98:	4b24      	ldr	r3, [pc, #144]	; (d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5b9a:	681a      	ldr	r2, [r3, #0]
   d5b9c:	07d0      	lsls	r0, r2, #31
   d5b9e:	bf5c      	itt	pl
   d5ba0:	2201      	movpl	r2, #1
   d5ba2:	601a      	strpl	r2, [r3, #0]
   d5ba4:	4b22      	ldr	r3, [pc, #136]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5ba6:	681a      	ldr	r2, [r3, #0]
   d5ba8:	07d1      	lsls	r1, r2, #31
   d5baa:	bf5c      	itt	pl
   d5bac:	2201      	movpl	r2, #1
   d5bae:	601a      	strpl	r2, [r3, #0]
   d5bb0:	4b20      	ldr	r3, [pc, #128]	; (d5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5bb2:	681a      	ldr	r2, [r3, #0]
   d5bb4:	07d2      	lsls	r2, r2, #31
   d5bb6:	bf5c      	itt	pl
   d5bb8:	2201      	movpl	r2, #1
   d5bba:	601a      	strpl	r2, [r3, #0]
   d5bbc:	4b1e      	ldr	r3, [pc, #120]	; (d5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5bbe:	681a      	ldr	r2, [r3, #0]
   d5bc0:	07d0      	lsls	r0, r2, #31
   d5bc2:	bf5c      	itt	pl
   d5bc4:	2201      	movpl	r2, #1
   d5bc6:	601a      	strpl	r2, [r3, #0]
   d5bc8:	4b1c      	ldr	r3, [pc, #112]	; (d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5bca:	681a      	ldr	r2, [r3, #0]
   d5bcc:	07d1      	lsls	r1, r2, #31
   d5bce:	bf5c      	itt	pl
   d5bd0:	2201      	movpl	r2, #1
   d5bd2:	601a      	strpl	r2, [r3, #0]
   d5bd4:	4b1a      	ldr	r3, [pc, #104]	; (d5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5bd6:	681a      	ldr	r2, [r3, #0]
   d5bd8:	07d2      	lsls	r2, r2, #31
   d5bda:	bf5c      	itt	pl
   d5bdc:	2201      	movpl	r2, #1
   d5bde:	601a      	strpl	r2, [r3, #0]
   d5be0:	4b18      	ldr	r3, [pc, #96]	; (d5c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5be2:	681a      	ldr	r2, [r3, #0]
   d5be4:	07d0      	lsls	r0, r2, #31
   d5be6:	bf5c      	itt	pl
   d5be8:	2201      	movpl	r2, #1
   d5bea:	601a      	strpl	r2, [r3, #0]
   d5bec:	4b16      	ldr	r3, [pc, #88]	; (d5c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5bee:	681a      	ldr	r2, [r3, #0]
   d5bf0:	07d1      	lsls	r1, r2, #31
   d5bf2:	bf5c      	itt	pl
   d5bf4:	2201      	movpl	r2, #1
   d5bf6:	601a      	strpl	r2, [r3, #0]
   d5bf8:	4b14      	ldr	r3, [pc, #80]	; (d5c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5bfa:	681a      	ldr	r2, [r3, #0]
   d5bfc:	07d2      	lsls	r2, r2, #31
   d5bfe:	bf5c      	itt	pl
   d5c00:	2201      	movpl	r2, #1
   d5c02:	601a      	strpl	r2, [r3, #0]
   d5c04:	4b12      	ldr	r3, [pc, #72]	; (d5c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5c06:	681a      	ldr	r2, [r3, #0]
   d5c08:	07d0      	lsls	r0, r2, #31
   d5c0a:	bf5c      	itt	pl
   d5c0c:	2201      	movpl	r2, #1
   d5c0e:	601a      	strpl	r2, [r3, #0]
   d5c10:	4b10      	ldr	r3, [pc, #64]	; (d5c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5c12:	681a      	ldr	r2, [r3, #0]
   d5c14:	07d1      	lsls	r1, r2, #31
   d5c16:	bf5c      	itt	pl
   d5c18:	2201      	movpl	r2, #1
   d5c1a:	601a      	strpl	r2, [r3, #0]
   d5c1c:	4b0e      	ldr	r3, [pc, #56]	; (d5c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5c1e:	681a      	ldr	r2, [r3, #0]
   d5c20:	07d2      	lsls	r2, r2, #31
   d5c22:	bf5c      	itt	pl
   d5c24:	2201      	movpl	r2, #1
   d5c26:	601a      	strpl	r2, [r3, #0]
   d5c28:	4770      	bx	lr
   d5c2a:	bf00      	nop
   d5c2c:	2003e79c 	.word	0x2003e79c
   d5c30:	2003e798 	.word	0x2003e798
   d5c34:	2003e794 	.word	0x2003e794
   d5c38:	2003e790 	.word	0x2003e790
   d5c3c:	2003e78c 	.word	0x2003e78c
   d5c40:	2003e788 	.word	0x2003e788
   d5c44:	2003e784 	.word	0x2003e784
   d5c48:	2003e780 	.word	0x2003e780
   d5c4c:	2003e77c 	.word	0x2003e77c
   d5c50:	2003e778 	.word	0x2003e778
   d5c54:	2003e774 	.word	0x2003e774
   d5c58:	2003e770 	.word	0x2003e770

000d5c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5c5c:	4b24      	ldr	r3, [pc, #144]	; (d5cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5c5e:	681a      	ldr	r2, [r3, #0]
   d5c60:	07d0      	lsls	r0, r2, #31
   d5c62:	bf5c      	itt	pl
   d5c64:	2201      	movpl	r2, #1
   d5c66:	601a      	strpl	r2, [r3, #0]
   d5c68:	4b22      	ldr	r3, [pc, #136]	; (d5cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5c6a:	681a      	ldr	r2, [r3, #0]
   d5c6c:	07d1      	lsls	r1, r2, #31
   d5c6e:	bf5c      	itt	pl
   d5c70:	2201      	movpl	r2, #1
   d5c72:	601a      	strpl	r2, [r3, #0]
   d5c74:	4b20      	ldr	r3, [pc, #128]	; (d5cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5c76:	681a      	ldr	r2, [r3, #0]
   d5c78:	07d2      	lsls	r2, r2, #31
   d5c7a:	bf5c      	itt	pl
   d5c7c:	2201      	movpl	r2, #1
   d5c7e:	601a      	strpl	r2, [r3, #0]
   d5c80:	4b1e      	ldr	r3, [pc, #120]	; (d5cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5c82:	681a      	ldr	r2, [r3, #0]
   d5c84:	07d0      	lsls	r0, r2, #31
   d5c86:	bf5c      	itt	pl
   d5c88:	2201      	movpl	r2, #1
   d5c8a:	601a      	strpl	r2, [r3, #0]
   d5c8c:	4b1c      	ldr	r3, [pc, #112]	; (d5d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5c8e:	681a      	ldr	r2, [r3, #0]
   d5c90:	07d1      	lsls	r1, r2, #31
   d5c92:	bf5c      	itt	pl
   d5c94:	2201      	movpl	r2, #1
   d5c96:	601a      	strpl	r2, [r3, #0]
   d5c98:	4b1a      	ldr	r3, [pc, #104]	; (d5d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5c9a:	681a      	ldr	r2, [r3, #0]
   d5c9c:	07d2      	lsls	r2, r2, #31
   d5c9e:	bf5c      	itt	pl
   d5ca0:	2201      	movpl	r2, #1
   d5ca2:	601a      	strpl	r2, [r3, #0]
   d5ca4:	4b18      	ldr	r3, [pc, #96]	; (d5d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5ca6:	681a      	ldr	r2, [r3, #0]
   d5ca8:	07d0      	lsls	r0, r2, #31
   d5caa:	bf5c      	itt	pl
   d5cac:	2201      	movpl	r2, #1
   d5cae:	601a      	strpl	r2, [r3, #0]
   d5cb0:	4b16      	ldr	r3, [pc, #88]	; (d5d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5cb2:	681a      	ldr	r2, [r3, #0]
   d5cb4:	07d1      	lsls	r1, r2, #31
   d5cb6:	bf5c      	itt	pl
   d5cb8:	2201      	movpl	r2, #1
   d5cba:	601a      	strpl	r2, [r3, #0]
   d5cbc:	4b14      	ldr	r3, [pc, #80]	; (d5d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5cbe:	681a      	ldr	r2, [r3, #0]
   d5cc0:	07d2      	lsls	r2, r2, #31
   d5cc2:	bf5c      	itt	pl
   d5cc4:	2201      	movpl	r2, #1
   d5cc6:	601a      	strpl	r2, [r3, #0]
   d5cc8:	4b12      	ldr	r3, [pc, #72]	; (d5d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5cca:	681a      	ldr	r2, [r3, #0]
   d5ccc:	07d0      	lsls	r0, r2, #31
   d5cce:	bf5c      	itt	pl
   d5cd0:	2201      	movpl	r2, #1
   d5cd2:	601a      	strpl	r2, [r3, #0]
   d5cd4:	4b10      	ldr	r3, [pc, #64]	; (d5d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5cd6:	681a      	ldr	r2, [r3, #0]
   d5cd8:	07d1      	lsls	r1, r2, #31
   d5cda:	bf5c      	itt	pl
   d5cdc:	2201      	movpl	r2, #1
   d5cde:	601a      	strpl	r2, [r3, #0]
   d5ce0:	4b0e      	ldr	r3, [pc, #56]	; (d5d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5ce2:	681a      	ldr	r2, [r3, #0]
   d5ce4:	07d2      	lsls	r2, r2, #31
   d5ce6:	bf5c      	itt	pl
   d5ce8:	2201      	movpl	r2, #1
   d5cea:	601a      	strpl	r2, [r3, #0]
   d5cec:	4770      	bx	lr
   d5cee:	bf00      	nop
   d5cf0:	2003e7cc 	.word	0x2003e7cc
   d5cf4:	2003e7c8 	.word	0x2003e7c8
   d5cf8:	2003e7c4 	.word	0x2003e7c4
   d5cfc:	2003e7c0 	.word	0x2003e7c0
   d5d00:	2003e7bc 	.word	0x2003e7bc
   d5d04:	2003e7b8 	.word	0x2003e7b8
   d5d08:	2003e7b4 	.word	0x2003e7b4
   d5d0c:	2003e7b0 	.word	0x2003e7b0
   d5d10:	2003e7ac 	.word	0x2003e7ac
   d5d14:	2003e7a8 	.word	0x2003e7a8
   d5d18:	2003e7a4 	.word	0x2003e7a4
   d5d1c:	2003e7a0 	.word	0x2003e7a0

000d5d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d20:	4b18      	ldr	r3, [pc, #96]	; (d5d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d22:	681a      	ldr	r2, [r3, #0]
   d5d24:	07d1      	lsls	r1, r2, #31
   d5d26:	bf5c      	itt	pl
   d5d28:	2201      	movpl	r2, #1
   d5d2a:	601a      	strpl	r2, [r3, #0]
   d5d2c:	4b16      	ldr	r3, [pc, #88]	; (d5d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5d2e:	681a      	ldr	r2, [r3, #0]
   d5d30:	07d2      	lsls	r2, r2, #31
   d5d32:	bf5c      	itt	pl
   d5d34:	2201      	movpl	r2, #1
   d5d36:	601a      	strpl	r2, [r3, #0]
   d5d38:	4b14      	ldr	r3, [pc, #80]	; (d5d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d3a:	681a      	ldr	r2, [r3, #0]
   d5d3c:	07d0      	lsls	r0, r2, #31
   d5d3e:	bf5c      	itt	pl
   d5d40:	2201      	movpl	r2, #1
   d5d42:	601a      	strpl	r2, [r3, #0]
   d5d44:	4b12      	ldr	r3, [pc, #72]	; (d5d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	07d1      	lsls	r1, r2, #31
   d5d4a:	bf5c      	itt	pl
   d5d4c:	2201      	movpl	r2, #1
   d5d4e:	601a      	strpl	r2, [r3, #0]
   d5d50:	4b10      	ldr	r3, [pc, #64]	; (d5d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	07d2      	lsls	r2, r2, #31
   d5d56:	bf5c      	itt	pl
   d5d58:	2201      	movpl	r2, #1
   d5d5a:	601a      	strpl	r2, [r3, #0]
   d5d5c:	4b0e      	ldr	r3, [pc, #56]	; (d5d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d5e:	681a      	ldr	r2, [r3, #0]
   d5d60:	07d0      	lsls	r0, r2, #31
   d5d62:	bf5c      	itt	pl
   d5d64:	2201      	movpl	r2, #1
   d5d66:	601a      	strpl	r2, [r3, #0]
   d5d68:	4b0c      	ldr	r3, [pc, #48]	; (d5d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d6a:	681a      	ldr	r2, [r3, #0]
   d5d6c:	07d1      	lsls	r1, r2, #31
   d5d6e:	bf5c      	itt	pl
   d5d70:	2201      	movpl	r2, #1
   d5d72:	601a      	strpl	r2, [r3, #0]
   d5d74:	4b0a      	ldr	r3, [pc, #40]	; (d5da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d76:	681a      	ldr	r2, [r3, #0]
   d5d78:	07d2      	lsls	r2, r2, #31
   d5d7a:	bf5c      	itt	pl
   d5d7c:	2201      	movpl	r2, #1
   d5d7e:	601a      	strpl	r2, [r3, #0]
   d5d80:	4770      	bx	lr
   d5d82:	bf00      	nop
   d5d84:	2003e7ec 	.word	0x2003e7ec
   d5d88:	2003e7e8 	.word	0x2003e7e8
   d5d8c:	2003e7e4 	.word	0x2003e7e4
   d5d90:	2003e7e0 	.word	0x2003e7e0
   d5d94:	2003e7dc 	.word	0x2003e7dc
   d5d98:	2003e7d8 	.word	0x2003e7d8
   d5d9c:	2003e7d4 	.word	0x2003e7d4
   d5da0:	2003e7d0 	.word	0x2003e7d0

000d5da4 <__cxa_atexit>:
   d5da4:	b510      	push	{r4, lr}
   d5da6:	4c05      	ldr	r4, [pc, #20]	; (d5dbc <__cxa_atexit+0x18>)
   d5da8:	4613      	mov	r3, r2
   d5daa:	b12c      	cbz	r4, d5db8 <__cxa_atexit+0x14>
   d5dac:	460a      	mov	r2, r1
   d5dae:	4601      	mov	r1, r0
   d5db0:	2002      	movs	r0, #2
   d5db2:	f3af 8000 	nop.w
   d5db6:	bd10      	pop	{r4, pc}
   d5db8:	4620      	mov	r0, r4
   d5dba:	bd10      	pop	{r4, pc}
   d5dbc:	00000000 	.word	0x00000000

000d5dc0 <memcpy>:
   d5dc0:	b510      	push	{r4, lr}
   d5dc2:	1e43      	subs	r3, r0, #1
   d5dc4:	440a      	add	r2, r1
   d5dc6:	4291      	cmp	r1, r2
   d5dc8:	d004      	beq.n	d5dd4 <memcpy+0x14>
   d5dca:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5dce:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5dd2:	e7f8      	b.n	d5dc6 <memcpy+0x6>
   d5dd4:	bd10      	pop	{r4, pc}

000d5dd6 <memset>:
   d5dd6:	4402      	add	r2, r0
   d5dd8:	4603      	mov	r3, r0
   d5dda:	4293      	cmp	r3, r2
   d5ddc:	d002      	beq.n	d5de4 <memset+0xe>
   d5dde:	f803 1b01 	strb.w	r1, [r3], #1
   d5de2:	e7fa      	b.n	d5dda <memset+0x4>
   d5de4:	4770      	bx	lr
	...

000d5de8 <srand>:
   d5de8:	b538      	push	{r3, r4, r5, lr}
   d5dea:	4b12      	ldr	r3, [pc, #72]	; (d5e34 <srand+0x4c>)
   d5dec:	681c      	ldr	r4, [r3, #0]
   d5dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5df0:	4605      	mov	r5, r0
   d5df2:	b9d3      	cbnz	r3, d5e2a <srand+0x42>
   d5df4:	2018      	movs	r0, #24
   d5df6:	f7ff f8e9 	bl	d4fcc <malloc>
   d5dfa:	f243 330e 	movw	r3, #13070	; 0x330e
   d5dfe:	63a0      	str	r0, [r4, #56]	; 0x38
   d5e00:	8003      	strh	r3, [r0, #0]
   d5e02:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5e06:	8043      	strh	r3, [r0, #2]
   d5e08:	f241 2334 	movw	r3, #4660	; 0x1234
   d5e0c:	8083      	strh	r3, [r0, #4]
   d5e0e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5e12:	80c3      	strh	r3, [r0, #6]
   d5e14:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5e18:	8103      	strh	r3, [r0, #8]
   d5e1a:	2305      	movs	r3, #5
   d5e1c:	8143      	strh	r3, [r0, #10]
   d5e1e:	230b      	movs	r3, #11
   d5e20:	8183      	strh	r3, [r0, #12]
   d5e22:	2201      	movs	r2, #1
   d5e24:	2300      	movs	r3, #0
   d5e26:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5e2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5e2c:	2200      	movs	r2, #0
   d5e2e:	611d      	str	r5, [r3, #16]
   d5e30:	615a      	str	r2, [r3, #20]
   d5e32:	bd38      	pop	{r3, r4, r5, pc}
   d5e34:	2003decc 	.word	0x2003decc

000d5e38 <strlen>:
   d5e38:	4603      	mov	r3, r0
   d5e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5e3e:	2a00      	cmp	r2, #0
   d5e40:	d1fb      	bne.n	d5e3a <strlen+0x2>
   d5e42:	1a18      	subs	r0, r3, r0
   d5e44:	3801      	subs	r0, #1
   d5e46:	4770      	bx	lr

000d5e48 <dynalib_user>:
   d5e48:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5e58:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
   d5e68:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
   d5e78:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
   d5e88:	6f70 6577 2e72 7200 6465 003d 202c 7269     power..red=., ir
   d5e98:	003d 202c 5248 003d 202c 5248 6176 696c     =., HR=., HRvali
   d5ea8:	3d64 2c00 5320 4f50 3d32 2c00 5320 4f50     d=., SPO2=., SPO
   d5eb8:	5632 6c61 6469 003d                         2Valid=.

000d5ec0 <_ZL14uch_spo2_table>:
   d5ec0:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   d5ed0:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   d5ee0:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   d5ef0:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   d5f00:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   d5f10:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   d5f20:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   d5f30:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   d5f40:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   d5f50:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   d5f60:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   d5f70:	0709 0506 0203 0001                         ........

000d5f78 <_ZTVN5spark13EthernetClassE>:
	...
   d5f80:	504b 000d 5041 000d 5037 000d 502d 000d     KP..AP..7P..-P..
   d5f90:	5021 000d 5015 000d 5009 000d 5001 000d     !P...P...P...P..
   d5fa0:	4ff7 000d 4fed 000d 5971 000d 6162 6475     .O...O..qY..baud
   d5fb0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5fc0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5fd0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5fe0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5ff0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6000:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6010:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6020:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d6030:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6040:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6050:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d6060:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d6070:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d6080:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d6090:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d60a0:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d60b0:	7463 6d69 0065 0000                         ctime...

000d60b8 <_ZTV9IPAddress>:
	...
   d60c0:	5325 000d 5315 000d 5317 000d               %S...S...S..

000d60cc <_ZTV9USBSerial>:
	...
   d60d4:	53fd 000d 544d 000d 545b 000d 50d5 000d     .S..MT..[T...P..
   d60e4:	5439 000d 53ff 000d 5415 000d 5447 000d     9T...S...T..GT..
   d60f4:	542b 000d 53f9 000d                         +T...S..

000d60fc <_ZTV11USARTSerial>:
	...
   d6104:	5509 000d 5559 000d 5567 000d 50d5 000d     .U..YU..gU...P..
   d6114:	551d 000d 553f 000d 552b 000d 5553 000d     .U..?U..+U..SU..
   d6124:	550b 000d 550f 000d                         .U...U..

000d612c <_ZTV7TwoWire>:
	...
   d6134:	5605 000d 564f 000d 5627 000d 5607 000d     .V..OV..'V...V..
   d6144:	562f 000d 5637 000d 563f 000d 5647 000d     /V..7V..?V..GV..

000d6154 <_ZTVN5spark9MeshClassE>:
	...
   d615c:	5771 000d 5767 000d 575d 000d 5753 000d     qW..gW..]W..SW..
   d616c:	5747 000d 573b 000d 572f 000d 5727 000d     GW..;W../W..'W..
   d617c:	571d 000d 5713 000d 5971 000d               .W...W..qY..

000d6188 <_ZTVN5spark9WiFiClassE>:
	...
   d6190:	58eb 000d 58e1 000d 58d7 000d 588d 000d     .X...X...X...X..
   d61a0:	58cb 000d 58bf 000d 58b3 000d 58ab 000d     .X...X...X...X..
   d61b0:	58a1 000d 5897 000d 5971 000d               .X...X..qY..

000d61bc <_ZTVN5spark12NetworkClassE>:
	...
   d61c4:	5909 000d 5913 000d 591d 000d 5927 000d     .Y...Y...Y..'Y..
   d61d4:	5931 000d 593d 000d 5949 000d 5955 000d     1Y..=Y..IY..UY..
   d61e4:	595d 000d 5967 000d 5971 000d               ]Y..gY..qY..

000d61f0 <_ZSt7nothrow>:
   d61f0:	0000 0000                                   ....

000d61f4 <__sf_fake_stdin>:
	...

000d6214 <__sf_fake_stdout>:
	...

000d6234 <__sf_fake_stderr>:
	...
   d6254:	0043                                        C.

000d6256 <link_const_variable_data_end>:
	...

000d6258 <link_constructors_location>:
   d6258:	000d4355 	.word	0x000d4355
   d625c:	000d4399 	.word	0x000d4399
   d6260:	000d48af 	.word	0x000d48af
   d6264:	000d4c91 	.word	0x000d4c91
   d6268:	000d5055 	.word	0x000d5055
   d626c:	000d5069 	.word	0x000d5069
   d6270:	000d50ad 	.word	0x000d50ad
   d6274:	000d51a1 	.word	0x000d51a1
   d6278:	000d51b1 	.word	0x000d51b1
   d627c:	000d51e9 	.word	0x000d51e9
   d6280:	000d583d 	.word	0x000d583d
   d6284:	000d58f5 	.word	0x000d58f5
   d6288:	000d5a3d 	.word	0x000d5a3d
   d628c:	000d5b15 	.word	0x000d5b15
   d6290:	000d5b99 	.word	0x000d5b99
   d6294:	000d5c5d 	.word	0x000d5c5d
   d6298:	000d5d21 	.word	0x000d5d21

000d629c <link_constructors_end>:
   d629c:	00000000 	.word	0x00000000
